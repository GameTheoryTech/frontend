{"version":3,"sources":["components/TokenInput/TokenInput.tsx","hooks/useTombStats.ts","components/Value/Value.tsx","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/PageHeader/PageHeader.tsx","hooks/useBanks.ts","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx"],"names":["StyledTokenInput","styled","div","StyledSpacer","props","theme","spacing","StyledTokenAdornmentWrapper","StyledMaxText","color","grey","TokenInput","max","symbol","onChange","onSelectMax","value","toLocaleString","Input","endAdornment","Button","size","variant","onClick","placeholder","useTombStats","useState","stat","setStat","fastRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getTombStat","console","error","fetchTombPrice","StyledValue","Value","useZap","bank","handleTransactionReceipt","useHandleTransactionReceipt","onZap","useCallback","zappingToken","tokenName","amount","zapIn","depositTokenName","useShareStats","slowRefresh","getShareStat","fetchSharePrice","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","getDepositTokenPriceInDollars","balance","catch","err","stack","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","PageHeader","icon","subtitle","title","useBanks","useContext","BanksContext","banks","useEarnings","poolName","earnTokenName","poolId","BigNumber","from","setBalance","earnedFromBank","myAccount","refreshBalance","useHarvest","onReward","harvest","contract","StyledCardHeader","StyledCardActions","StyledCardContentInner","Harvest","rewardsLocked","earnings","tombStats","tShareStats","tokenStats","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","style","boxShadow","CardContent","CardIcon","TokenSymbol","earnToken","Label","text","disabled","eq","useStake","onStake","amountBn","parseUnits","depositToken","decimal","stake","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","decimals","onConfirm","onDismiss","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","ModalActions","WithdrawModal","StyledActionSpacer","Stake","useApprove","address","approveStatus","approve","tokenBalance","ThemeContext","useTokenBalance","stakedBalance","useModal","isNaN","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","closedForStaking","PENDING","UNKNOWN","marginTop","IconButton","useBank","contractName","find","page","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","height","breakpoints","up","LPTokenHelpText","pairName","uniswapUrl","tombAddr","TOMB","tshareAddr","TSHARE","includes","StyledLink","href","target","BankNotFound","Center","StyledBank","primary","main","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","classes","bankId","useParams","account","useWallet","statsOnPool","name","Alert","severity","marginBottom","Box","Grid","container","justifyContent","rowSpacing","columnSpacing","item","xs","md","lg","className","textAlign","Typography","yearlyAPR","locked","dailyAPR","TVL","fee","mt","Spacer","endsWith","UnlockWallet"],"mappings":"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","file":"static/js/0.5f6739bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useZap = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleZap = useCallback(\r\n    (zappingToken: string, tokenName: string, amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.zapIn(zappingToken, tokenName, amount),\r\n        `Zap ${amount} in ${bank.depositTokenName}.`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onZap: handleZap };\r\n};\r\n\r\nexport default useZap;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchSharePrice() {\r\n      try {\r\n        setStat(await tombFinance.getShareStat());\r\n      } catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchSharePrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 610px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[100]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\n\r\nconst useBanks = () => {\r\n  const { banks } = useContext(BanksContext);\r\n  return [banks];\r\n};\r\n\r\nexport default useBanks;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, earnTokenName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarnings;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { Bank } from '../tomb-finance';\r\n\r\nconst useHarvest = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(\r\n      tombFinance.harvest(bank.contract, bank.poolId),\r\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\r\n    );\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvest;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card, CardContent } from '@mui/material';\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useEarnings from '../../../hooks/useEarnings';\r\nimport useHarvest from '../../../hooks/useHarvest';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport useShareStats from '../../../hooks/usetShareStats';\r\n\r\ninterface HarvestProps {\r\n  bank: Bank;\r\n  rewardsLocked : number;\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({ bank, rewardsLocked }) => {\r\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\r\n  const { onReward } = useHarvest(bank);\r\n  const tombStats = useTombStats();\r\n  const tShareStats = useShareStats();\r\n\r\n  const tokenName = bank.earnTokenName === 'THEORY' ? 'THEORY' : 'GAME';\r\n  const tokenStats = bank.earnTokenName === 'THEORY' ? tShareStats : tombStats;\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\r\n    [tokenStats],\r\n  );\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n  return (\r\n    <Card style={{ boxShadow: 'none !important'}}>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <CardIcon>\r\n              <TokenSymbol symbol={bank.earnToken.symbol} />\r\n            </CardIcon>\r\n            <Value value={getDisplayBalance(earnings)} />\r\n            <Label text={`≈ $${earnedInDollars}`} color=\"#89cff0\" />\r\n            <Label text={`Total Earned`} />\r\n            <br/>\r\n            <Value value={`${(Number(getDisplayBalance(earnings)) * (100.0-rewardsLocked) / 100.0).toFixed(4)}`} />\r\n            <Label text={`≈ $${(Number(earnedInDollars) * (100.0-rewardsLocked) / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n            <Label text={`${tokenName} Earned`} />\r\n            <br/>\r\n            <Value value={`${(Number(getDisplayBalance(earnings)) * rewardsLocked / 100.0).toFixed(4)}`} />\r\n            <Label text={`≈ $${(Number(earnedInDollars) * rewardsLocked / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n            <Label text={`L${tokenName} Earned`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\r\n              Claim\r\n            </Button>\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useStake = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\r\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStake;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalance;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useWithdraw = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\r\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract} `,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdraw;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  decimals: number;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\r\n\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import React, { useMemo, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// import Button from '../../../components/Button';\r\nimport { Button, Card, CardContent } from '@mui/material';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport FlashOnIcon from '@mui/icons-material/FlashOn';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useStake from '../../../hooks/useStake';\r\nimport useZap from '../../../hooks/useZap';\r\nimport useStakedBalance from '../../../hooks/useStakedBalance';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdraw from '../../../hooks/useWithdraw';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport ZapModal from './ZapModal';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\n\r\ninterface StakeProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\r\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\r\n\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  const tokenBalance = useTokenBalance(bank.depositToken);\r\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\r\n    [stakedTokenPriceInDollars],\r\n  );\r\n  const earnedInDollars = (\r\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\r\n  ).toFixed(2);\r\n  const { onStake } = useStake(bank);\r\n  const { onZap } = useZap(bank);\r\n  const { onWithdraw } = useWithdraw(bank);\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onStake(amount);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  // const [onPresentZap, onDissmissZap] = useModal(\r\n  //   <ZapModal\r\n  //     decimals={bank.depositToken.decimal}\r\n  //     onConfirm={(zappingToken, tokenName, amount) => {\r\n  //       if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n  //       onZap(zappingToken, tokenName, amount);\r\n  //       onDissmissZap();\r\n  //     }}\r\n  //     tokenName={bank.depositTokenName}\r\n  //   />,\r\n  // );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onWithdraw(amount);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Card style={{ boxShadow: 'none !important'}}>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <CardIcon>\r\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\r\n            </CardIcon>\r\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\r\n            <Label text={`≈ $${earnedInDollars}`} color=\"#89cff0\" />\r\n            <Label text={`${bank.depositTokenName} Staked`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            {approveStatus !== ApprovalState.APPROVED ? (\r\n              <Button\r\n                disabled={\r\n                  bank.closedForStaking ||\r\n                  approveStatus === ApprovalState.PENDING ||\r\n                  approveStatus === ApprovalState.UNKNOWN\r\n                }\r\n                onClick={approve}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ marginTop: '20px' }}\r\n              >\r\n                {`Approve ${bank.depositTokenName}`}\r\n              </Button>\r\n            ) : (\r\n              <>\r\n                <IconButton onClick={onPresentWithdraw}>\r\n                  <RemoveIcon />\r\n                </IconButton>\r\n                <StyledActionSpacer />\r\n                {/* <IconButton\r\n                  disabled={bank.closedForStaking || bank.depositTokenName === 'GAME-DAI-LP'}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\r\n                >\r\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\r\n                </IconButton> */}\r\n                <StyledActionSpacer />\r\n                <IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\nimport { Bank, ContractName } from '../tomb-finance';\r\n\r\nconst useBank = (contractName: ContractName): Bank => {\r\n  const { banks } = useContext(BanksContext);\r\n  return banks.find((bank) => bank.page === contractName);\r\n};\r\n\r\nexport default useBank;\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport { PoolStats } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useStatsForPool = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n\r\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\r\n\r\n  const fetchAPRsForPool = useCallback(async () => {\r\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\r\n  }, [tombFinance, bank]);\r\n\r\n  useEffect(() => {\r\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch APRs for pool: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\r\n\r\n  return poolAPRs;\r\n};\r\n\r\nexport default useStatsForPool;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeem = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeem;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@mui/material';\r\n\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Spacer from '../../components/Spacer';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport useBank from '../../hooks/useBank';\r\nimport useStatsForPool from '../../hooks/useStatsForPool';\r\nimport useRedeem from '../../hooks/useRedeem';\r\nimport { Bank as BankEntity } from '../../tomb-finance';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Alert } from '@mui/lab';\r\nconst useStyles = makeStyles((theme : any) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\n//TODO: Get deposit fee from contract?\r\nconst Bank: React.FC = () => {\r\n  useEffect(() => window.scrollTo(0, 0));\r\n  const classes = useStyles();\r\n  const { bankId } = useParams();\r\n  const bank = useBank(bankId);\r\n\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeem(bank);\r\n  const statsOnPool = useStatsForPool(bank);\r\n  return account && bank ? (\r\n    <>\r\n      <PageHeader\r\n        icon=\"🏦\"\r\n        subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName} and L${bank?.earnTokenName}`}\r\n        title={bank?.name}\r\n      />\r\n      <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n        {bank.earnTokenName == \"GAME\" ? \"There is a 1% deposit fee for genesis pools to kickstart the theory and grow the treasury.\" : \"The withdraw fee changes the longer you are in the farm. The fees are as follows: 1 block = 25%, less than 1 hour = 8%, less than 1 day = 4%, less than 3 days = 2%, less than 5 days = 1%, less than 2 weeks = 0.5%, less than 4 weeks = 0.25%, equal to or more than 4 weeks = 0.01%. Depositing or claiming does not reset your withdraw fee.\"}\r\n      </Alert>\r\n      <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n        {bank.earnTokenName == \"GAME\" ? \"Due to the price fluctuations of low liquidity, APRs should be only thought of as relative to other pools in the protocol and not as monetary gain. Rewards are not locked for genesis pools so you can immediately start using your GAME.\" : \"Withdrawing or depositing any amount also claims your rewards. The amount of rewards created and locked decreases every week. You can find your locked LTHEORY rewards using the My Wallet button. View the docs for more info.\"}\r\n      </Alert>\r\n      <Box>\r\n        <Grid container justifyContent=\"center\" rowSpacing={13} columnSpacing={3} style={{ marginBottom: '50px' }}>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center', boxShadow: 'none !important' }}>\r\n                <Typography>Total APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>{bank.earnTokenName} APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : (Number(statsOnPool?.yearlyAPR)*(100.0-Number(statsOnPool?.locked))/100.0).toFixed(2)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>L{bank.earnTokenName} APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : (Number(statsOnPool?.yearlyAPR)*Number(statsOnPool?.locked)/100.0).toFixed(2)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>Total DPR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>{bank.earnTokenName} DPR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : (Number(statsOnPool?.dailyAPR)*(100.0-Number(statsOnPool?.locked))/100.0).toFixed(2)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>L{bank.earnTokenName} DPR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : (Number(statsOnPool?.dailyAPR)*Number(statsOnPool?.locked)/100.0).toFixed(2)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>TVL</Typography>\r\n                <Typography>${statsOnPool?.TVL}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>{bank.earnTokenName == \"GAME\" ? \"Deposit\" : \"Your Current Withdraw\"} Fee</Typography>\r\n                <Typography>{statsOnPool?.fee}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{textAlign: 'center'}}>\r\n                <Typography>L{bank.earnTokenName} Percentage</Typography>\r\n                <Typography>{statsOnPool?.locked}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box mt={15}>\r\n        <StyledBank>\r\n          <StyledCardsWrapper>\r\n            <StyledCardWrapper>\r\n              <Harvest bank={bank} rewardsLocked={Number(statsOnPool?.locked)} />\r\n            </StyledCardWrapper>\r\n            <Spacer />\r\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\r\n          </StyledCardsWrapper>\r\n          <Spacer size=\"lg\" />\r\n           {bank.depositTokenName.endsWith('LP') && <LPTokenHelpText bank={bank} />}\r\n          <Spacer size=\"lg\" />\r\n          <div>\r\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\r\n              Claim & Withdraw\r\n            </Button>\r\n          </div>\r\n          <Spacer size=\"lg\" />\r\n        </StyledBank>\r\n      </Box>\r\n    </>\r\n  ) : !bank ? (\r\n    <BankNotFound />\r\n  ) : (\r\n    <UnlockWallet />\r\n  );\r\n};\r\n\r\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\r\n  const tombFinance = useTombFinance();\r\n  const tombAddr = tombFinance.TOMB.address;\r\n  const tshareAddr = tombFinance.TSHARE.address;\r\n\r\n  let pairName: string;\r\n  let uniswapUrl: string;\r\n  if (bank.depositTokenName.includes('GAME')) {\r\n    pairName = 'GAME-DAI pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/' + tombAddr + \"/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E\";\r\n  } else {\r\n    pairName = 'THEORY-DAI pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/' + tshareAddr + \"/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E\";\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledLink href={uniswapUrl} target=\"_blank\">\r\n          {`Provide liquidity for ${pairName} now on SpookySwap!`}\r\n        </StyledLink>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst BankNotFound = () => {\r\n  return (\r\n    <Center>\r\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"Please return to the homepage and try again later.\" />\r\n    </Center>\r\n  );\r\n};\r\n\r\nconst StyledBank = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  font-weight: 700;\r\n  text-decoration: none;\r\n  color: ${(props) => props.theme.color.primary.main};\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst Center = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Bank;\r\n"],"sourceRoot":""}