{"version":3,"sources":["components/ModalActions/ModalActions.tsx","components/TokenInput/TokenInput.tsx","components/CardIcon/CardIcon.tsx","hooks/useAllowance.ts","components/Input/Input.tsx","hooks/useTombStats.ts","hooks/usetShareStats.ts","hooks/useLpStats.ts","hooks/useZap.ts","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","hooks/useTotalTreasuryBalance.js","hooks/useBondStats.ts","assets/img/home.png","hooks/useTotalValueLocked.ts","hooks/useFantomPrice.ts","views/Home/Home.js"],"names":["StyledModalActions","styled","div","props","theme","color","grey","spacing","StyledModalAction","StyledSpacer","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","TokenInput","max","symbol","onChange","onSelectMax","value","toLocaleString","Input","endAdornment","Button","size","variant","onClick","placeholder","StyledCardIcon","CardIcon","useAllowance","token","spender","pendingApproval","useState","allowance","setAllowance","account","useWallet","fastRefresh","useRefresh","fetchAllowance","useCallback","a","useEffect","catch","err","console","error","stack","StyledInputWrapper","borderRadius","StyledInput","input","startAdornment","useTombStats","stat","setStat","tombFinance","useTombFinance","getTombStat","fetchTombPrice","useShareStats","slowRefresh","getShareStat","fetchSharePrice","useLpStats","lpTicker","getLPStat","fetchLpPrice","useZap","bank","handleTransactionReceipt","useHandleTransactionReceipt","onZap","zappingToken","tokenName","amount","zapIn","depositTokenName","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveZapper","DAI_TICKER","FTM","TOMB_TICKER","TOMB","TSHARE_TICKER","TSHARE","useHasPendingApproval","address","ZAPPER_ROUTER_ADDR","currentAllowance","approvalState","useMemo","lt","PENDING","NOT_APPROVED","APPROVED","UNKNOWN","addTransaction","useTransactionAdder","approve","response","summary","approval","tokenAddress","StyledActionSpacer","StyledDescriptionText","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","decimals","balance","useTokenBalance","ftmBalance","getDisplayBalance","tombBalance","tshareBalance","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","toString","handleSelectMax","Modal","ModalTitle","text","InputLabel","style","id","Select","event","target","labelId","Label","Number","Alert","severity","web3","Web3","ERC20ABI","treasuryAddress","useTotalTreasuryBalance","Theory","eth","Contract","DAI","setBalance","balance_2shares_dai","setBalance_2shares_dai","balance_game_dai","setBalance_game_dai","balancetheory_dai","setBalancetheory_dai","balance_game","setBalance_game","balancetheory","setBalancetheory","balance_2shares","setBalance_2shares","getBalance","interval","setInterval","clearInterval","axios","data","utils","methods","balanceOf","call","theoryBalance","fromWei","valueTheory","data2sharesAndGame","log","usd_value","getLPPrice","LP_2shares_dai","LP_game_dai","LPtheory_dai","getGameBalance","getTheoryBalance","get2sharesBalance","tokenGame","price","usdValue","tokenTheory","token2shares","LPAddress","LPtoken","daiValue","getTokenPrice","tokenValue","totalSupply","OneTokenValue","total","useBondStats","getBondStat","fetchBondPrice","useTotalValueLocked","totalValueLocked","setTotalValueLocked","getTotalValueLocked","fetchTVL","useFantomPrice","setPrice","marketCap","setMarketCap","priceChange","setPriceChange","getPrice","current_price","market_cap","price_change_percentage_24h","BackgroundImage","createGlobalStyle","useStyles","makeStyles","button","breakpoints","down","marginTop","Home","tomb","tShare","classes","TVL","tombStats","tShareStats","usetShareStats","tBondStats","ftmPrice","ftmMarketCap","ftmPriceChange","totalTVL","tombProd","tShareProd","tombPriceInDollars","priceInDollars","toFixed","tombPriceInFTM","tokenInFtm","tombCirculatingSupply","circulatingSupply","tombTotalSupply","tSharePriceInDollars","tSharePriceInFTM","tShareCirculatingSupply","tShareTotalSupply","tBondPriceInDollars","tBondPriceInFTM","tBondCirculatingSupply","tBondTotalSupply","tombLpZap","tshareLpZap","StyledLink","useModal","onDissmissTombZap","onDissmissTshareZap","Page","Grid","container","item","xs","sm","justifyContent","display","alignItems","height","margin","src","CashImage","width","Paper","boxShadow","border","Box","p","href","mt","Card","CardContent","align","fontSize","end","separator","prefix","flexDirection","marginRight","className","position","TokenSymbol","alignContent","tokenAmount","priceOfOne","totalLiquidity"],"mappings":"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","file":"static/js/14.9b78729b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: none;\r\n  font-size: 36px;\r\n  height: 95px;\r\n  width: 95px;\r\n  border-radius: 40px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: none !important;\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport useRefresh from \"./useRefresh\";\r\n\r\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\r\n  const [allowance, setAllowance] = useState<BigNumber>(null);\r\n  const { account } = useWallet();\r\n  const { fastRefresh } = useRefresh();\r\n\r\n  const fetchAllowance = useCallback(async () => {\r\n    const allowance = await token.allowance(account, spender);\r\n    setAllowance(allowance);\r\n  }, [account, spender, token]);\r\n\r\n  useEffect(() => {\r\n    if (account && spender && token) {\r\n      fetchAllowance().catch((err) => console.error(`Failed to fetch allowance: ${err.stack}`));\r\n    }\r\n  }, [account, spender, token, pendingApproval, fetchAllowance, fastRefresh]);\r\n\r\n  return allowance;\r\n};\r\n\r\nexport default useAllowance;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  startAdornment?: React.ReactNode;\r\n  value: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  );\r\n};\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: white;\r\n  border-radius: ${(props) => props.theme.borderRadius}px;\r\n  display: flex;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.color.grey[600]};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchSharePrice() {\r\n      try {\r\n        setStat(await tombFinance.getShareStat());\r\n      } catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchSharePrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { LPStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useLpStats = (lpTicker: string) => {\r\n  const [stat, setStat] = useState<LPStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchLpPrice() {\r\n      try{\r\n        setStat(await tombFinance.getLPStat(lpTicker));\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchLpPrice();\r\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useLpStats;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useZap = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleZap = useCallback(\r\n    (zappingToken: string, tokenName: string, amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.zapIn(zappingToken, tokenName, amount),\r\n        `Zap ${amount} in ${bank.depositTokenName}.`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onZap: handleZap };\r\n};\r\n\r\nexport default useZap;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport { DAI_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from \"./useRefresh\";\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  let token: ERC20;\r\n  if (zappingToken === DAI_TICKER) token = tombFinance.FTM;\r\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\r\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\r\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\r\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval, token, tombFinance, slowRefresh]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: ZAPPER_ROUTER_ADDR,\r\n      },\r\n    });\r\n  }, [approvalState, token, addTransaction, slowRefresh]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApproveZapper;\r\n","import React, { useState, useMemo } from 'react';\r\n\r\nimport { Button, Select, MenuItem, InputLabel, Typography } from '@mui/material';\r\nimport { withStyles } from '@mui/styles'\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\nimport styled from 'styled-components';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport Label from '../../../components/Label';\r\nimport useLpStats from '../../../hooks/useLpStats';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport { useWallet } from 'use-wallet';\r\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\r\nimport { TOMB_TICKER, TSHARE_TICKER, DAI_TICKER } from '../../../utils/constants';\r\nimport { Alert } from '@mui/lab';\r\nimport useRefresh from \"../../../hooks/useRefresh\";\r\n\r\ninterface ZapProps extends ModalProps {\r\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\r\n  const tombFinance = useTombFinance();\r\n  const balance = useTokenBalance(tombFinance.FTM);\r\n  const ftmBalance = getDisplayBalance(balance);\r\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\r\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const [val, setVal] = useState('');\r\n  const [zappingToken, setZappingToken] = useState(DAI_TICKER);\r\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\r\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\r\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\r\n  const tombFtmLpStats = useLpStats('GAME-DAI-LP');\r\n  const tShareFtmLpStats = useLpStats('THEORY-DAI-LP');\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\r\n  if(zappingToken === DAI_TICKER && zappingTokenBalance !== ftmBalance) setZappingTokenBalance(ftmBalance);\r\n  /**\r\n   * Checks if a value is a valid number or not\r\n   * @param n is the value to be evaluated for a number\r\n   * @returns\r\n   */\r\n  function isNumeric(n: any) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n  const handleChangeAsset = (event: any) => {\r\n    const value = event.target.value;\r\n    setZappingToken(value);\r\n    setZappingTokenBalance(ftmBalance);\r\n    if (event.target.value === TSHARE_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\r\n    }\r\n    if (event.target.value === TOMB_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\r\n    }\r\n  };\r\n\r\n  const handleChange = async (e: any) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setVal(e.currentTarget.value);\r\n      setEstimate({ token0: '0', token1: '0' });\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setVal(e.currentTarget.value);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  const handleSelectMax = async () => {\r\n    setVal(zappingTokenBalance);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Zap in ${tokenName}`} />\r\n      {/*<Typography variant=\"h6\" align=\"center\">*/}\r\n      {/*  Powered by{' '}*/}\r\n      {/*  <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">*/}\r\n      {/*    mlnl.finance*/}\r\n      {/*  </a>*/}\r\n      {/*</Typography>*/}\r\n\r\n      <StyledActionSpacer />\r\n      <InputLabel style={{ color: '#dd3322' }} id=\"label\">\r\n        Select asset to zap with\r\n      </InputLabel>\r\n      <Select\r\n        onChange={handleChangeAsset}\r\n        style={{ color: '#dd3322' }}\r\n        labelId=\"label\"\r\n        id=\"select\"\r\n        value={zappingToken}\r\n      >\r\n        <StyledMenuItem value={DAI_TICKER}>DAI</StyledMenuItem>\r\n          <StyledMenuItem value={TOMB_TICKER}>GAME</StyledMenuItem>\r\n          <StyledMenuItem value={TSHARE_TICKER}>THEORY</StyledMenuItem>\r\n      </Select>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={zappingTokenBalance}\r\n        symbol={zappingToken}\r\n      />\r\n      <Label text=\"Zap Estimations\" />\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\r\n      </StyledDescriptionText>\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        ({Number(estimate.token0)} {DAI_TICKER} / {Number(estimate.token1)}{' '}\r\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\r\n      </StyledDescriptionText>\r\n      <ModalActions>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() =>\r\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\r\n          }\r\n        >\r\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\r\n        </Button>\r\n      </ModalActions>\r\n\r\n      <StyledActionSpacer />\r\n        <Alert variant=\"filled\" severity=\"warning\">\r\n            After zapping, make sure to add your LP using the + button!\r\n        </Alert>\r\n      <Alert variant=\"filled\" severity=\"warning\">\r\n        Zapping incurs a 0.5% convenience fee and 0.5% slippage. Beta feature. Use at your own risk!\r\n      </Alert>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledDescriptionText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 22px;\r\n  justify-content: flex-start;\r\n`;\r\nconst StyledMenuItem = withStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    color: '#dd3322',\r\n    '&:hover': {\r\n      backgroundColor: 'grey',\r\n      color: '#dd3322',\r\n    },\r\n    selected: {\r\n      backgroundColor: 'black',\r\n    },\r\n  },\r\n})(MenuItem);\r\n\r\nexport default ZapModal;\r\n","import { useEffect, useState } from \"react\"\r\nimport Web3 from \"web3\"\r\nimport { web3ProviderFrom } from \"../tomb-finance/ether-utils\"\r\nimport { getBalance } from \"../utils/formatBalance\"\r\nimport axios from 'axios'\r\n\r\nconst web3 = new Web3(\"https://rpcapi.fantom.network/\")\r\n\r\nconst ERC20ABI = [{ \"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_spender\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_from\", \"type\": \"address\" }, { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint8\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" }, { \"name\": \"_spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"fallback\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" } ]\r\nconst treasuryAddress = \"0x8f555E00ea0FAc871b3Aa70C015915dB094E7f88\"\r\n\r\n// const assetList = [\r\n//     \"0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca\", // 2shares\r\n//     \"0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52\", // 2shares/FTM LP\r\n//     \"0x83A52eff2E9D112E9B022399A9fD22a9DB7d33Ae\", // Game/dai\r\n//     \"0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7\", // Theory\r\n//     \"0xd352daC95a91AfeFb112DBBB3463ccfA5EC15b65\", // Theory/dai\r\n// ]\r\n\r\n// const contracts = assetList.map(asset => new web3.eth.Contract(ERC20ABI, asset))\r\n\r\n// function useTotalTreasuryBalance() {\r\n//     const [ prices, setPrices ] = useState(assetList.map(asset => {\r\n//         return { token: asset, value: 0 }\r\n//     }))\r\n//     useEffect(() => {\r\n//         getPrices()\r\n//     }, [])\r\n\r\n//     async function getPrices() {\r\n//         for (const token of contracts) {\r\n//             console.log(token)\r\n//         }\r\n//     }\r\n\r\n//     return prices\r\n// }\r\n\r\nfunction useTotalTreasuryBalance() {\r\n    const Theory = new web3.eth.Contract(ERC20ABI, '0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7')\r\n    const DAI = new web3.eth.Contract(ERC20ABI, '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83')\r\n    const [balance, setBalance] = useState(0)\r\n    const [balance_2shares_dai, setBalance_2shares_dai] = useState(0)\r\n    const [balance_game_dai, setBalance_game_dai] = useState(0)\r\n    const [balancetheory_dai, setBalancetheory_dai] = useState(0)\r\n    const [balance_game, setBalance_game] = useState(0)\r\n    const [balancetheory, setBalancetheory] = useState(0)\r\n    const [balance_2shares, setBalance_2shares] = useState(0)\r\n\r\n    useEffect(() => {\r\n        getBalance()\r\n        const interval = setInterval(() => {\r\n            getBalance()\r\n        }, 30000)\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [])\r\n\r\n    return { balance, balance_2shares_dai, balance_game_dai, balancetheory_dai, balance_game, balancetheory, balance_2shares }\r\n\r\n    async function getBalance() {\r\n        // const { data2omb } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=2omb-fi')\r\n        // const { data2shares } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=2share')\r\n        // const { dataGame } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=30mb-token')\r\n        \r\n        const { data } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=Theory')\r\n        const theoryBalance = web3.utils.fromWei(await Theory.methods.balanceOf(treasuryAddress).call())\r\n        const valueTheory = theoryBalance * 0//data[0].current_price\r\n\r\n        const data2sharesAndGame = await axios('https://openapi.debank.com/v1/user/chain_balance?id=0x8f555E00ea0FAc871b3Aa70C015915dB094E7f88&chain_id=ftm')\r\n\r\n        console.log(`3Shares USD: $${valueTheory}`)\r\n        console.log(`2Shares + Game: $${data2sharesAndGame.data.usd_value}`)\r\n        const LP_2shares_dai = await getLPPrice('0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52', '0xc54a1684fd1bef1f077a336e6be4bd9a3096a6ca')\r\n        const LP_game_dai = await getLPPrice('0x83A52eff2E9D112E9B022399A9fD22a9DB7d33Ae', '0x14def7584a6c52f470ca4f4b9671056b22f4ffde')\r\n        const LPtheory_dai = await getLPPrice('0xd352daC95a91AfeFb112DBBB3463ccfA5EC15b65', '0x6437adac543583c4b31bf0323a0870430f5cc2e7')\r\n        setBalance(data2sharesAndGame.data.usd_value + valueTheory + LP_2shares_dai + LP_game_dai + LPtheory_dai)\r\n        setBalance_2shares_dai(LP_2shares_dai)\r\n        setBalance_game_dai(LP_game_dai)\r\n        setBalancetheory_dai(LPtheory_dai)\r\n        setBalance_game(await getGameBalance())\r\n        setBalancetheory(await getTheoryBalance())\r\n        setBalance_2shares(await get2sharesBalance())\r\n    }\r\n\r\n    async function getGameBalance() {\r\n        const tokenGame = new web3.eth.Contract(ERC20ABI, '0x14DEf7584A6c52f470Ca4F4b9671056b22f4FfDE')\r\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0x14DEf7584A6c52f470Ca4F4b9671056b22f4FfDE&sellAmount=100000000000000000`)\r\n        const usdValue = Number(web3.utils.fromWei(await tokenGame.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\r\n\r\n        return usdValue\r\n    }\r\n\r\n    async function getTheoryBalance() {\r\n        const tokenTheory = new web3.eth.Contract(ERC20ABI, '0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7')\r\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7&sellAmount=100000000000000000`)\r\n        const usdValue = Number(web3.utils.fromWei(await tokenTheory.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\r\n\r\n        return usdValue\r\n    }\r\n\r\n    async function get2sharesBalance() {\r\n        const token2shares = new web3.eth.Contract(ERC20ABI, '0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca')\r\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca&sellAmount=100000000000000000`)\r\n        const usdValue = Number(web3.utils.fromWei(await token2shares.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\r\n\r\n        return usdValue\r\n    }\r\n\r\n    async function getLPPrice(LPAddress, tokenAddress) {\r\n        const token = new web3.eth.Contract(ERC20ABI, tokenAddress)\r\n        const LPtoken = new web3.eth.Contract(ERC20ABI, LPAddress)\r\n        const { data } = await axios('https://api.binance.com/api/v1/ticker/price?symbol=FTMUSDT')\r\n        const daiValue = Number(web3.utils.fromWei(await DAI.methods.balanceOf(LPAddress).call())) * Number(data.price)\r\n\r\n        const tokenValue = Number(await getTokenPrice(tokenAddress)) * Number(web3.utils.fromWei(await token.methods.balanceOf(LPAddress).call()))\r\n\r\n        const OneTokenValue = (daiValue + tokenValue) / Number(web3.utils.fromWei(await LPtoken.methods.totalSupply().call()))\r\n\r\n        const total = OneTokenValue * Number(web3.utils.fromWei(await LPtoken.methods.balanceOf(treasuryAddress).call()))\r\n\r\n        console.log(daiValue)\r\n        console.log(tokenValue)\r\n        console.log(OneTokenValue)\r\n        console.log(total)\r\n\r\n        return total\r\n    }\r\n\r\n    async function getTokenPrice(tokenAddress) {\r\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=${tokenAddress}&sellAmount=100000000000000000`)\r\n        return data.price\r\n    }\r\n}\r\n\r\nexport default useTotalTreasuryBalance","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useBondStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchBondPrice() {\r\n      try {\r\n        setStat(await tombFinance.getBondStat());\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchBondPrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useBondStats;\r\n","export default __webpack_public_path__ + \"static/media/home.728e80e4.png\";","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalValueLocked = () => {\r\n  const [totalValueLocked, setTotalValueLocked] = useState<Number>(0);\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTVL() {\r\n      try {\r\n        setTotalValueLocked(await tombFinance.getTotalValueLocked());\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchTVL();\r\n  }, [setTotalValueLocked, tombFinance, slowRefresh]);\r\n\r\n  return totalValueLocked;\r\n};\r\n\r\nexport default useTotalValueLocked;\r\n","import axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useFantomPrice = () => {\r\n    const [price, setPrice] = useState(0);\r\n    const [marketCap, setMarketCap] = useState(0);\r\n    const [priceChange, setPriceChange] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getPrice()\r\n        const interval = setInterval(() => {\r\n            getPrice()\r\n        }, 10000)\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [])\r\n    return { price, marketCap, priceChange };\r\n    \r\n    async function getPrice() {\r\n        const { data } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=dai');\r\n        setPrice(data[0].current_price);\r\n        setMarketCap(data[0].market_cap);\r\n        setPriceChange(data[0].price_change_percentage_24h);\r\n    }\r\n}\r\nexport default useFantomPrice;","import React, { useMemo } from 'react';\r\nimport Page from '../../components/Page';\r\nimport HomeImage from '../../assets/img/home.png';\r\nimport CashImage from '../../assets/img/GAME.svg';\r\nimport Image from 'mui-image';\r\nimport styled from 'styled-components';\r\nimport { Alert } from '@mui/material';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport CountUp from 'react-countup';\r\nimport CardIcon from '../../components/CardIcon';\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\nimport useTombStats from '../../hooks/useTombStats';\r\nimport useLpStats from '../../hooks/useLpStats';\r\nimport useModal from '../../hooks/useModal';\r\nimport useZap from '../../hooks/useZap';\r\nimport useBondStats from '../../hooks/useBondStats';\r\nimport usetShareStats from '../../hooks/usetShareStats';\r\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\r\nimport useFantomPrice from '../../hooks/useFantomPrice';\r\nimport { game as tombTesting, theory as tShareTesting } from '../../tomb-finance/deployments/deployments.testing.json';\r\nimport { game as tombProd, theory as tShareProd } from '../../tomb-finance/deployments/deployments.mainnet.json';\r\n\r\nimport useTotalTreasuryBalance from '../../hooks/useTotalTreasuryBalance.js';\r\n\r\nimport { Box, Button, Card, CardContent, Grid, Paper } from '@mui/material';\r\nimport ZapModal from '../Bank/components/ZapModal';\r\n\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background-color: var(--black);\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='32' viewBox='0 0 16 32'%3E%3Cg fill='%231D1E1F' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M0 24h4v2H0v-2zm0 4h6v2H0v-2zm0-8h2v2H0v-2zM0 0h4v2H0V0zm0 4h2v2H0V4zm16 20h-6v2h6v-2zm0 4H8v2h8v-2zm0-8h-4v2h4v-2zm0-20h-6v2h6V0zm0 4h-4v2h4V4zm-2 12h2v2h-2v-2zm0-8h2v2h-2V8zM2 8h10v2H2V8zm0 8h10v2H2v-2zm-2-4h14v2H0v-2zm4-8h6v2H4V4zm0 16h6v2H4v-2zM6 0h2v2H6V0zm0 24h2v2H6v-2z'/%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n\r\n* {\r\n    border-radius: 0 !important;\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    [theme.breakpoints.down('415')]: {\r\n      marginTop: '10px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const TVL = useTotalValueLocked();\r\n  const tombFtmLpStats = useLpStats('GAME-DAI-LP');\r\n  const tShareFtmLpStats = useLpStats('THEORY-DAI-LP');\r\n  const tombStats = useTombStats();\r\n  const tShareStats = usetShareStats();\r\n  const tBondStats = useBondStats();\r\n  const tombFinance = useTombFinance();\r\n  const { price: ftmPrice, marketCap: ftmMarketCap, priceChange: ftmPriceChange } = useFantomPrice();\r\n  //const { balance: rebatesTVL } = useTotalTreasuryBalance();\r\n  const totalTVL = TVL;\r\n\r\n  let tomb;\r\n  let tShare;\r\n  // if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n  //   tomb = tombTesting;\r\n  //   tShare = tShareTesting;\r\n  // } else\r\n  {\r\n    tomb = tombProd;\r\n    tShare = tShareProd;\r\n  }\r\n\r\n  const buyTombAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tomb.address;\r\n  const buyTShareAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tShare.address;\r\n\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const tombPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\r\n  const tombCirculatingSupply = useMemo(() => (tombStats ? String(tombStats.circulatingSupply) : null), [tombStats]);\r\n  const tombTotalSupply = useMemo(() => (tombStats ? String(tombStats.totalSupply) : null), [tombStats]);\r\n\r\n  const tSharePriceInDollars = useMemo(\r\n    () => (tShareStats ? Number(tShareStats.priceInDollars).toFixed(2) : null),\r\n    [tShareStats],\r\n  );\r\n  const tSharePriceInFTM = useMemo(\r\n    () => (tShareStats ? Number(tShareStats.tokenInFtm).toFixed(4) : null),\r\n    [tShareStats],\r\n  );\r\n  const tShareCirculatingSupply = useMemo(\r\n    () => (tShareStats ? String(tShareStats.circulatingSupply) : null),\r\n    [tShareStats],\r\n  );\r\n  const tShareTotalSupply = useMemo(() => (tShareStats ? String(tShareStats.totalSupply) : null), [tShareStats]);\r\n\r\n  const tBondPriceInDollars = useMemo(\r\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\r\n    [tBondStats],\r\n  );\r\n  const tBondPriceInFTM = useMemo(() => (tBondStats ? Number(tBondStats.tokenInFtm).toFixed(4) : null), [tBondStats]);\r\n  const tBondCirculatingSupply = useMemo(\r\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\r\n    [tBondStats],\r\n  );\r\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\r\n\r\n  const tombLpZap = useZap({ depositTokenName: 'GAME-DAI-LP' });\r\n  const tshareLpZap = useZap({ depositTokenName: 'THEORY-DAI-LP' });\r\n\r\n  const StyledLink = styled.a`\r\n    font-weight: 700;\r\n    text-decoration: none;\r\n    color: var(--accent-light);\r\n  `;\r\n\r\n  const [onPresentTombZap, onDissmissTombZap] = useModal(\r\n    <ZapModal\r\n      decimals={18}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        tombLpZap.onZap(zappingToken, tokenName, amount);\r\n        onDissmissTombZap();\r\n      }}\r\n      tokenName={'GAME-DAI-LP'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentTshareZap, onDissmissTshareZap] = useModal(\r\n    <ZapModal\r\n      decimals={18}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        tshareLpZap.onZap(zappingToken, tokenName, amount);\r\n        onDissmissTshareZap();\r\n      }}\r\n      tokenName={'THEORY-DAI-LP'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      <Grid container spacing={3}>\r\n        {/* Logo */}\r\n        <Grid container item xs={12} sm={4} justifyContent=\"center\">\r\n          {/* <Paper>xs=6 sm=3</Paper> */}\r\n          <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: '100%',\r\n                margin: '0'\r\n              }}\r\n          >\r\n            <img src={CashImage} width=\"75%\" height=\"75%\"/>\r\n          </div>\r\n        </Grid>\r\n        {/* Explanation text */}\r\n        <Grid item xs={12} sm={8}>\r\n          <Paper style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <Box p={4}>\r\n              <h2>Welcome to Game Theory!</h2>\r\n              <p>Game Theory is building a 2D RPG that is currently in development on the Fantom Opera blockchain. It is combining the best attributes of Tomb Finance and Defi Kingdoms to bootstrap liquidity for the launch of the game. $THEORY holders will be able to vote on aspects of the game and be share-holders in its revenue. $GAME will be in the in-game currency and LP providers will earn fees from the game and other promotions. </p>\r\n              <p>For more information, check out the <StyledLink href=\"https://docs.gametheory.tech/\">Docs</StyledLink> and <StyledLink href=\"/#/faq\">FAQ</StyledLink>. The treasury wallet is used for marketing, community actions, allocating seigniorage, and funding development of the game. The developer wallet is used for paying the developer and the team.</p>\r\n              <p>During the genesis phase, stake your tokens to earn $GAME. There is a small 1% deposit fee on each pool to fund the protocol and to be distributed as rewards to the community.</p>\r\n              <p>\r\n                After the genesis pools are over, use your acquired $GAME to create and stake $GAME-$DAI LP in the <StyledLink href=\"/#/farms\">Farms</StyledLink> to earn $THEORY rewards.\r\n                Then you can either stake your earned $THEORY in the <StyledLink href=\"/#/theoretics\">Theoretics</StyledLink>, create $THEORY-$DAI LP and farm more $THEORY, or hold your rewards to avoid lockup. The choice is yours.\r\n              </p>\r\n            </Box>\r\n          </Paper>\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justifyContent=\"center\">\r\n            <Box mt={3} style={{ width: '1000px' }}>\r\n            <Alert variant=\"filled\" severity=\"warning\">\r\n              DO NOT INVEST MORE THAN YOU ARE WILLING TO LOSE. Do your own research before investing. Investing is risky and may result in monetary loss. By using Game Theory or any of its products, you agree that the Game Theory team is not responsible for any financial losses.\r\n            </Alert>\r\n            </Box>\r\n        </Grid>\r\n\r\n        {/* <Grid container spacing={3}>\r\n    <Grid item  xs={12} sm={12} justifyContent=\"center\"  style={{ margin: '12px', display: 'flex' }}>\r\n            <Alert severity=\"warning\" style={{ backgroundColor: \"transparent\", border: \"1px solid var(--white)\" }}>\r\n              <b>\r\n      Please visit our <StyledLink target=\"_blank\" href=\"https://docs.tomb.finance\">documentation</StyledLink> before purchasing TOMB or TSHARE!</b>\r\n            </Alert>\r\n        </Grid>\r\n        </Grid> */}\r\n\r\n        {/* TVL */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\">\r\n              <h2>Total Value Locked</h2>\r\n              <CountUp style={{ fontSize: '25px' }} end={totalTVL} separator=\",\" prefix=\"$\" />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Wallet */}\r\n        <Grid item xs={12} sm={8}>\r\n          <Card style={{ height: '100%', backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <CardContent align=\"center\">\r\n              {/* <h2 style={{ marginBottom: '20px' }}>Wallet Balance</h2> */}\r\n              <Button color=\"primary\" href=\"/#/farms\" variant=\"contained\" style={{ marginRight: '10px' }}>\r\n                Farms\r\n              </Button>\r\n              <Button color=\"primary\" href=\"/#/theoretics\" variant=\"contained\" style={{ marginRight: '25px' }}>\r\n                Stake\r\n              </Button>\r\n              {/* <Button color=\"primary\" href=\"/masonry\" variant=\"contained\" style={{ marginRight: '10px' }}>\r\n                Stake Now\r\n              </Button> */}\r\n              {/* <Button href=\"/cemetery\" variant=\"contained\" style={{ marginRight: '10px' }}>\r\n                Farm Now\r\n              </Button> */}\r\n              <Button\r\n                target=\"_blank\"\r\n                href=\"https://spookyswap.finance/swap?outputCurrency=0x56EbFC2F3873853d799C155AF9bE9Cb8506b7817\"\r\n                variant=\"contained\"\r\n                style={{ marginRight: '10px' }}\r\n                className={classes.button}\r\n              >\r\n                Buy GAME\r\n              </Button>\r\n              <Button variant=\"contained\" target=\"_blank\" href=\"https://spookyswap.finance/swap?outputCurrency=0x60787C689ddc6edfc84FCC9E7d6BD21990793f06\" style={{ marginRight: '10px' }} className={classes.button}>\r\n                Buy THEORY\r\n              </Button>\r\n              <Button variant=\"contained\" target=\"_blank\" href=\"https://dexscreener.com/fantom/0x168e509FE5aae456cDcAC39bEb6Fd56B6cb8912e\" style={{ marginRight: '10px' }} className={classes.button}>\r\n                GAME Chart\r\n              </Button>\r\n              <Button variant=\"contained\" target=\"_blank\" href=\"https://dexscreener.com/fantom/0xF69FCB51A13D4Ca8A58d5a8D964e7ae5d9Ca8594\" className={classes.button}>\r\n                THEORY Chart\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TOMB */}\r\n        <Grid item xs={12} sm={3}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h2>DAI</h2>\r\n              <Box mt={2} style={{ backgroundColor: \"transparent !important\" }}>\r\n                <CardIcon style={{ backgroundColor: \"transparent !important\" }}>\r\n                  <TokenSymbol symbol=\"dAI\" style={{ backgroundColor: \"transparent !important\" }} />\r\n                </CardIcon>\r\n              </Box>\r\n              Current Price\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>${ftmPrice ? ftmPrice : '-.----'} USD</span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap: ${ftmMarketCap} <br />\r\n                Price Change 24h: {ftmPriceChange.toFixed(2)}% <br />\r\n                <br />\r\n                <br />\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TOMB */}\r\n        <Grid item xs={12} sm={3}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h2>GAME</h2>\r\n              {/* <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('TOMB');\r\n                }}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px', borderColor: \"var(--accent-light)\" }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button> */}\r\n              <Box mt={2} style={{ backgroundColor: \"transparent !important\" }}>\r\n                <CardIcon style={{ backgroundColor: \"transparent !important\" }}>\r\n                  <TokenSymbol symbol=\"TOMB\" style={{ backgroundColor: \"transparent !important\" }} />\r\n                </CardIcon>\r\n              </Box>\r\n              Current Price\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.----'} DAI</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\r\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\r\n                </span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap (Including Locked): ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply (Including Locked): {tombCirculatingSupply} <br />\r\n                Total Supply: {tombTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TSHARE */}\r\n        <Grid item xs={12} sm={3}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h2>THEORY</h2>\r\n              {/* <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('TSHARE');\r\n                }}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px', borderColor: \"var(--accent-light)\" }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button> */}\r\n              <Box mt={2}>\r\n                <CardIcon>\r\n                  <TokenSymbol symbol=\"TSHARE\" />\r\n                </CardIcon>\r\n              </Box>\r\n              Current Price\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>{tSharePriceInFTM ? tSharePriceInFTM : '-.----'} DAI</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>${tSharePriceInDollars ? tSharePriceInDollars : '-.--'}</span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap (Including Locked): ${(tShareCirculatingSupply * tSharePriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply (Including Locked): {tShareCirculatingSupply} <br />\r\n                Total Supply: {tShareTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* HODL */}\r\n        <Grid item xs={12} sm={3}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h2>HODL</h2>\r\n              {/* <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('HODL');\r\n                }}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px', borderColor: \"var(--accent-light)\" }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button> */}\r\n              <Box mt={2}>\r\n                <CardIcon>\r\n                  <TokenSymbol symbol=\"HODL\" />\r\n                </CardIcon>\r\n              </Box>\r\n              Current Price\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>{tBondPriceInFTM ? tBondPriceInFTM : '-.----'} DAI</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>${tBondPriceInDollars ? tBondPriceInDollars : '-.--'}</span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap: ${(tBondCirculatingSupply * tBondPriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply: {tBondCirculatingSupply} <br />\r\n                Total Supply: {tBondTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\">\r\n              <h2>GAME-DAI LP</h2>\r\n              <Box mt={2}>\r\n                <CardIcon>\r\n                  <TokenSymbol symbol=\"GAME-DAI-LP\" />\r\n                </CardIcon>\r\n              </Box>\r\n              {/*\r\n              <Box mt={2}>\r\n                <Button color=\"primary\" disabled={true} onClick={onPresentTombZap} variant=\"contained\">\r\n                  Zap In\r\n                </Button>\r\n              </Box>*/}\r\n              <Box mt={2}>\r\n                <span style={{ fontSize: '26px' }}>\r\n                  {tombLPStats?.tokenAmount ? tombLPStats?.tokenAmount : '-.--'} GAME /{' '}\r\n                  {tombLPStats?.ftmAmount ? tombLPStats?.ftmAmount : '-.--'} DAI\r\n                </span>\r\n              </Box>\r\n              <Box>${tombLPStats?.priceOfOne ? tombLPStats.priceOfOne : '-.--'}</Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Liquidity: ${tombLPStats?.totalLiquidity ? tombLPStats.totalLiquidity : '-.--'} <br />\r\n                Total supply: {tombLPStats?.totalSupply ? tombLPStats.totalSupply : '-.--'}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\r\n            <CardContent align=\"center\">\r\n              <h2>THEORY-DAI LP</h2>\r\n              <Box mt={2}>\r\n                <CardIcon>\r\n                  <TokenSymbol symbol=\"THEORY-DAI-LP\" />\r\n                </CardIcon>\r\n              </Box>\r\n              {/*<Box mt={2}>\r\n                <Button color=\"primary\" onClick={onPresentTshareZap} variant=\"contained\">\r\n                  Zap In\r\n                </Button>\r\n            </Box>*/}\r\n              <Box mt={2}>\r\n                <span style={{ fontSize: '26px' }}>\r\n                  {tshareLPStats?.tokenAmount ? tshareLPStats?.tokenAmount : '-.--'} THEORY /{' '}\r\n                  {tshareLPStats?.ftmAmount ? tshareLPStats?.ftmAmount : '-.--'} DAI\r\n                </span>\r\n              </Box>\r\n              <Box>${tshareLPStats?.priceOfOne ? tshareLPStats.priceOfOne : '-.--'}</Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Liquidity: ${tshareLPStats?.totalLiquidity ? tshareLPStats.totalLiquidity : '-.--'}\r\n                <br />\r\n                Total supply: {tshareLPStats?.totalSupply ? tshareLPStats.totalSupply : '-.--'}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}