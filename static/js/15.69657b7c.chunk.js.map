{"version":3,"sources":["hooks/useHandleTransactionReceipt.ts","components/CardIcon/CardIcon.tsx","hooks/useTombStats.ts","components/Value/Value.tsx","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Masonry/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","hooks/useEarningsOnMasonry.ts","views/Masonry/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Masonry/components/DepositModal.tsx","views/Masonry/components/WithdrawModal.tsx","hooks/useStakedBalanceOnMasonry.ts","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Masonry/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useCurrentEpoch.ts","hooks/useFetchMasonryAPR.ts","hooks/useCashPriceInEstimatedTWAP.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useTotalStakedOnMasonry.ts","views/Masonry/Masonry.js"],"names":["useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","console","error","stack","StyledCardIcon","styled","div","props","theme","spacing","CardIcon","children","useTombStats","useState","stat","setStat","fastRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getTombStat","fetchTombPrice","StyledValue","Value","value","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","getDepositTokenPriceInDollars","balance","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledIcon","Icon","AddIcon","color","themeColor","useContext","ThemeContext","height","viewBox","width","d","fill","grey","RemoveIcon","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","onClick","to","useClaimRewardTimerMasonry","from","Date","time","setTime","getUserClaimRewardTime","useClaimRewardCheck","slowRefresh","canClaimReward","setCanClaimReward","canUserClaimRewardFromMasonry","canUserClaimReward","StyledCountdown","p","StyledProgressOuter","StyledProgress","progress","StyledCardContentInner","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromMasonry","handleTransactionReceipt","onReward","harvestCashFromMasonry","useEarningsOnMasonry","BigNumber","setBalance","getEarningsOnMasonry","StyledCardHeader","StyledCardActions","Harvest","tombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","TokenSymbol","symbol","Label","text","Button","variant","eq","mt","style","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromMasonry","canUserWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","useStakedBalanceOnMasonry","getStakedSharesOnMasonry","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","StyledActionSpacer","Stake","useApprove","TSHARE","contracts","Theoretics","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","toString","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","NOT_APPROVED","marginTop","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useCurrentEpoch","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useFetchMasonryAPR","apr","setApr","dpr","setDpr","getMasonryAPR","getMasonryDPR","fetchMasonryAPR","useCashPriceInEstimatedTWAP","getTombStatInEstimatedTWAP","fetchCashPrice","useTreasuryAllocationTimes","getTreasuryNextAllocationTime","useTotalStakedOnMasonry","totalStaked","setTotalStaked","getTotalStakedInMasonry","fetchTotalStaked","BackgroundImage","createGlobalStyle","useStyles","makeStyles","gridItem","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","Masonry","classes","account","useWallet","cashStat","rebateStats","useTreasury","Page","align","gutterBottom","Alert","severity","marginBottom","outOfBootstrap","bootstrapEpochsLeft","Grid","container","justifyContent","rowSpacing","columnSpacing","item","xs","md","lg","className","moment","toDate","tombPrice","currentWithdrawFeeOf","rewardsLocked","currentClaimEpochs","currentWithdrawEpochs","Spacer","UnlockWallet"],"mappings":"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","file":"static/js/15.69657b7c.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: none;\r\n  font-size: 36px;\r\n  height: 95px;\r\n  width: 95px;\r\n  border-radius: 40px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: none !important;\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#FF4949' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 10px !important;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #ff6464;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useClaimRewardTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useRefresh from '../useRefresh';\r\nimport useTombFinance from './../useTombFinance';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const  { slowRefresh } = useRefresh();\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserClaimReward() {\r\n      try {\r\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\r\n      } catch(err){\r\n        console.error(err);\r\n      };\r\n    }\r\n    if (isUnlocked) {\r\n      canUserClaimReward();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromMasonry(), 'Claim GAME from Theoretics ');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getEarningsOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\r\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\r\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nconst Harvest: React.FC = () => {\r\n  const tombStats = useTombStats();\r\n  const { onReward } = useHarvestFromMasonry();\r\n  const earnings = useEarningsOnMasonry();\r\n  const canClaimReward = useClaimRewardCheck();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const { from, to } = useClaimRewardTimerMasonry();\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TOMB\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(earnings)} />\r\n              <Label text={`≈ $${earnedInDollars}`} color=\"#5f51c2\" />\r\n              <Label text=\"GAME Earned\" color=\"#5f51c2\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={earnings.eq(0) || !canClaimReward}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useUnstakeTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} THEORY to the Room `);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.withdrawShareFromMasonry(amount),\r\n        `Withdraw ${amount} THEORY from Theoretics `,\r\n      );\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdrawFromMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\r\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\r\n\r\nconst Stake: React.FC = () => {\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance.TSHARE, tombFinance.contracts.Theoretics.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const { from, to } = useUnstakeTimerMasonry();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('TSHARE', tombFinance.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToMasonry();\r\n  const { onWithdraw } = useWithdrawFromMasonry();\r\n  const canWithdrawFromMasonry = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TSHARE\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n              <Label text={`≈ $${tokenPriceInDollars}`} color=\"#5f51c2\" />\r\n              <Label text={'THEORY Staked'} color=\"#5f51c2\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                >\r\n                  Approve THEORY\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <IconButton disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw}>\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canWithdrawFromMasonry ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnMasonry = (description?: string) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem THEORY from Theoretics ';\r\n    handleTransactionReceipt(tombFinance.exitFromMasonry(), alertDesc);\r\n  }, [tombFinance, description, handleTransactionReceipt]);\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeemOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchMasonryAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const [dpr, setDpr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance.getMasonryAPR());\r\n        setDpr(await tombFinance.getMasonryDPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, setDpr, tombFinance, slowRefresh]);\r\n\r\n  return {apr,dpr};\r\n};\r\n\r\nexport default useFetchMasonryAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCashPriceInEstimatedTWAP = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCashPrice() {\r\n      try {\r\n        setStat(await tombFinance.getTombStatInEstimatedTWAP());\r\n      }catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCashPrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useCashPriceInEstimatedTWAP;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalStakedInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTreasury from \"../../hooks/useTreasury\"\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@mui/material';\r\n\r\nimport { Alert } from '@mui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\r\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalStakedOnMasonry from '../../hooks/useTotalStakedOnMasonry';\r\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\n// import MasonryImage from '../../assets/img/masonry.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\n// const BackgroundImage = createGlobalStyle`\r\n//   body, html {\r\n//     background: url(${MasonryImage}) no-repeat !important;\r\n//     background-size: cover !important;\r\n//   }\r\n// `;\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background-color: var(--black);\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='32' viewBox='0 0 16 32'%3E%3Cg fill='%231D1E1F' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M0 24h4v2H0v-2zm0 4h6v2H0v-2zm0-8h2v2H0v-2zM0 0h4v2H0V0zm0 4h2v2H0V4zm16 20h-6v2h6v-2zm0 4H8v2h8v-2zm0-8h-4v2h4v-2zm0-20h-6v2h6V0zm0 4h-4v2h4V4zm-2 12h2v2h-2v-2zm0-8h2v2h-2V8zM2 8h10v2H2V8zm0 8h10v2H2v-2zm-2-4h14v2H0v-2zm4-8h6v2H4V4zm0 16h6v2H4v-2zM6 0h2v2H6V0zm0 24h2v2H6v-2z'/%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n\r\n* {\r\n    border-radius: 0 !important;\r\n    box-shadow: none !important;\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Masonry = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnMasonry();\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const currentEpoch = useCurrentEpoch();\r\n  const cashStat = useCashPriceInEstimatedTWAP();\r\n  const totalStaked = useTotalStakedOnMasonry();\r\n  const { apr, dpr } = useFetchMasonryAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n  const rebateStats = useTreasury()\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      {!!account ? (\r\n        <>\r\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n            Theoretics\r\n          </Typography>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            The withdraw fee changes the longer you are in the theoretics. The fees are as follows: Less than 1 hour = 8%, less than 1 day = 4%, less than 3 days = 2%, less than 5 days = 1%, less than 2 weeks = 0.5%, less than 4 weeks = 0.25%, equal to or more than 4 weeks = 0.01%.\r\n          </Alert>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            The amount of rewards locked increases the closer to under-peg GAME is. At 1.01 or lower, it is 95%. At 4.0 or higher, it is 0%. You get your rewards after the epoch is over if the TWAP (time-weighted average price) is greater or equal to 1.01.{rebateStats.outOfBootstrap ? \"\" : \" Also, the bootstrap phase is ongoing for \" + rebateStats.bootstrapEpochsLeft + \" more epochs, so GAME is being printed regardless of the TWAP right now.\"} View the docs for more info.\r\n          </Alert>\r\n          <Box mt={5}>\r\n            <Grid container justifyContent=\"center\" rowSpacing={13} columnSpacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent>\r\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      GAME Price<small> (TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{rebateStats.tombPrice.toFixed(4)} DAI</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? apr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? dpr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Withdraw Fee</Typography>\r\n                    <Typography>{(rebateStats.currentWithdrawFeeOf / 100).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Rewards Locked</Typography>\r\n                    <Typography>{(rebateStats.rewardsLocked).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>THEORY Staked</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent=\"center\">\r\n              <Box mt={3} style={{ width: '525px' }}>\r\n                <Alert variant=\"transparent\" severity=\"info\">\r\n                  Rewards can only be claimed after {rebateStats.currentClaimEpochs} {rebateStats.currentClaimEpochs == 1 ? \"epoch\" : \"epochs\"} since last action. Staked THEORY can only be withdrawn after {rebateStats.currentWithdrawEpochs} {rebateStats.currentWithdrawEpochs == 1 ? \"epoch\" : \"epochs\"} since last action (deposit, withdraw, etc.).\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent=\"center\">\r\n              <Box mt={3} style={{ width: '525px' }}>\r\n                <Alert variant=\"transparent\" severity=\"info\">\r\n                  The number of epochs that you have to wait increases as time progresses. Check the docs for more info.\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justifyContent=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n\r\n          <Box mt={5}>\r\n            <Grid container justifyContent=\"center\" spacing={3} mt={10}>\r\n              <Button\r\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\r\n                onClick={onRedeem}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Claim and Withdraw\r\n              </Button>\r\n            </Grid>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Masonry;\r\n"],"sourceRoot":""}