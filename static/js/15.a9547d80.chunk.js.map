{"version":3,"sources":["components/CardIcon/CardIcon.tsx","components/TokenInput/TokenInput.tsx","components/Value/Value.tsx","hooks/useTombStats.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","hooks/useCurrentEpoch.ts","hooks/useTreasuryAllocationTimes.ts","hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Masonry/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","hooks/useEarningsOnMasonry.ts","views/Masonry/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Masonry/components/DepositModal.tsx","views/Masonry/components/WithdrawModal.tsx","hooks/useStakedBalanceOnMasonry.ts","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Masonry/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useFetchMasonryAPR.ts","hooks/useTotalTVLOnMasonry.ts","hooks/useTotalStakedOnMasonry.ts","views/Masonry/Masonry.js"],"names":["StyledCardIcon","styled","div","props","theme","spacing","CardIcon","children","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","color","grey","TokenInput","max","symbol","onChange","onSelectMax","value","toLocaleString","Input","endAdornment","Button","size","variant","onClick","placeholder","StyledValue","Value","useTombStats","useState","stat","setStat","fastRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getTombStat","console","error","fetchTombPrice","useShareStats","slowRefresh","getShareStat","fetchSharePrice","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","useCallback","getDepositTokenPriceInDollars","balance","catch","err","stack","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledIcon","Icon","AddIcon","themeColor","useContext","ThemeContext","height","viewBox","width","d","fill","RemoveIcon","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","to","useCurrentEpoch","BigNumber","from","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useTreasuryAllocationTimes","Date","time","setTime","getTreasuryNextAllocationTime","then","useClaimRewardTimerMasonry","getUserClaimRewardTime","useClaimRewardCheck","canClaimReward","setCanClaimReward","canUserClaimRewardFromMasonry","canUserClaimReward","StyledCountdown","p","StyledProgressOuter","StyledProgress","progress","StyledCardContentInner","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromMasonry","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvestCashFromMasonry","useEarningsOnMasonry","setBalance","getEarningsOnMasonry","StyledCardHeader","StyledCardActions","Harvest","rewardsLocked","tombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","TokenSymbol","Label","text","eq","mt","style","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromMasonry","canUserWithdraw","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","ModalActions","WithdrawModal","useStakedBalanceOnMasonry","getStakedSharesOnMasonry","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","StyledActionSpacer","Stake","useApprove","TSHARE","contracts","Theoretics","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","toString","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","NOT_APPROVED","marginTop","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useFetchMasonryAPR","apr","setApr","dpr","setDpr","getMasonryAPR","getMasonryDPR","fetchMasonryAPR","useTotalTVLOnMasonry","totalStaked","setTotalStaked","getTotalTVLInMasonry","fetchTotalStaked","useTotalStakedOnMasonry","getTotalStakedInMasonry","BackgroundImage","createGlobalStyle","useStyles","makeStyles","gridItem","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","Masonry","classes","account","useWallet","totalTVL","rebateStats","useTreasury","theoryStats","Page","align","gutterBottom","Alert","severity","marginBottom","outOfBootstrap","bootstrapEpochsLeft","Grid","container","justifyContent","rowSpacing","columnSpacing","item","xs","md","lg","className","moment","toDate","tombPrice","tombPriceUpdated","nextRewardsLocked","currentWithdrawFeeOf","circulatingSupply","currentClaimEpochs","currentWithdrawEpochs","Spacer","UnlockWallet"],"mappings":"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","file":"static/js/15.a9547d80.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: none;\r\n  font-size: 36px;\r\n  height: 95px;\r\n  width: 95px;\r\n  border-radius: 40px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: none !important;\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchSharePrice() {\r\n      try {\r\n        setStat(await tombFinance.getShareStat());\r\n      } catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchSharePrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#FF4949' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 10px !important;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #ff6464;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useClaimRewardTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useRefresh from '../useRefresh';\r\nimport useTombFinance from './../useTombFinance';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const  { slowRefresh } = useRefresh();\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserClaimReward() {\r\n      try {\r\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\r\n      } catch(err){\r\n        console.error(err);\r\n      };\r\n    }\r\n    if (isUnlocked) {\r\n      canUserClaimReward();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromMasonry(), 'Claim GAME from Theoretics ');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getEarningsOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\r\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\r\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nexport interface HarvestProps\r\n{\r\n  rewardsLocked : number\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({rewardsLocked}) => {\r\n  const tombStats = useTombStats();\r\n  const { onReward } = useHarvestFromMasonry();\r\n  const earnings = useEarningsOnMasonry();\r\n  const canClaimReward = useClaimRewardCheck();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const { from, to } = useClaimRewardTimerMasonry();\r\n\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TOMB\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(earnings)} />\r\n              <Label text={`≈ $${earnedInDollars}`} color=\"#89cff0\" />\r\n              <Label text=\"Total Earned\" />\r\n              <br/>\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * (100.0-rewardsLocked) / 100.0).toFixed(4)}`} />\r\n              <Label text={`≈ $${(Number(earnedInDollars) * (100.0-rewardsLocked) / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n              <Label text=\"GAME Earned\" />\r\n              <br/>\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * rewardsLocked / 100.0).toFixed(4)}`} />\r\n              <Label text={`≈ $${(Number(earnedInDollars) * rewardsLocked / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n              <Label text=\"LGAME Earned\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={earnings.eq(0) || !canClaimReward}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useUnstakeTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} THEORY to the Theoretics `);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.withdrawShareFromMasonry(amount),\r\n        `Withdraw ${amount} THEORY from Theoretics `,\r\n      );\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdrawFromMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\r\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\r\n\r\nconst Stake: React.FC = () => {\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance.TSHARE, tombFinance.contracts.Theoretics.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const { from, to } = useUnstakeTimerMasonry();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('THEORY', tombFinance.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToMasonry();\r\n  const { onWithdraw } = useWithdrawFromMasonry();\r\n  const canWithdrawFromMasonry = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TSHARE\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n              <Label text={`≈ $${tokenPriceInDollars}`} color=\"#89cff0\" />\r\n              <Label text={'THEORY Staked'} />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                >\r\n                  Approve THEORY\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <IconButton disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw}>\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canWithdrawFromMasonry ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnMasonry = (description?: string) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem THEORY from Theoretics ';\r\n    handleTransactionReceipt(tombFinance.exitFromMasonry(), alertDesc);\r\n  }, [tombFinance, description, handleTransactionReceipt]);\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeemOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchMasonryAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const [dpr, setDpr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance.getMasonryAPR());\r\n        setDpr(await tombFinance.getMasonryDPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, setDpr, tombFinance, slowRefresh]);\r\n\r\n  return {apr,dpr};\r\n};\r\n\r\nexport default useFetchMasonryAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalTVLOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalTVLInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalTVLOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalStakedInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTreasury from \"../../hooks/useTreasury\"\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@mui/material';\r\n\r\nimport { Alert } from '@mui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\r\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useCashPriceInNextTWAP from '../../hooks/useCashPriceInNextTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalTVLOnMasonry from '../../hooks/useTotalTVLOnMasonry';\r\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\n// import MasonryImage from '../../assets/img/masonry.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport useTotalStakedOnMasonry from \"../../hooks/useTotalStakedOnMasonry\";\r\nimport useShareStats from \"../../hooks/usetShareStats\";\r\n\r\n// const BackgroundImage = createGlobalStyle`\r\n//   body, html {\r\n//     background: url(${MasonryImage}) no-repeat !important;\r\n//     background-size: cover !important;\r\n//   }\r\n// `;\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background-color: var(--black);\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='32' viewBox='0 0 16 32'%3E%3Cg fill='%231D1E1F' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M0 24h4v2H0v-2zm0 4h6v2H0v-2zm0-8h2v2H0v-2zM0 0h4v2H0V0zm0 4h2v2H0V4zm16 20h-6v2h6v-2zm0 4H8v2h8v-2zm0-8h-4v2h4v-2zm0-20h-6v2h6V0zm0 4h-4v2h4V4zm-2 12h2v2h-2v-2zm0-8h2v2h-2V8zM2 8h10v2H2V8zm0 8h10v2H2v-2zm-2-4h14v2H0v-2zm4-8h6v2H4V4zm0 16h6v2H4v-2zM6 0h2v2H6V0zm0 24h2v2H6v-2z'/%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n\r\n* {\r\n    border-radius: 0 !important;\r\n    box-shadow: none !important;\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Masonry = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnMasonry();\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const currentEpoch = useCurrentEpoch();\r\n  //const cashStat = useCashPriceInEstimatedTWAP();\r\n  //const nextCashStat = useCashPriceInNextTWAP();\r\n  const totalTVL = useTotalTVLOnMasonry();\r\n  const totalStaked = useTotalStakedOnMasonry();\r\n  const { apr, dpr } = useFetchMasonryAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  //const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n  const rebateStats = useTreasury()\r\n  const theoryStats = useShareStats();\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      {!!account ? (\r\n        <>\r\n          {/*<Alert variant=\"filled\" severity=\"info\" style={{ marginTop: '50px' }}>*/}\r\n          {/*  Theoretics will start at {(new Date('2022-03-28T12:00:00Z')).toString()}.*/}\r\n          {/*</Alert>*/}\r\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n            Theoretics\r\n          </Typography>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            The withdraw fee changes the longer you are in the theoretics. The fees are as follows: 1 block = 25%, less than 1 hour = 8%, less than 1 day = 4%, less than 3 days = 2%, less than 5 days = 1%, less than 2 weeks = 0.5%, less than 4 weeks = 0.25%, equal to or more than 4 weeks = 0.01%. Depositing or claiming does not reset your withdraw fee.\r\n          </Alert>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            Withdrawing any amount also claims your rewards. The amount of rewards locked increases the closer to under-peg GAME is. At 1.01 or lower, it is 95%. At 4.0 or higher, it is 0%. You get your rewards after the epoch is over if the TWAP (time-weighted average price) is greater or equal to 1.01.{rebateStats.outOfBootstrap ? \"\" : \" Also, the bootstrap phase is ongoing for \" + rebateStats.bootstrapEpochsLeft + \" more epochs, so GAME is being printed regardless of the TWAP right now.\"} You can find your locked LGAME rewards using the My Wallet button. View the docs for more info.\r\n          </Alert>\r\n          <Box mt={5}>\r\n            <Grid container justifyContent=\"center\" rowSpacing={13} columnSpacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent>\r\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      GAME Price<small> (TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{rebateStats.tombPrice.toFixed(4)} DAI</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      Price<small> (Next TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{rebateStats.tombPriceUpdated.toFixed(4)} DAI</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Total APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? apr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Total DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? dpr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>GAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>GAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME Percentage</Typography>\r\n                    <Typography>{(rebateStats.rewardsLocked).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next GAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next GAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME Percentage</Typography>\r\n                    <Typography>{(rebateStats.nextRewardsLocked).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Your Current Withdraw Fee</Typography>\r\n                    <Typography>{(rebateStats.currentWithdrawFeeOf / 100).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>TVL</Typography>\r\n                    <Typography>${totalTVL.toFixed(2)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>THEORY Staked</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>THEORY Staked % (Circ.+Locked)</Typography>\r\n                    <Typography>{((Number(getDisplayBalance(totalStaked))/(Number(theoryStats?.circulatingSupply)/*-(28555.3529+25959.4118)*/))*100).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent=\"center\">\r\n              <Box mt={3} style={{ width: '525px' }}>\r\n                <Alert variant=\"transparent\" severity=\"info\">\r\n                   Rewards can only be claimed after {rebateStats.currentClaimEpochs} {rebateStats.currentClaimEpochs == 1 ? \"epoch\" : \"epochs\"} since last action. Staked THEORY can only be withdrawn after {rebateStats.currentWithdrawEpochs} {rebateStats.currentWithdrawEpochs == 1 ? \"epoch\" : \"epochs\"} since last action (deposit, withdraw, etc.).\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent=\"center\">\r\n              <Box mt={3} style={{ width: '525px' }}>\r\n                <Alert variant=\"transparent\" severity=\"info\">\r\n                  Next TWAP determines if rewards will be distributed at the end of an epoch. TWAP determines everything else. The number of epochs that you have to wait increases as time progresses. Check the docs for more info.\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest rewardsLocked={rebateStats.rewardsLocked} />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justifyContent=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n\r\n          <Box mt={5}>\r\n            <Grid container justifyContent=\"center\" spacing={3} mt={10}>\r\n              <Button\r\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\r\n                onClick={onRedeem}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Claim and Withdraw\r\n              </Button>\r\n            </Grid>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Masonry;\r\n"],"sourceRoot":""}