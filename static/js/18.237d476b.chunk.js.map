{"version":3,"sources":["components/CardIcon/CardIcon.tsx","components/Value/Value.tsx","hooks/useTombStats.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","hooks/useCurrentEpoch.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useHarvestFromDungeon.ts","hooks/useEarningsOnDungeon.ts","views/Dungeon/components/Harvest.tsx","components/TokenInputTheoryToMaster/TokenInputTheoryToMaster.tsx","hooks/usePriceOfMasterInTheory.ts","views/Dungeon/components/DepositModal.tsx","hooks/useStakedBalanceOnDungeon.ts","hooks/useStakeToDungeon.ts","hooks/useStakedBalanceInTheoryOnDungeon.ts","views/Dungeon/components/Stake.tsx","hooks/useFetchDungeonAPR.ts","hooks/useTotalTVLOnDungeon.ts","hooks/dungeon/useWithdrawCheck.ts","views/Dungeon/components/ProgressCountdown.tsx","hooks/useTotalStakedOnDungeon.ts","views/Dungeon/Dungeon.js"],"names":["StyledCardIcon","styled","div","props","theme","spacing","CardIcon","children","StyledValue","Value","value","useTombStats","useState","stat","setStat","fastRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getTombStat","console","error","fetchTombPrice","useShareStats","slowRefresh","getShareStat","fetchSharePrice","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","useCallback","getDepositTokenPriceInDollars","balance","catch","err","stack","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledIcon","Icon","AddIcon","color","themeColor","useContext","ThemeContext","height","viewBox","width","d","fill","grey","RemoveIcon","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","onClick","to","useCurrentEpoch","BigNumber","from","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useTreasuryAllocationTimes","Date","time","setTime","getTreasuryNextAllocationTime","then","useHarvestFromDungeon","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvestCashFromDungeon","useEarningsOnDungeon","setBalance","getEarningsOnDungeon","StyledCardHeader","StyledCardActions","StyledCardContentInner","Harvest","rewardsLocked","tombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","TokenSymbol","symbol","Label","text","Button","variant","eq","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","TokenInputTheoryToMaster","max","onChange","onSelectMax","price","toLocaleString","Input","endAdornment","size","placeholder","isNaN","usePriceOfMasterInTheory","getPriceOfMasterInTheory","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","ModalActions","useStakedBalanceOnDungeon","getStakedSharesOnDungeon","useStakeToDungeon","onStake","amount","stakeShareToDungeon","useStakedBalanceInTheoryOnDungeon","getStakedSharesInTheoryOnDungeon","StyledActionSpacer","Stake","useApprove","TSHARE","contracts","Master","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedBalanceInTheory","toString","useModal","onDismissDeposit","onPresentDeposit","ApprovalState","APPROVED","NOT_APPROVED","style","marginTop","useFetchDungeonAPR","apr","setApr","dpr","setDpr","getDungeonAPR","getDungeonDPR","fetchMasonryAPR","useTotalTVLOnDungeon","totalStaked","setTotalStaked","getTotalTVLInDungeon","fetchTotalStaked","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromDungeon","canUserWithdraw","StyledCountdown","p","StyledProgressOuter","StyledProgress","progress","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useTotalStakedOnDungeon","getTotalStakedInDungeon","BackgroundImage","createGlobalStyle","useStyles","makeStyles","gridItem","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","Dungeon","classes","account","useWallet","totalTVL","rebateStats","useTreasury","theoryStats","Page","Alert","severity","Typography","align","gutterBottom","marginBottom","href","currentWithdrawEpochs","outOfBootstrap","bootstrapEpochsLeft","mt","Grid","container","justifyContent","rowSpacing","columnSpacing","item","xs","md","lg","className","textAlign","moment","toDate","tombPrice","tombPriceUpdated","nextRewardsLocked","Spacer","UnlockWallet"],"mappings":"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","file":"static/js/18.237d476b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: none;\r\n  font-size: 36px;\r\n  height: 95px;\r\n  width: 95px;\r\n  border-radius: 40px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: none !important;\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchSharePrice() {\r\n      try {\r\n        setStat(await tombFinance.getShareStat());\r\n      } catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchSharePrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#FF4949' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 10px !important;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #ff6464;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromDungeon = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromDungeon(), 'Claim GAME from Dungeon ');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getEarningsOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnDungeon;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromDungeon from '../../../hooks/useHarvestFromDungeon';\r\nimport useEarningsOnDungeon from '../../../hooks/useEarningsOnDungeon';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nexport interface HarvestProps\r\n{\r\n  rewardsLocked : number\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({rewardsLocked}) => {\r\n  const tombStats = useTombStats();\r\n  const { onReward } = useHarvestFromDungeon();\r\n  const earnings = useEarningsOnDungeon();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TOMB\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(earnings)} />\r\n              <Label text={`≈ $${earnedInDollars}`} color=\"#89cff0\" />\r\n              <Label text=\"Total Earned\" />\r\n              <br/>\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * (100.0-rewardsLocked) / 100.0).toFixed(4)}`} />\r\n              <Label text={`≈ $${(Number(earnedInDollars) * (100.0-rewardsLocked) / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n              <Label text=\"GAME Earned\" />\r\n              <br/>\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * rewardsLocked / 100.0).toFixed(4)}`} />\r\n              <Label text={`≈ $${(Number(earnedInDollars) * rewardsLocked / 100.0).toFixed(2)}`} color=\"#89cff0\" />\r\n              <Label text=\"LGAME Earned\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={earnings.eq(0)}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n  price: number\r\n}\r\n\r\nconst TokenInputTheoryToMaster: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, price }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      <StyledMaxText>\r\n        MASTER Obtained: {isNaN(+value) ? 0 : (+value/price).toFixed(4)}\r\n      </StyledMaxText>\r\n      <StyledMaxText>\r\n        Lock Time: 1 year (365 days)\r\n      </StyledMaxText>\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInputTheoryToMaster;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst usePriceOfMasterInTheory = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getPriceOfMasterInTheory());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default usePriceOfMasterInTheory;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport {getDisplayBalance, getFullDisplayBalance} from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\nimport TokenInputTheoryToMaster from \"../../../components/TokenInputTheoryToMaster\";\r\nimport usePriceOfTheoryInMaster from \"../../../hooks/usePriceOfTheoryInMaster\";\r\nimport usePriceOfMasterInTheory from \"../../../hooks/usePriceOfMasterInTheory\";\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  const price = Number(getDisplayBalance(usePriceOfMasterInTheory()));\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInputTheoryToMaster\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        price={price}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnDungeon;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToDungeon = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToDungeon(amount), `Buy MASTER with ${amount} `);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceInTheoryOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesInTheoryOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceInTheoryOnDungeon;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/dungeon/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnDungeon from '../../../hooks/useStakedBalanceOnDungeon';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\n//import useUnstakeTimerDungeon from '../../../hooks/dungeon/useUnstakeTimerDungeon';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToDungeon from '../../../hooks/useStakeToDungeon';\r\nimport useWithdrawFromDungeon from '../../../hooks/useWithdrawFromDungeon';\r\nimport useStakedBalanceInTheoryOnDungeon from \"../../../hooks/useStakedBalanceInTheoryOnDungeon\";\r\n\r\nconst Stake: React.FC = () => {\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance.TSHARE, tombFinance.contracts.Master.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnDungeon();\r\n  const stakedBalanceInTheory = useStakedBalanceInTheoryOnDungeon();\r\n  //const { from, to } = useUnstakeTimerDungeon();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('THEORY', tombFinance.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalanceInTheory))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToDungeon();\r\n  //const { onWithdraw } = useWithdrawFromDungeon();\r\n  //const canWithdrawFromDungeon = useWithdrawCheckDungeon();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  // const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n  //   <WithdrawModal\r\n  //     max={stakedBalance}\r\n  //     onConfirm={(value) => {\r\n  //       onWithdraw(value);\r\n  //       onDismissWithdraw();\r\n  //     }}\r\n  //     tokenName={'MASTER'}\r\n  //   />,\r\n  // );\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TSHARE\" />\r\n              {/* TODO: \"TSHARE\" should be \"MASTER\" with new icon */}\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n              <Label text={`≈ $${tokenPriceInDollars}`} color=\"#89cff0\" />\r\n              <Label text={'MASTER In Wallet'} />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                >\r\n                  Approve THEORY\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  {/*<IconButton disabled={!canWithdrawFromDungeon} onClick={onPresentWithdraw}>*/}\r\n                  <IconButton disabled={true}>\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      {/*<Box mt={2} style={{ color: '#FFF' }}>*/}\r\n      {/*  {canWithdrawFromDungeon ? (*/}\r\n      {/*    ''*/}\r\n      {/*  ) : (*/}\r\n      {/*    <Card>*/}\r\n      {/*      <CardContent>*/}\r\n      {/*        <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>*/}\r\n      {/*        <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />*/}\r\n      {/*      </CardContent>*/}\r\n      {/*    </Card>*/}\r\n      {/*  )}*/}\r\n      {/*</Box>*/}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchDungeonAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const [dpr, setDpr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance.getDungeonAPR());\r\n        setDpr(await tombFinance.getDungeonDPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, setDpr, tombFinance, slowRefresh]);\r\n\r\n  return {apr,dpr};\r\n};\r\n\r\nexport default useFetchDungeonAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalTVLOnDungeon = () => {\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalTVLInDungeon());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalTVLOnDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance.canUserUnstakeFromDungeon());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnDungeon = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalStakedInDungeon());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnDungeon;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTreasury from \"../../hooks/useTreasury\"\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@mui/material';\r\n\r\nimport { Alert } from '@mui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useStakedBalanceOnDungeon from '../../hooks/useStakedBalanceOnDungeon';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchDungeonAPR from '../../hooks/useFetchDungeonAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useCashPriceInNextTWAP from '../../hooks/useCashPriceInNextTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalTVLOnDungeon from '../../hooks/useTotalTVLOnDungeon';\r\nimport useWithdrawCheck from '../../hooks/dungeon/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\n// import DungeonImage from '../../assets/img/dungeon.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport useTotalStakedOnDungeon from \"../../hooks/useTotalStakedOnDungeon\";\r\nimport useShareStats from \"../../hooks/usetShareStats\";\r\nimport usePriceOfMasterInTheory from \"../../hooks/usePriceOfMasterInTheory\";\r\n\r\n// const BackgroundImage = createGlobalStyle`\r\n//   body, html {\r\n//     background: url(${DungeonImage}) no-repeat !important;\r\n//     background-size: cover !important;\r\n//   }\r\n// `;\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background-color: var(--black);\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='32' viewBox='0 0 16 32'%3E%3Cg fill='%231D1E1F' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M0 24h4v2H0v-2zm0 4h6v2H0v-2zm0-8h2v2H0v-2zM0 0h4v2H0V0zm0 4h2v2H0V4zm16 20h-6v2h6v-2zm0 4H8v2h8v-2zm0-8h-4v2h4v-2zm0-20h-6v2h6V0zm0 4h-4v2h4V4zm-2 12h2v2h-2v-2zm0-8h2v2h-2V8zM2 8h10v2H2V8zm0 8h10v2H2v-2zm-2-4h14v2H0v-2zm4-8h6v2H4V4zm0 16h6v2H4v-2zM6 0h2v2H6V0zm0 24h2v2H6v-2z'/%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n\r\n* {\r\n    border-radius: 0 !important;\r\n    box-shadow: none !important;\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledLink = styled.a`\r\n    font-weight: 700;\r\n    text-decoration: none;\r\n    color: var(--accent-light);\r\n  `;\r\n\r\nconst Dungeon = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  //const { onRedeem } = useRedeemOnDungeon();\r\n  const stakedBalance = useStakedBalanceOnDungeon();\r\n  const currentEpoch = useCurrentEpoch();\r\n  //const cashStat = useCashPriceInEstimatedTWAP();\r\n  //const nextCashStat = useCashPriceInNextTWAP();\r\n  const totalTVL = useTotalTVLOnDungeon();\r\n  const totalStaked = useTotalStakedOnDungeon();\r\n  const { apr, dpr } = useFetchDungeonAPR();\r\n  const canWithdraw = useWithdrawCheck();\r\n  //const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n  const rebateStats = useTreasury()\r\n  const theoryStats = useShareStats();\r\n  const price = Number(getDisplayBalance(usePriceOfMasterInTheory()));\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      {!!account ? (\r\n        <>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginTop: '50px' }}>\r\n            This part of the site is under heavy construction. It's as safe to use as the rest of the site, but some features and visuals may be missing or later changed.\r\n          </Alert>\r\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n            Dungeon\r\n          </Typography>\r\n          <Alert variant=\"filled\" severity=\"info\" style={{ marginBottom: '50px' }}>\r\n            MASTER gives you voting rights on our <StyledLink href=\"https://snapshot.org/#/gametheorytech.eth\">Snapshot</StyledLink>, as well as accumulation of fees and GAME rewards from said fees in the Theoretics.\r\n          </Alert>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            There is no withdraw fee for MASTER. However, there is a minimum lockup period of 365 days. Claiming GAME after your MASTER is unlocked locks you up for 30 days.\r\n          </Alert>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            MASTER staking and withdrawing works based on the withdraw timer.\r\n            The price of MASTER you sell it at depends on the price you request the withdraw.\r\n            Claimable GAME and THEORY will be stored here during the last 30 minutes of every {rebateStats.currentWithdrawEpochs} {rebateStats.currentWithdrawEpochs == 1 ? \"epoch\" : \"epochs\"}.\r\n            You also get MASTER immediately when you stake, but you don't start earning on it until this happens. You cannot withdraw with a pending stake, and you cannot stake with a pending withdraw.\r\n          </Alert>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            Selling all your MASTER also claims your rewards. The amount of rewards locked increases the closer to under-peg GAME is. At 1.01 or lower, it is 95%. At 4.0 or higher, it is 0%. You get your rewards after the epoch is over if the TWAP (time-weighted average price) is greater or equal to 1.01.{rebateStats.outOfBootstrap ? \"\" : \" Also, the bootstrap phase is ongoing for \" + rebateStats.bootstrapEpochsLeft + \" more epochs, so GAME is being printed regardless of the TWAP right now.\"} You can find your locked LGAME rewards using the My Wallet button. View the docs for more info.\r\n          </Alert>\r\n          <Box mt={5}>\r\n            <Grid container justifyContent=\"center\" rowSpacing={13} columnSpacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent>\r\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      GAME Price<small> (TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{rebateStats.tombPrice.toFixed(4)} DAI</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      Price<small> (Next TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{rebateStats.tombPriceUpdated.toFixed(4)} DAI</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Total APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? apr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Total DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? dpr.toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>GAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>GAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>LGAME Percentage</Typography>\r\n                    <Typography>{(rebateStats.rewardsLocked).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next GAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME APR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next GAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME DPR</Typography>\r\n                    <Typography>{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Next LGAME Percentage</Typography>\r\n                    <Typography>{(rebateStats.nextRewardsLocked).toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Minimum Lock Period</Typography>\r\n                    <Typography>1 year</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>MASTER Price</Typography>\r\n                    <Typography>{price.toFixed(4)} (${(price*theoryStats?.priceInDollars).toFixed(2)})</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>TVL</Typography>\r\n                    <Typography>${totalTVL.toFixed(2)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Total Supply</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest rewardsLocked={rebateStats.rewardsLocked} />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justifyContent=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Dungeon;\r\n"],"sourceRoot":""}