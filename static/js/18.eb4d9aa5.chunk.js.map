{"version":3,"sources":["hooks/useStakedBalanceOnMasonry.ts","hooks/useFetchMasonryAPR.ts","hooks/useEarningsOnMasonry.ts","hooks/useCurrentEpoch.ts","hooks/useTreasuryAllocationTimes.ts","hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Masonry/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","views/Masonry/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Masonry/components/DepositModal.tsx","views/Masonry/components/WithdrawModal.tsx","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Masonry/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useTotalTVLOnMasonry.ts","hooks/useTotalStakedOnMasonry.ts","views/Masonry/Masonry.js","components/TokenInput/TokenInput.tsx","components/Value/Value.tsx","hooks/useStakedTokenPriceInDollars.ts","hooks/useTokenNoUnlockBeforeTransfer.ts","hooks/useTokenSetNoUnlockBeforeTransfer.ts"],"names":["useStakedBalanceOnMasonry","slowRefresh","useRefresh","useState","BigNumber","from","balance","setBalance","tombFinance","useTombFinance","isUnlocked","useEffect","a","getStakedSharesOnMasonry","console","error","fetchBalance","useFetchMasonryAPR","apr","setApr","dpr","setDpr","getMasonryAPR","getMasonryDPR","fetchMasonryAPR","useEarningsOnMasonry","getEarningsOnMasonry","useCurrentEpoch","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useTreasuryAllocationTimes","Date","to","time","setTime","getTreasuryNextAllocationTime","then","useClaimRewardTimerMasonry","getUserClaimRewardTime","useClaimRewardCheck","canClaimReward","setCanClaimReward","canUserClaimRewardFromMasonry","canUserClaimReward","StyledCountdown","styled","p","props","theme","color","grey","StyledProgressOuter","div","StyledProgress","progress","StyledCardContentInner","spacing","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromMasonry","handleTransactionReceipt","useHandleTransactionReceipt","onReward","useCallback","harvestCashFromMasonry","Harvest","rewardsLocked","currentClaimEpochs","classname","tombStats","useTombStats","earnings","noUnlock","useTokenNoUnlockBeforeTransfer","TOMB","onSetTokenNoUnlockBeforeTransfer","useSetTokenNoUnlockBeforeTransfer","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","numberWithCommas","x","toString","replace","Card","className","CardContent","Box","style","marginBottom","CardIcon","TokenSymbol","symbol","Typography","variant","Value","value","component","Button","onClick","disabled","eq","mt","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromMasonry","canUserWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","text","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","withdrawPercentage","marginTop","align","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","useStyles","makeStyles","button","width","height","fontSize","padding","minWidth","Stake","currentWithdrawEpochs","classes","useApprove","TSHARE","contracts","Theoretics","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","handleModalClose","onCloseModal","fontWeight","fullWidth","onHandleModal","ApprovalState","APPROVED","NOT_APPROVED","marginLeft","marginRight","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useTotalTVLOnMasonry","totalStaked","setTotalStaked","getTotalTVLInMasonry","fetchTotalStaked","useTotalStakedOnMasonry","getTotalStakedInMasonry","section","boxed","overflow","position","content","background","left","bottom","transform","boxShadow","boxClear","border","backdropFilter","paddingBottom","advanced","paddingTop","display","Masonry","account","useWallet","totalTVL","rebateStats","useTreasury","theoryStats","useShareStats","React","AdvancedOpen","setAdvancedOpen","handleRewardsClose","onCloseRewards","onHandleRewards","handleStatsClose","onCloseStats","onHandleStats","Page","Grid","container","justifyContent","item","xs","md","tombPrice","moment","toDate","justify","outOfBootstrap","cursor","verticalAlign","TableContainer","Paper","Table","TableBody","TableRow","TableCell","tombPriceUpdated","nextRewardsLocked","circulatingSupply","currentWithdrawFeeOf","UnlockWallet","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","styleButton","borderTopLeftRadius","borderBottomLeftRadius","toLocaleString","Input","endAdornment","size","placeholder","StyledValue","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","catch","err","stack","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","useTokenNoUnlockBeforeTranfer","token","setNoUnlock","noUnlockBeforeTransfer","myAccount","setNoUnlockBeforeTransfer"],"mappings":"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","file":"static/js/18.eb4d9aa5.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance?.getStakedSharesOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchMasonryAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const [dpr, setDpr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance?.getMasonryAPR());\r\n        setDpr(await tombFinance?.getMasonryDPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, setDpr, tombFinance, slowRefresh]);\r\n\r\n  return {apr,dpr};\r\n};\r\n\r\nexport default useFetchMasonryAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance?.getEarningsOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance?.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance?.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useClaimRewardTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance?.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useRefresh from '../useRefresh';\r\nimport useTombFinance from './../useTombFinance';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const  { slowRefresh } = useRefresh();\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserClaimReward() {\r\n      try {\r\n        setCanClaimReward(await tombFinance?.canUserClaimRewardFromMasonry());\r\n      } catch(err){\r\n        console.error(err);\r\n      };\r\n    }\r\n    if (isUnlocked) {\r\n      canUserClaimReward();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n       {/*<StyledDesc>{description}</StyledDesc>*/}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance?.harvestCashFromMasonry(), 'Claim GAME from Theoretics ');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\r\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\r\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport useSetTokenNoUnlockBeforeTransfer from \"../../../hooks/useTokenSetNoUnlockBeforeTransfer\";\r\nimport useTombFinance from \"../../../hooks/useTombFinance\";\r\nimport useTokenNoUnlockBeforeTransfer from \"../../../hooks/useTokenNoUnlockBeforeTransfer\";\r\nimport QuestionMark from \"@mui/icons-material/QuestionMark\";\r\n\r\nexport interface HarvestProps\r\n{\r\n  rewardsLocked : number\r\n  currentClaimEpochs: number\r\n  classname: string\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({rewardsLocked, currentClaimEpochs, classname}) => {\r\n  const tombStats = useTombStats();\r\n  const tombFinance = useTombFinance();\r\n  const { onReward } = useHarvestFromMasonry();\r\n  const earnings = useEarningsOnMasonry();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const noUnlock = useTokenNoUnlockBeforeTransfer(tombFinance?.TOMB);\r\n  const { onSetTokenNoUnlockBeforeTransfer } = useSetTokenNoUnlockBeforeTransfer(tombFinance?.TOMB);\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const { from, to } = useClaimRewardTimerMasonry();\r\n\r\n  classname = classname || '';\r\n\r\n  const numberWithCommas = (x: string) => {\r\n    if(x === null) return x;\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card className={classname}>\r\n        <CardContent>\r\n          <Box style={{marginBottom: '20px'}}>\r\n            <CardIcon>\r\n              <TokenSymbol symbol=\"TOMB\" />\r\n            </CardIcon>\r\n          </Box>\r\n\r\n          <Typography variant=\"h4\">\r\n            <Value value={getDisplayBalance(earnings)} />\r\n          </Typography>\r\n          <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n            ${numberWithCommas(earnedInDollars || '0.00')}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n            Total Earned\r\n          </Typography>\r\n\r\n          <Typography variant=\"h4\">\r\n            <Value value={`${(Number(getDisplayBalance(earnings)) * (100.0-rewardsLocked) / 100.0).toFixed(4)}`} />\r\n          </Typography>\r\n          <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n            ${numberWithCommas((Number(earnedInDollars) * (100.0-rewardsLocked) / 100.0).toFixed(2) || '0.00')}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n            GAME Earned\r\n          </Typography>\r\n          \r\n          <Typography variant=\"h4\">\r\n            <Value value={`${(Number(getDisplayBalance(earnings)) * rewardsLocked / 100.0).toFixed(4)}`} />\r\n          </Typography>\r\n          <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n            ${numberWithCommas((Number(earnedInDollars) * rewardsLocked / 100.0).toFixed(2) || '0.00')}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n            LGAME Earned\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{marginBottom: '20px'}}>\r\n            Claim Lockup Rounds: {currentClaimEpochs}\r\n          </Typography>\r\n          <Box className=\"buttonWrap\">\r\n            {!noUnlock ? (<Button\r\n              onClick={onSetTokenNoUnlockBeforeTransfer}\r\n              variant=\"contained\"\r\n          >\r\n            Claim Unlock\r\n          </Button>) : (<Button\r\n              onClick={onReward}\r\n              variant=\"contained\"\r\n              disabled={earnings.eq(0) || !canClaimReward}\r\n            >\r\n              Claim Rewards\r\n            </Button>)}\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Harvest;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance?.canUserUnstakeFromMasonry());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal text={`Deposit ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button, Typography } from '@mui/material';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n  withdrawPercentage?: number;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', withdrawPercentage }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  withdrawPercentage = withdrawPercentage || 0;\r\n\r\n  return (\r\n    <Modal text={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <Typography variant=\"h6\" component=\"p\" style={{marginTop: '20px'}} align=\"center\">\r\n        Current Withdrawal Fee: {withdrawPercentage}%              \r\n      </Typography>\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useUnstakeTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance?.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} THEORY to the Theoretics `);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance?.withdrawShareFromMasonry(amount),\r\n        `Withdraw ${amount} THEORY from Theoretics `,\r\n      );\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdrawFromMasonry;\r\n","import React, { useMemo } from 'react';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport QuestionMark from '@mui/icons-material/QuestionMark';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\r\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\r\n\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button : {\r\n    width: '2em',\r\n    height: '2em',\r\n    fontSize: '14px',\r\n    padding: '0',\r\n    minWidth: 'auto'\r\n  }\r\n}));\r\n\r\ninterface StakeProps {\r\n  withdrawPercentage: number;\r\n  currentWithdrawEpochs: number;\r\n  classname: string;\r\n}\r\n\r\nconst numberWithCommas = (x: string) => {\r\n  if(x === null) return x;\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({withdrawPercentage, currentWithdrawEpochs, classname}) => {\r\n  classname = classname || '';\r\n  withdrawPercentage = withdrawPercentage || 0;\r\n  const classes = useStyles();\r\n\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance?.TSHARE, tombFinance?.contracts.Theoretics.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance?.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const { from, to } = useUnstakeTimerMasonry();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('THEORY', tombFinance?.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToMasonry();\r\n  const { onWithdraw } = useWithdrawFromMasonry();\r\n  const canWithdrawFromMasonry = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      withdrawPercentage={withdrawPercentage}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  const handleModalClose = () => {\r\n    onCloseModal();\r\n  };\r\n  \r\n  const [onHandleModal, onCloseModal] = useModal(\r\n    <Modal text=\"Withdrawal Fee\" onDismiss={handleModalClose}>\r\n      <Typography variant=\"h6\" color=\"#fff\" style={{marginBottom: '20px', fontWeight: \"500\"}}>\r\n        Your withdrawal fee for each pool changes the longer your tokens are staked, from your initial deposit or last withdrawal.\r\n      </Typography>\r\n      <Typography variant=\"h6\" color=\"#fff\" style={{marginBottom: '20px', fontWeight: \"500\"}}>\r\n        <strong>The fees are as follows:</strong>\r\n        <ul style={{marginTop:'10px'}}>\r\n          <li>1 block (30 seconds) = 25%</li>\r\n          <li>less than 1 hour = 8%</li>\r\n          <li>less than 1 day = 4%</li>\r\n          <li>less than 3 days = 2%</li>\r\n          <li>less than 5 days = 1%</li>\r\n          <li>less than 2 weeks = 0.5%</li>\r\n          <li>less than 4 weeks = 0.25%</li>\r\n          <li>4 weeks and longer  = 0.01%</li>\r\n        </ul>\r\n      </Typography>\r\n      <Typography variant=\"h6\" color=\"#fff\">\r\n        Depositing or Claiming tokens does not reset your withdrawal fee.\r\n      </Typography>\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={handleModalClose} fullWidth>\r\n          Close\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n\r\n\r\n  return (\r\n    <>\r\n      <Card className={classname}>\r\n        <CardContent>\r\n          <Box style={{marginBottom: '20px'}}>\r\n            <CardIcon>\r\n              <TokenSymbol symbol=\"TSHARE\" />\r\n            </CardIcon>\r\n          </Box>\r\n\r\n          <Typography variant=\"h4\">\r\n            <Value value={getDisplayBalance(stakedBalance)} />\r\n          </Typography>\r\n          <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n            ${numberWithCommas(tokenPriceInDollars || '0.00')}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n            THEORY Staked\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{marginBottom: '20px'}}>\r\n            Withdraw Lockup Rounds: {currentWithdrawEpochs}\r\n          </Typography>\r\n\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Box className=\"buttonWrap\">\r\n                  <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                  >\r\n                    Approve THEORY\r\n                  </Button>\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                <Box className=\"buttonWrap\">\r\n                  <Typography variant=\"body1\" component=\"p\" style={{marginBottom: '20px'}}>\r\n                    Current Withdrawal Fee: {withdrawPercentage}%\r\n                    <Button variant=\"contained\" className={classes.button} aria-label=\"More info\" style={{ marginLeft: '10px' }} onClick={onHandleModal}>\r\n                      <QuestionMark fontSize=\"inherit\" />\r\n                    </Button>\r\n                  </Typography>\r\n                  <Button variant=\"contained\" disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw} style={{marginRight: '15px'}}>\r\n                    Withdraw\r\n                  </Button>\r\n                  <Button variant=\"contained\" onClick={onPresentDeposit}>\r\n                    Deposit\r\n                  </Button>\r\n                  </Box>\r\n                </>\r\n              )}\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canWithdrawFromMasonry ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stake;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnMasonry = (description?: string) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem THEORY from Theoretics ';\r\n    handleTransactionReceipt(tombFinance?.exitFromMasonry(), alertDesc);\r\n  }, [tombFinance, description, handleTransactionReceipt]);\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeemOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalTVLOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        if(!tombFinance?.isUnlocked) return;\r\n        setTotalStaked(await tombFinance?.getTotalTVLInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalTVLOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance?.getTotalStakedInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnMasonry;\r\n","import React from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTreasury from \"../../hooks/useTreasury\"\r\n\r\nimport { Card, CardContent, Button, Typography, Grid, Paper } from '@mui/material';\r\nimport QuestionMarkIcon from '@mui/icons-material/QuestionMark';\r\nimport { ExpandMore as ChevronDownIcon } from '@mui/icons-material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\r\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useCashPriceInNextTWAP from '../../hooks/useCashPriceInNextTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalTVLOnMasonry from '../../hooks/useTotalTVLOnMasonry';\r\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\n// import MasonryImage from '../../assets/img/masonry.png';\r\nimport useTotalStakedOnMasonry from \"../../hooks/useTotalStakedOnMasonry\";\r\nimport useShareStats from \"../../hooks/usetShareStats\";\r\n\r\nimport useModal from '../../hooks/useModal';\r\nimport Modal, { ModalProps } from '../../components/Modal';\r\nimport ModalActions from '../../components/ModalActions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  section: {\r\n    padding: '100px 0',\r\n    '@media (max-width: 767px)': {\r\n      padding: '40px 0'\r\n    }\r\n  },\r\n  button : {\r\n    width: '2em',\r\n    height: '2em',\r\n    fontSize: '14px',\r\n    padding: '0',\r\n    minWidth: 'auto'\r\n  },\r\n  boxed : {\r\n    overflow: 'initial',\r\n    '& .info-wrap': {\r\n      position: 'relative',\r\n      '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: '2px',\r\n        height: 'calc(100% - 20px)',\r\n        background: 'var(--extra-color-1)',\r\n        left: '50%',\r\n        bottom: '0',\r\n        transform: 'translateX(-50%)',\r\n        boxShadow: \"0px 0px 5px var(--extra-color-1)\",\r\n\r\n      }\r\n    }\r\n  },\r\n  boxClear: {\r\n    border: 'none',\r\n    boxShadow: 'none',\r\n    backdropFilter: 'none',\r\n    '& > *': {\r\n      padding: '0',\r\n      '&:last-child': {\r\n        paddingBottom: '0'\r\n      }\r\n    },\r\n  },\r\n  advanced: {\r\n    textAlign: 'center',\r\n    '& .advanced-toggle' : {\r\n      paddingTop: '20px',\r\n      paddingBottom: '20px',\r\n    },\r\n    '& .advanced-info' : {\r\n      display: 'none',\r\n      marginBottom: '20px'\r\n    },\r\n    '&.open' : {\r\n      '& .advanced-info' : {\r\n        display: 'block',\r\n      },\r\n      '& .advanced-toggle' : {\r\n        '& svg' : {\r\n          transform: 'rotate(180deg)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n}));\r\n\r\nconst numberWithCommas = (x) => {\r\n  if(x === null) return x;\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst Masonry = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnMasonry();\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const currentEpoch = useCurrentEpoch();\r\n  //const cashStat = useCashPriceInEstimatedTWAP();\r\n  //const nextCashStat = useCashPriceInNextTWAP();\r\n  const totalTVL = useTotalTVLOnMasonry();\r\n  const totalStaked = useTotalStakedOnMasonry();\r\n  const { apr, dpr } = useFetchMasonryAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  //const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n  const rebateStats = useTreasury()\r\n  const theoryStats = useShareStats();\r\n\r\n  const [AdvancedOpen, setAdvancedOpen] = React.useState(false);\r\n\r\n  const handleAdvancedOpen = () => {\r\n    (AdvancedOpen === false) ? setAdvancedOpen(true) : setAdvancedOpen(false);\r\n  };\r\n\r\n  const handleRewardsClose = () => {\r\n    onCloseRewards();\r\n  };\r\n  \r\n  const [onHandleRewards, onCloseRewards] = useModal(\r\n    <Modal text=\"Rewards\" onDismiss={handleRewardsClose}>\r\n      <Typography variant=\"h6\" color=\"#fff\" style={{fontWeight: '500'}}>\r\n      Every Round (often called an 'Epoch' in other DeFi protocols) you will recieve rewards based on the yearly and daily percentage rates if the GAME Price is above $1.01. Rewards are paid in GAME and LGAME (Locked GAME) tokens.<br /><br />\r\n\r\n      <strong>GAME</strong><br />Are GAME tokens which are available to you straight away.<br /><br />\r\n\r\n      <strong>LGAME</strong><br />Locked GAME Tokens are claimable and they unlock over 1 year from claiming them in a real-time linear schedule.<br /><br />\r\n\r\n      <strong>Unlocking LGAME</strong><br />You can view and unlock LGAME tokens which are available to be unlocked in 'my wallet'.<br /><br />\r\n\r\n      <strong>Round</strong><br />A round lasts for 6 hours.<br /><br />\r\n\r\n      <strong>TWAP</strong><br />Time-Weighted Average Price of GAME during the course of the previous Round.\r\n      </Typography>\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={handleRewardsClose} fullWidth>\r\n          Close\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n\r\n  const handleStatsClose = () => {\r\n    onCloseStats();\r\n  };\r\n  \r\n  const [onHandleStats, onCloseStats] = useModal(\r\n    <Modal text=\"Advanced Stats\" onDismiss={handleStatsClose}>\r\n      <Typography variant=\"h6\" color=\"#fff\" style={{fontWeight: '500'}}>\r\n      <strong>LGAME %</strong><br />The percentage of your rewards that will be in Locked GAME Tokens. This percentage is based on the price of GAME for that Round.<br /><br />\r\n      \r\n      If the price is below $1.0, no rewards will be given.<br />\r\n      If the price is $1.01, 100% of rewards will be in LGAME.<br />\r\n      If the price is $4.00 or greater, 100% of rewards will be in GAME.<br />\r\n      If the price is in between $1.01 and $4.00, the percentage of LGAME / GAME rewards will be on a linear sliding scale.<br /><br />\r\n\r\n      <strong>Next TWAP</strong><br />The projected Time-Weighted Average Price of GAME for the next Round.<br /><br />\r\n\r\n      <strong>Next APR</strong><br />The projected Annual Percentage Rate of rewards for the next Round.<br /><br />\r\n\r\n      <strong>Next DPR</strong><br />The projected Daily Percentage Rate of rewards for the next Round.<br /><br />\r\n\r\n      <strong>Next LGAME %</strong><br />The projected percentage of rewards that will be in Locked GAME for the next Round.<br /><br />\r\n\r\n      <strong>Total Value Locked</strong><br />The total USD value of THEORY tokens staked in the pool.<br /><br />\r\n\r\n      <strong>THEORY Staked</strong><br />The total number of THEORY tokens staked in the pool.<br /><br />\r\n\r\n      <strong>THEORY Staked %</strong><br />The percentage of all circulating THEORY and Locked THEORY tokens that are staked in the pool.\r\n      </Typography>\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={handleStatsClose} fullWidth>\r\n          Close\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Page>\r\n      {!!account ? (\r\n        <>\r\n          {/*<Alert variant=\"filled\" severity=\"info\" style={{ marginTop: '50px' }}>*/}\r\n          {/*  Theoretics will start at {(new Date('2022-03-28T12:00:00Z')).toString()}.*/}\r\n          {/*</Alert>*/}\r\n          <div className=\"section\">\r\n          <Typography align=\"center\" variant=\"h1\" className=\"textGlow pink\" style={{marginBottom: '20px'}}>\r\n            Theoretics\r\n          </Typography>\r\n          <Typography align=\"center\" variant=\"h5\" component=\"p\" style={{marginBottom: '50px', fontWeight: '500'}}>\r\n            Deposit THEORY and earn GAME when GAME price is above $1.01\r\n          </Typography>\r\n          {/*<Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>\r\n            Withdrawing any amount also claims your rewards. The amount of rewards locked increases the closer to under-peg GAME is. At 1.01 or lower, it is 95%. At 4.0 or higher, it is 0%. You get your rewards after the epoch is over if the TWAP (time-weighted average price) is greater or equal to 1.01.{rebateStats.outOfBootstrap ? \"\" : \" Also, the bootstrap phase is ongoing for \" + rebateStats.bootstrapEpochsLeft + \" more epochs, so GAME is being printed regardless of the TWAP right now.\"} You can find your locked LGAME rewards using the My Wallet button. View the docs for more info.\r\n      </Alert>*/}\r\n          <Grid container justifyContent=\"center\" spacing={3} style={{marginBottom: '50px'}}>\r\n\r\n            <Grid item xs={12} md={3}>\r\n                <Card className={classes.boxClear}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">Current Round</Typography>\r\n                    <Typography variant=\"h4\">{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n            <Grid item xs={6} md={3}>\r\n              <Card className={classes.boxClear}>\r\n                <CardContent align=\"center\">\r\n                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                    GAME Price<small> (TWAP)</small>\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">{rebateStats.tombPrice.toFixed(4)} DAI</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} md={3}>\r\n              <Card className={classes.boxClear}>\r\n                <CardContent align=\"center\">\r\n                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">Next Round</Typography>\r\n                  <Typography variant=\"h4\">\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Round\" />\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n\r\n          <Grid container justifyContent=\"center\" spacing={3} style={{marginBottom: '30px'}}>\r\n            <Grid item xs={12} md={6}>\r\n              <div>\r\n              <Card className={classes.boxed}>\r\n                <CardContent align=\"center\">\r\n                  <Typography variant='h4' className=\"kallisto\" style={{marginBottom: '20px'}}>\r\n                    Rewards\r\n                    <Button variant=\"contained\" className={classes.button} aria-label=\"More info\" style={{ marginLeft: '10px' }} onClick={onHandleRewards}>\r\n                      <QuestionMarkIcon fontSize='inherit' />\r\n                    </Button>\r\n                  </Typography>\r\n                  <div className='info-wrap'>\r\n                  <Grid container justify=\"center\" spacing={3}>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                      <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">GAME Yearly Awards</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                      <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">GAME Daily Awards</Typography>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                      <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">LGAME Yearly Awards</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                      <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">LGAME Daily Awards</Typography>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n              </div>\r\n              <div className={`${classes.advanced} ${AdvancedOpen ? 'open' : ''}`}>\r\n                <div className='advanced-toggle' onClick={handleAdvancedOpen}>\r\n                  <Typography align=\"center\" style={{display: 'inline-block',cursor: 'pointer',fontWeight: '700'}} className='textGlow pink'>\r\n                    <span style={{verticalAlign: 'middle'}}>{AdvancedOpen ? \"Hide Advanced\" : \"Show Advanced\"}</span>\r\n                    <ChevronDownIcon style={{verticalAlign: 'middle'}} />\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"advanced-info\">\r\n                  <Card>\r\n                    <CardContent align=\"center\">\r\n                      <Typography variant='h4' className=\"kallisto\" style={{marginBottom: '10px'}}>\r\n                        Advanced Stats\r\n                        <Button variant=\"contained\" className={classes.button} aria-label=\"Advanced stats info\" style={{ marginLeft: '10px' }} onClick={onHandleStats}>\r\n                          <QuestionMarkIcon fontSize='inherit' />\r\n                        </Button>\r\n                      </Typography>\r\n                      <Grid container>\r\n                        <TableContainer component={Paper}>\r\n                          <Table aria-label=\"advanced info table\">\r\n                            <TableBody>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    LGAME %\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {(rebateStats.rewardsLocked).toFixed(2)}%\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    Next TWAP\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {rebateStats.tombPriceUpdated.toFixed(4)} DAI\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    Next APR\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}% GAME<br />{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}% LGAME\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    Next DPR\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}% GAME<br />{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}% LGAME\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    Next LGAME %\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {(rebateStats.nextRewardsLocked).toFixed(2)}%\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    Total Value Locked\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    ${numberWithCommas(totalTVL.toFixed(2) || '0.00')}\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    THEORY Staked\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {numberWithCommas(getDisplayBalance(totalStaked) || '0.00')}\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                              <TableRow>\r\n                                <TableCell align=\"right\">\r\n                                  <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                    THEORY Staked %\r\n                                  </Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Typography>\r\n                                    {((Number(getDisplayBalance(totalStaked))/(Number(theoryStats?.circulatingSupply)/*-(28555.3529+25959.4118)*/))*100).toFixed(2)}%<br />(Circulating + Locked)\r\n                                  </Typography>\r\n                                </TableCell>\r\n                              </TableRow>\r\n\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n            <Grid container spacing={3} justifyContent=\"center\">\r\n              <Grid item xs={12} md={4}>\r\n                <Harvest currentClaimEpochs={rebateStats.currentClaimEpochs} rewardsLocked={rebateStats.rewardsLocked} classname=\"boxed\" />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Stake currentWithdrawEpochs={rebateStats.currentWithdrawEpochs} withdrawPercentage={(rebateStats.currentWithdrawFeeOf / 100).toFixed(2)} classname=\"boxed\" />\r\n              </Grid>\r\n            </Grid>\r\n\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Masonry;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText className=\"textGlow\">\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <Button style={styleButton} size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n              Max\r\n            </Button>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div``;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst styleButton = {\r\n  height: '56px',\r\n  borderTopLeftRadius: '0',\r\n  borderBottomLeftRadius: '0'\r\n};\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance?.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20Lockable from '../tomb-finance/ERC20Lockable';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useTokenNoUnlockBeforeTranfer = (token: ERC20Lockable) => {\r\n  const [noUnlock, setNoUnlock] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setNoUnlock(await token.noUnlockBeforeTransfer(tombFinance?.myAccount));\r\n  }, [token, tombFinance?.myAccount]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(`Failed to fetch token lock: ${err.stack}`));\r\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshInterval);\r\n    }\r\n  }, [isUnlocked, token, fetchBalance, tombFinance]);\r\n\r\n  return noUnlock;\r\n};\r\n\r\nexport default useTokenNoUnlockBeforeTranfer;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20Lockable from '../tomb-finance/ERC20Lockable';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport useHandleTransactionReceipt from \"./useHandleTransactionReceipt\";\r\n\r\nconst useSetTokenNoUnlockBeforeTransfer = (token: ERC20Lockable) => {\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleSetTokenNoUnlockBeforeTransfer = useCallback(\r\n      () => {\r\n        handleTransactionReceipt(\r\n            token.setNoUnlockBeforeTransfer(true),\r\n            `Approve Unlock On Claim`,\r\n        );\r\n      },\r\n      [token, handleTransactionReceipt],\r\n  );\r\n  return { onSetTokenNoUnlockBeforeTransfer: handleSetTokenNoUnlockBeforeTransfer };\r\n};\r\n\r\nexport default useSetTokenNoUnlockBeforeTransfer;\r\n"],"sourceRoot":""}