{"version":3,"sources":["hooks/useTokenNoUnlockBeforeTransfer.ts","hooks/useTokenSetNoUnlockBeforeTransfer.ts","hooks/useCurrentEpoch.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useHarvestFromDungeon.ts","hooks/useEarningsOnDungeon.ts","views/Dungeon/components/Harvest.tsx","components/TokenInputTheoryToMaster/TokenInputTheoryToMaster.tsx","hooks/usePriceOfMasterInTheory.ts","views/Dungeon/components/DepositModal.tsx","hooks/useStakedBalanceOnDungeon.ts","hooks/useStakeToDungeon.ts","hooks/useStakedBalanceInTheoryOnDungeon.ts","views/Dungeon/components/Stake.tsx","hooks/useFetchDungeonAPR.ts","hooks/useTotalTVLOnDungeon.ts","hooks/dungeon/useWithdrawCheck.ts","views/Dungeon/components/ProgressCountdown.tsx","hooks/useTotalStakedOnDungeon.ts","views/Dungeon/Dungeon.js","components/Value/Value.tsx","hooks/useStakedTokenPriceInDollars.ts"],"names":["useTokenNoUnlockBeforeTranfer","token","useState","noUnlock","setNoUnlock","tombFinance","useTombFinance","isUnlocked","fetchBalance","useCallback","a","noUnlockBeforeTransfer","myAccount","useEffect","catch","err","console","error","stack","refreshInterval","setInterval","config","clearInterval","useSetTokenNoUnlockBeforeTransfer","handleTransactionReceipt","useHandleTransactionReceipt","onSetTokenNoUnlockBeforeTransfer","setNoUnlockBeforeTransfer","useCurrentEpoch","BigNumber","from","currentEpoch","setCurrentEpoch","slowRefresh","useRefresh","getCurrentEpoch","fetchCurrentEpoch","useTreasuryAllocationTimes","Date","to","time","setTime","getTreasuryNextAllocationTime","then","useHarvestFromDungeon","onReward","harvestCashFromDungeon","useEarningsOnDungeon","balance","setBalance","getEarningsOnDungeon","Harvest","rewardsLocked","classname","tombStats","useTombStats","earnings","useTokenNoUnlockBeforeTransfer","TOMB","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","className","CardContent","Box","style","marginBottom","CardIcon","TokenSymbol","symbol","Typography","variant","Value","value","component","color","Button","onClick","disabled","eq","StyledTokenInput","styled","div","StyledSpacer","props","theme","spacing","StyledTokenAdornmentWrapper","StyledMaxText","grey","TokenInputTheoryToMaster","max","onChange","onSelectMax","price","toLocaleString","Input","endAdornment","size","placeholder","isNaN","usePriceOfMasterInTheory","getPriceOfMasterInTheory","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","text","ModalActions","useStakedBalanceOnDungeon","getStakedSharesOnDungeon","useStakeToDungeon","onStake","amount","stakeShareToDungeon","useStakedBalanceInTheoryOnDungeon","getStakedSharesInTheoryOnDungeon","useStyles","makeStyles","button","width","height","fontSize","padding","minWidth","Stake","useApprove","TSHARE","contracts","Master","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedBalanceInTheory","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","toString","useModal","onDismissDeposit","onPresentDeposit","ApprovalState","APPROVED","NOT_APPROVED","marginTop","marginRight","useFetchDungeonAPR","apr","setApr","dpr","setDpr","getDungeonAPR","getDungeonDPR","fetchMasonryAPR","useTotalTVLOnDungeon","totalStaked","setTotalStaked","getTotalTVLInDungeon","fetchTotalStaked","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromDungeon","canUserWithdraw","StyledCountdown","p","StyledProgressOuter","StyledProgress","progress","StyledCardContentInner","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useTotalStakedOnDungeon","getTotalStakedInDungeon","section","boxed","overflow","position","content","background","left","bottom","transform","boxShadow","boxClear","border","backdropFilter","paddingBottom","advanced","textAlign","paddingTop","display","StyledLink","numberWithCommas","x","undefined","Dungeon","classes","account","useWallet","totalTVL","rebateStats","useTreasury","theoryStats","useShareStats","React","AdvancedOpen","setAdvancedOpen","handleRewardsClose","onCloseRewards","fontWeight","fullWidth","onHandleRewards","handleStatsClose","onCloseStats","onHandleStats","Page","align","href","Grid","container","justifyContent","item","xs","md","tombPrice","moment","toDate","marginLeft","justify","outOfBootstrap","cursor","verticalAlign","TableContainer","Paper","Table","TableBody","TableRow","TableCell","tombPriceUpdated","nextRewardsLocked","UnlockWallet","StyledValue","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars"],"mappings":"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","file":"static/js/20.a758ca63.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20Lockable from '../tomb-finance/ERC20Lockable';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useTokenNoUnlockBeforeTranfer = (token: ERC20Lockable) => {\r\n  const [noUnlock, setNoUnlock] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setNoUnlock(await token.noUnlockBeforeTransfer(tombFinance?.myAccount));\r\n  }, [token, tombFinance?.myAccount]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(`Failed to fetch token lock: ${err.stack}`));\r\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshInterval);\r\n    }\r\n  }, [isUnlocked, token, fetchBalance, tombFinance]);\r\n\r\n  return noUnlock;\r\n};\r\n\r\nexport default useTokenNoUnlockBeforeTranfer;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20Lockable from '../tomb-finance/ERC20Lockable';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport useHandleTransactionReceipt from \"./useHandleTransactionReceipt\";\r\n\r\nconst useSetTokenNoUnlockBeforeTransfer = (token: ERC20Lockable) => {\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleSetTokenNoUnlockBeforeTransfer = useCallback(\r\n      () => {\r\n        handleTransactionReceipt(\r\n            token.setNoUnlockBeforeTransfer(true),\r\n            `Approve Unlock On Claim`,\r\n        );\r\n      },\r\n      [token, handleTransactionReceipt],\r\n  );\r\n  return { onSetTokenNoUnlockBeforeTransfer: handleSetTokenNoUnlockBeforeTransfer };\r\n};\r\n\r\nexport default useSetTokenNoUnlockBeforeTransfer;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance?.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance?.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromDungeon = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromDungeon(), 'Claim GAME from Dungeon ');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getEarningsOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnDungeon;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\n// import useClaimRewardTimerDungeon from '../../../hooks/dungeon/useClaimRewardTimerDungeon';\r\n// import useClaimRewardCheck from '../../../hooks/dungeon/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromDungeon from '../../../hooks/useHarvestFromDungeon';\r\nimport useEarningsOnDungeon from '../../../hooks/useEarningsOnDungeon';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport useSetTokenNoUnlockBeforeTransfer from \"../../../hooks/useTokenSetNoUnlockBeforeTransfer\";\r\nimport useTombFinance from \"../../../hooks/useTombFinance\";\r\nimport useTokenNoUnlockBeforeTransfer from \"../../../hooks/useTokenNoUnlockBeforeTransfer\";\r\n\r\nexport interface HarvestProps\r\n{\r\n  rewardsLocked : number\r\n  classname: string\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({rewardsLocked, classname}) => {\r\n  const tombStats = useTombStats();\r\n  const tombFinance = useTombFinance();\r\n  const { onReward } = useHarvestFromDungeon();\r\n  const earnings = useEarningsOnDungeon();\r\n  //const canClaimReward = useClaimRewardCheck();\r\n  const noUnlock = useTokenNoUnlockBeforeTransfer(tombFinance?.TOMB);\r\n  const { onSetTokenNoUnlockBeforeTransfer } = useSetTokenNoUnlockBeforeTransfer(tombFinance?.TOMB);\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n      () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n      [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  //const { from, to } = useClaimRewardTimerDungeon();\r\n\r\n  classname = classname || '';\r\n\r\n  return (\r\n      <>\r\n        <Card className={classname}>\r\n          <CardContent>\r\n            <Box style={{marginBottom: '20px'}}>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"TOMB\" />\r\n              </CardIcon>\r\n            </Box>\r\n\r\n            <Typography variant=\"h4\">\r\n              <Value value={getDisplayBalance(earnings)} />\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n              ${earnedInDollars}\r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n              Total Earned\r\n            </Typography>\r\n\r\n            <Typography variant=\"h4\">\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * (100.0-rewardsLocked) / 100.0).toFixed(4)}`} />\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n              ${(Number(earnedInDollars) * (100.0-rewardsLocked) / 100.0).toFixed(2)}\r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n              GAME Earned\r\n            </Typography>\r\n\r\n            <Typography variant=\"h4\">\r\n              <Value value={`${(Number(getDisplayBalance(earnings)) * rewardsLocked / 100.0).toFixed(4)}`} />\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n              ${(Number(earnedInDollars) * rewardsLocked / 100.0).toFixed(2)}\r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n              LGAME Earned\r\n            </Typography>\r\n            <Box className=\"buttonWrap\">\r\n              {!noUnlock ? (<Button\r\n                  onClick={onSetTokenNoUnlockBeforeTransfer}\r\n                  variant=\"contained\"\r\n              >\r\n                Approve Unlock on Claim\r\n              </Button>) : (<Button\r\n                  onClick={onReward}\r\n                  variant=\"contained\"\r\n                  disabled={earnings.eq(0)}\r\n              >\r\n                Claim Rewards\r\n              </Button>)}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n        {/*<Box mt={2} style={{ color: '#FFF' }}>*/}\r\n        {/*  {canClaimReward ? (*/}\r\n        {/*      ''*/}\r\n        {/*  ) : (*/}\r\n        {/*      <Card>*/}\r\n        {/*        <CardContent>*/}\r\n        {/*          <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>*/}\r\n        {/*          <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />*/}\r\n        {/*        </CardContent>*/}\r\n        {/*      </Card>*/}\r\n        {/*  )}*/}\r\n        {/*</Box>*/}\r\n      </>\r\n  );\r\n};\r\n\r\nexport default Harvest;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n  price: number\r\n}\r\n\r\nconst TokenInputTheoryToMaster: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, price }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      <StyledMaxText>\r\n        MASTER Obtained: {isNaN(+value) ? 0 : (+value/price).toFixed(4)}\r\n      </StyledMaxText>\r\n      <StyledMaxText>\r\n        Lock Time: 1 year (365 days)\r\n      </StyledMaxText>\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInputTheoryToMaster;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst usePriceOfMasterInTheory = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getPriceOfMasterInTheory());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default usePriceOfMasterInTheory;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport TokenInputTheoryToMaster from '../../../components/TokenInputTheoryToMaster';\r\n\r\nimport {getDisplayBalance, getFullDisplayBalance} from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\nimport usePriceOfMasterInTheory from \"../../../hooks/usePriceOfMasterInTheory\";\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n    max: BigNumber;\r\n    onConfirm: (amount: string) => void;\r\n    tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n    const [val, setVal] = useState('');\r\n\r\n    const fullBalance = useMemo(() => {\r\n        return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n    }, [max, tokenName]);\r\n\r\n    const handleChange = useCallback(\r\n        (e: React.FormEvent<HTMLInputElement>) => {\r\n            setVal(e.currentTarget.value);\r\n        },\r\n        [setVal],\r\n    );\r\n\r\n    const handleSelectMax = useCallback(() => {\r\n        setVal(fullBalance);\r\n    }, [fullBalance, setVal]);\r\n\r\n    const price = Number(getDisplayBalance(usePriceOfMasterInTheory()));\r\n\r\n    return (\r\n        <Modal text={`Deposit ${tokenName}`} onDismiss={onDismiss}>\r\n            <TokenInputTheoryToMaster\r\n                value={val}\r\n                onSelectMax={handleSelectMax}\r\n                onChange={handleChange}\r\n                max={fullBalance}\r\n                symbol={tokenName}\r\n                price={price}\r\n            />\r\n            <ModalActions>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n                    Confirm\r\n                </Button>\r\n            </ModalActions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DepositModal;","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnDungeon;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToDungeon = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToDungeon(amount), `Buy MASTER with ${amount} `);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceInTheoryOnDungeon = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesInTheoryOnDungeon());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceInTheoryOnDungeon;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/dungeon/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnDungeon from '../../../hooks/useStakedBalanceOnDungeon';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\n//import useUnstakeTimerDungeon from '../../../hooks/dungeon/useUnstakeTimerDungeon';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToDungeon from '../../../hooks/useStakeToDungeon';\r\nimport useWithdrawFromDungeon from '../../../hooks/useWithdrawFromDungeon';\r\nimport useStakedBalanceInTheoryOnDungeon from \"../../../hooks/useStakedBalanceInTheoryOnDungeon\";\r\nimport QuestionMark from \"@mui/icons-material/QuestionMark\";\r\nimport {makeStyles} from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button : {\r\n    width: '2em',\r\n    height: '2em',\r\n    fontSize: '14px',\r\n    padding: '0',\r\n    minWidth: 'auto'\r\n  }\r\n}));\r\n\r\ninterface StakeProps {\r\n  classname: string;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({classname}) => {\r\n  classname = classname || '';\r\n  const classes = useStyles();\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance?.TSHARE, tombFinance?.contracts.Master.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance?.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnDungeon();\r\n  const stakedBalanceInTheory = useStakedBalanceInTheoryOnDungeon();\r\n  //const { from, to } = useUnstakeTimerDungeon();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('THEORY', tombFinance?.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalanceInTheory))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToDungeon();\r\n  //const { onWithdraw } = useWithdrawFromDungeon();\r\n  //const canWithdrawFromDungeon = useWithdrawCheckDungeon();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'THEORY'}\r\n    />,\r\n  );\r\n\r\n  // const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n  //   <WithdrawModal\r\n  //     max={stakedBalance}\r\n  //     onConfirm={(value) => {\r\n  //       onWithdraw(value);\r\n  //       onDismissWithdraw();\r\n  //     }}\r\n  //     tokenName={'MASTER'}\r\n  //   />,\r\n  // );\r\n\r\n  return (\r\n      <>\r\n        <Card className={classname}>\r\n          <CardContent>\r\n            <Box style={{marginBottom: '20px'}}>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"MASTER\" />\r\n              </CardIcon>\r\n            </Box>\r\n\r\n            <Typography variant=\"h4\">\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"p\" color=\"var(--extra-color-2)\">\r\n              ${tokenPriceInDollars}\r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\" className=\"textGlow\" style={{marginBottom: '20px'}}>\r\n              MASTER In Wallet\r\n            </Typography>\r\n\r\n            {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Box className=\"buttonWrap\">\r\n                  <Button\r\n                      disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                      variant=\"contained\"\r\n                      style={{ marginTop: '20px' }}\r\n                      onClick={approve}\r\n                  >\r\n                    Approve THEORY\r\n                  </Button>\r\n                </Box>\r\n            ) : (\r\n                <>\r\n                  <Box className=\"buttonWrap\">\r\n                    <Typography variant=\"body1\" component=\"p\" style={{marginBottom: '20px'}}>\r\n                      Minimum Lockup: 1 year\r\n                    </Typography>\r\n                    <Button variant=\"contained\" disabled={true} style={{marginRight: '15px'}}>\r\n                      Withdraw\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={onPresentDeposit}>\r\n                      Deposit\r\n                    </Button>\r\n                  </Box>\r\n                </>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n        {/*<Box mt={2} style={{ color: '#FFF' }}>*/}\r\n        {/*  {canWithdrawFromMasonry ? (*/}\r\n        {/*      ''*/}\r\n        {/*  ) : (*/}\r\n        {/*      <Card>*/}\r\n        {/*        <CardContent>*/}\r\n        {/*          <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>*/}\r\n        {/*          <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />*/}\r\n        {/*        </CardContent>*/}\r\n        {/*      </Card>*/}\r\n        {/*  )}*/}\r\n        {/*</Box>*/}\r\n      </>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchDungeonAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const [dpr, setDpr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance.getDungeonAPR());\r\n        setDpr(await tombFinance.getDungeonDPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, setDpr, tombFinance, slowRefresh]);\r\n\r\n  return {apr,dpr};\r\n};\r\n\r\nexport default useFetchDungeonAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalTVLOnDungeon = () => {\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalTVLInDungeon());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalTVLOnDungeon;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance.canUserUnstakeFromDungeon());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\n\ninterface ProgressCountdownProps {\n  base: Date;\n  deadline: Date;\n  hideBar?: boolean;\n  description: string;\n}\n\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\n  const percentage =\n    Date.now() >= deadline.getTime()\n      ? 100\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\n\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\n    const { days, hours, minutes, seconds } = countdownProps;\n    const h = String(days * 24 + hours);\n    const m = String(minutes);\n    const s = String(seconds);\n    return (\n      <StyledCountdown>\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\n      </StyledCountdown>\n    );\n  };\n  return (\n    // <Card>\n    <StyledCardContentInner>\n      {/* <StyledDesc>{description}</StyledDesc> */}\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\n      {hideBar ? (\n        ''\n      ) : (\n        <StyledProgressOuter>\n          <StyledProgress progress={percentage} />\n        </StyledProgressOuter>\n      )}\n    </StyledCardContentInner>\n    // </Card>\n  );\n};\n\nconst StyledCountdown = styled.p`\n  // font-size: 14px;\n  font-weight: 700;\n  // color: ${(props) => props.theme.color.grey[100]};\n  margin: 0 0 6px 0;\n`;\n\nconst StyledProgressOuter = styled.div`\n  width: 100%;\n  height: 8px;\n  border-radius: 3px;\n  background: ${(props) => props.theme.color.grey[700]};\n`;\n\nconst StyledProgress = styled.div<{ progress: number }>`\n  width: ${(props) => props.progress}%;\n  height: 100%;\n  border-radius: 3px;\n  background: ${(props) => props.theme.color.grey[100]};\n`;\n\nconst StyledCardContentInner = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\n`;\n\nexport default ProgressCountdown;\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnDungeon = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalStakedInDungeon());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnDungeon;\r\n","import React from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@mui/styles';\r\nimport useTreasury from \"../../hooks/useTreasury\";\r\nimport styled from 'styled-components';\r\n\r\nimport { Card, CardContent, Button, Typography, Grid, Paper } from '@mui/material';\r\nimport QuestionMarkIcon from '@mui/icons-material/QuestionMark';\r\nimport { ExpandMore as ChevronDownIcon } from '@mui/icons-material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useStakedBalanceOnDungeon from '../../hooks/useStakedBalanceOnDungeon';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchDungeonAPR from '../../hooks/useFetchDungeonAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useCashPriceInNextTWAP from '../../hooks/useCashPriceInNextTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalTVLOnDungeon from '../../hooks/useTotalTVLOnDungeon';\r\nimport useWithdrawCheck from '../../hooks/dungeon/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\n// import DungeonImage from '../../assets/img/dungeon.png';\r\nimport useTotalStakedOnDungeon from \"../../hooks/useTotalStakedOnDungeon\";\r\nimport useShareStats from \"../../hooks/usetShareStats\";\r\nimport usePriceOfMasterInTheory from \"../../hooks/usePriceOfMasterInTheory\"\r\n\r\nimport useModal from '../../hooks/useModal';\r\nimport Modal, { ModalProps } from '../../components/Modal';\r\nimport ModalActions from '../../components/ModalActions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  section: {\r\n    padding: '100px 0',\r\n    '@media (max-width: 767px)': {\r\n      padding: '40px 0'\r\n    }\r\n  },\r\n  button : {\r\n    width: '2em',\r\n    height: '2em',\r\n    fontSize: '14px',\r\n    padding: '0',\r\n    minWidth: 'auto'\r\n  },\r\n  boxed : {\r\n    overflow: 'initial',\r\n    '& .info-wrap': {\r\n      position: 'relative',\r\n      '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: '2px',\r\n        height: 'calc(100% - 20px)',\r\n        background: 'var(--extra-color-1)',\r\n        left: '50%',\r\n        bottom: '0',\r\n        transform: 'translateX(-50%)',\r\n        boxShadow: \"0px 0px 5px var(--extra-color-1)\",\r\n\r\n      }\r\n    }\r\n  },\r\n  boxClear: {\r\n    border: 'none',\r\n    boxShadow: 'none',\r\n    backdropFilter: 'none',\r\n    '& > *': {\r\n      padding: '0',\r\n      '&:last-child': {\r\n        paddingBottom: '0'\r\n      }\r\n    },\r\n  },\r\n  advanced: {\r\n    textAlign: 'center',\r\n    '& .advanced-toggle' : {\r\n      paddingTop: '20px',\r\n      paddingBottom: '20px',\r\n    },\r\n    '& .advanced-info' : {\r\n      display: 'none',\r\n      marginBottom: '20px'\r\n    },\r\n    '&.open' : {\r\n      '& .advanced-info' : {\r\n        display: 'block',\r\n      },\r\n      '& .advanced-toggle' : {\r\n        '& svg' : {\r\n          transform: 'rotate(180deg)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n}));\r\n\r\nconst StyledLink = styled.a`\r\n    font-weight: 700;\r\n    text-decoration: none;\r\n    color: var(--accent-light);\r\n  `;\r\n\r\nconst numberWithCommas = (x) => {\r\n  if(x === null || x === undefined) return x;\r\n  return Number(x).toLocaleString('en');\r\n}\r\n\r\nconst Dungeon = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  //const { onRedeem } = useRedeemOnDungeon();\r\n  const stakedBalance = useStakedBalanceOnDungeon();\r\n  const currentEpoch = useCurrentEpoch();\r\n  //const cashStat = useCashPriceInEstimatedTWAP();\r\n  //const nextCashStat = useCashPriceInNextTWAP();\r\n  const totalTVL = useTotalTVLOnDungeon();\r\n  const totalStaked = useTotalStakedOnDungeon();\r\n  const { apr, dpr } = useFetchDungeonAPR();\r\n  //const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  //const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n  const rebateStats = useTreasury()\r\n  const theoryStats = useShareStats();\r\n  const price = Number(getDisplayBalance(usePriceOfMasterInTheory()));\r\n\r\n  const [AdvancedOpen, setAdvancedOpen] = React.useState(false);\r\n\r\n  const handleAdvancedOpen = () => {\r\n    (AdvancedOpen === false) ? setAdvancedOpen(true) : setAdvancedOpen(false);\r\n  };\r\n\r\n  const handleRewardsClose = () => {\r\n    onCloseRewards();\r\n  };\r\n\r\n  const [onHandleRewards, onCloseRewards] = useModal(\r\n      <Modal text=\"Rewards\" onDismiss={handleRewardsClose}>\r\n        <Typography variant=\"h6\" color=\"#fff\" style={{fontWeight: '500'}}>\r\n          Every Round (often called an 'Epoch' in other DeFi protocols) you will recieve rewards based on the yearly and daily percentage rates if the GAME Price is above $1.01. Rewards are paid in GAME and LGAME (Locked GAME) tokens.<br /><br />\r\n\r\n          <strong>GAME</strong><br />Are GAME tokens which are available to you straight away.<br /><br />\r\n\r\n          <strong>LGAME</strong><br />Locked GAME Tokens are claimable and they unlock over 1 year from claiming them in a real-time linear schedule.<br /><br />\r\n\r\n          <strong>Unlocking LGAME</strong><br />You can view and unlock LGAME tokens which are available to be unlocked in 'my wallet'.<br /><br />\r\n\r\n          <strong>Round</strong><br />A round lasts for 6 hours.<br /><br />\r\n\r\n          <strong>TWAP</strong><br />Time-Weighted Average Price of GAME during the course of the previous Round.\r\n        </Typography>\r\n        <ModalActions>\r\n          <Button color=\"primary\" variant=\"contained\" onClick={handleRewardsClose} fullWidth>\r\n            Close\r\n          </Button>\r\n        </ModalActions>\r\n      </Modal>\r\n  );\r\n\r\n  const handleStatsClose = () => {\r\n    onCloseStats();\r\n  };\r\n\r\n  const [onHandleStats, onCloseStats] = useModal(\r\n      <Modal text=\"Advanced Stats\" onDismiss={handleStatsClose}>\r\n        <Typography variant=\"h6\" color=\"#fff\" style={{fontWeight: '500'}}>\r\n          <strong>LGAME %</strong><br />The percentage of your rewards that will be in Locked GAME Tokens. This percentage is based on the price of GAME for that Round.<br /><br />\r\n\r\n          If the price is below $1.0, no rewards will be given.<br />\r\n          If the price is $1.01, 100% of rewards will be in LGAME.<br />\r\n          If the price is $4.00 or greater, 100% of rewards will be in GAME.<br />\r\n          If the price is in between $1.01 and $4.00, the percentage of LGAME / GAME rewards will be on a linear sliding scale.<br /><br />\r\n\r\n          <strong>Next TWAP</strong><br />The projected Time-Weighted Average Price of GAME for the next Round.<br /><br />\r\n\r\n          <strong>Next APR</strong><br />The projected Annual Percentage Rate of rewards for the next Round.<br /><br />\r\n\r\n          <strong>Next DPR</strong><br />The projected Daily Percentage Rate of rewards for the next Round.<br /><br />\r\n\r\n          <strong>Next LGAME %</strong><br />The projected percentage of rewards that will be in Locked GAME for the next Round.<br /><br />\r\n\r\n          <strong>Total Value Locked</strong><br />The total USD value of THEORY tokens staked in the pool.<br /><br />\r\n\r\n          <strong>THEORY Staked</strong><br />The total number of THEORY tokens staked in the pool.<br /><br />\r\n\r\n          <strong>THEORY Staked %</strong><br />The percentage of all circulating THEORY and Locked THEORY tokens that are staked in the pool.\r\n        </Typography>\r\n        <ModalActions>\r\n          <Button color=\"primary\" variant=\"contained\" onClick={handleStatsClose} fullWidth>\r\n            Close\r\n          </Button>\r\n        </ModalActions>\r\n      </Modal>\r\n  );\r\n\r\n  return (\r\n      <Page>\r\n        {!!account ? (\r\n            <>\r\n              {/*<Alert variant=\"filled\" severity=\"warning\" style={{ marginTop: '50px' }}>*/}\r\n              {/*  This part of the site is under heavy construction. It's as safe to use as the rest of the site, but some features and visuals may be missing or later changed.*/}\r\n              {/*</Alert>*/}\r\n              <div className=\"section\">\r\n                <Typography align=\"center\" variant=\"h1\" className=\"textGlow pink\" style={{marginBottom: '20px'}}>\r\n                  Dungeon\r\n                </Typography>\r\n                <Typography align=\"center\" variant=\"h5\" component=\"p\" style={{marginBottom: '50px', fontWeight: '500'}}>\r\n                  MASTER gives you voting rights on our <StyledLink href=\"https://snapshot.org/#/gametheorytech.eth\">Snapshot</StyledLink>, as well as accumulation of fees and GAME rewards from said fees in the Theoretics.\r\n                </Typography>\r\n                {/*<Alert variant=\"filled\" severity=\"info\" style={{ marginBottom: '50px' }}>*/}\r\n                {/*  MASTER gives you voting rights on our <StyledLink href=\"https://snapshot.org/#/gametheorytech.eth\">Snapshot</StyledLink>, as well as accumulation of fees and GAME rewards from said fees in the Theoretics.*/}\r\n                {/*</Alert>*/}\r\n                {/*<Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>*/}\r\n                {/*  There is no withdraw fee for MASTER. However, there is a minimum lockup period of 365 days. Adding to your position resets your lock timer to 365 days after your last deposit. Claiming GAME after your MASTER is unlocked locks you up for 30 days.*/}\r\n                {/*</Alert>*/}\r\n                {/*<Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>*/}\r\n                {/*  MASTER staking and withdrawing works based on the withdraw timer.*/}\r\n                {/*  The price of MASTER you sell it at depends on the price you request the withdraw.*/}\r\n                {/*  Claimable GAME and THEORY will be stored here during the last 30 minutes of every {rebateStats.currentWithdrawEpochs} {rebateStats.currentWithdrawEpochs == 1 ? \"epoch\" : \"epochs\"}.*/}\r\n                {/*  You also get MASTER immediately when you stake, but you don't start earning on it until this happens. You cannot withdraw with a pending stake, and you cannot stake with a pending withdraw.*/}\r\n                {/*</Alert>*/}\r\n                {/*<Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '50px' }}>*/}\r\n                {/*  Selling all your MASTER also claims your rewards. The amount of rewards locked increases the closer to under-peg GAME is. At 1.01 or lower, it is 95%. At 4.0 or higher, it is 0%. You get your rewards after the epoch is over if the TWAP (time-weighted average price) is greater or equal to 1.01.{rebateStats.outOfBootstrap ? \"\" : \" Also, the bootstrap phase is ongoing for \" + rebateStats.bootstrapEpochsLeft + \" more epochs, so GAME is being printed regardless of the TWAP right now.\"} You can find your locked LGAME rewards using the My Wallet button. View the docs for more info.*/}\r\n                {/*</Alert>*/}\r\n                <Grid container justifyContent=\"center\" spacing={3} style={{marginBottom: '50px'}}>\r\n\r\n                  <Grid item xs={12} md={3}>\r\n                    <Card className={classes.boxClear}>\r\n                      <CardContent align=\"center\">\r\n                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">Current Round</Typography>\r\n                        <Typography variant=\"h4\">{Number(currentEpoch)}</Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6} md={3}>\r\n                    <Card className={classes.boxClear}>\r\n                      <CardContent align=\"center\">\r\n                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                          GAME Price<small> (TWAP)</small>\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">{rebateStats.tombPrice.toFixed(4)} DAI</Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6} md={3}>\r\n                    <Card className={classes.boxClear}>\r\n                      <CardContent align=\"center\">\r\n                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">Next Round</Typography>\r\n                        <Typography variant=\"h4\">\r\n                          <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Round\" />\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid container justifyContent=\"center\" spacing={3} style={{marginBottom: '30px'}}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <div>\r\n                      <Card className={classes.boxed}>\r\n                        <CardContent align=\"center\">\r\n                          <Typography variant='h4' className=\"kallisto\" style={{marginBottom: '20px'}}>\r\n                            Rewards\r\n                            <Button variant=\"contained\" className={classes.button} aria-label=\"More info\" style={{ marginLeft: '10px' }} onClick={onHandleRewards}>\r\n                              <QuestionMarkIcon fontSize='inherit' />\r\n                            </Button>\r\n                          </Typography>\r\n                          <div className='info-wrap'>\r\n                            <Grid container justify=\"center\" spacing={3}>\r\n\r\n                              <Grid item xs={6}>\r\n                                <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">GAME Yearly Awards</Typography>\r\n                              </Grid>\r\n\r\n                              <Grid item xs={6}>\r\n                                <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*(100.0-rebateStats.rewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">GAME Daily Awards</Typography>\r\n                              </Grid>\r\n\r\n                              <Grid item xs={6}>\r\n                                <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (apr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">LGAME Yearly Awards</Typography>\r\n                              </Grid>\r\n\r\n                              <Grid item xs={6}>\r\n                                <Typography variant=\"h4\" color=\"var(--extra-color-2)\">{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPrice >= 1.01) ? (dpr*rebateStats.rewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}%</Typography>\r\n                                <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">LGAME Daily Awards</Typography>\r\n                              </Grid>\r\n\r\n                            </Grid>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </div>\r\n                    <div className={`${classes.advanced} ${AdvancedOpen ? 'open' : ''}`}>\r\n                      <div className='advanced-toggle' onClick={handleAdvancedOpen}>\r\n                        <Typography align=\"center\" style={{display: 'inline-block',cursor: 'pointer',fontWeight: '700'}} className='textGlow pink'>\r\n                          <span style={{verticalAlign: 'middle'}}>{AdvancedOpen ? \"Hide Advanced\" : \"Show Advanced\"}</span>\r\n                          <ChevronDownIcon style={{verticalAlign: 'middle'}} />\r\n                        </Typography>\r\n                      </div>\r\n                      <div className=\"advanced-info\">\r\n                        <Card>\r\n                          <CardContent align=\"center\">\r\n                            <Typography variant='h4' className=\"kallisto\" style={{marginBottom: '10px'}}>\r\n                              Advanced Stats\r\n                              <Button variant=\"contained\" className={classes.button} aria-label=\"Advanced stats info\" style={{ marginLeft: '10px' }} onClick={onHandleStats}>\r\n                                <QuestionMarkIcon fontSize='inherit' />\r\n                              </Button>\r\n                            </Typography>\r\n                            <Grid container>\r\n                              <TableContainer component={Paper}>\r\n                                <Table aria-label=\"advanced info table\">\r\n                                  <TableBody>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          LGAME %\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {(rebateStats.rewardsLocked).toFixed(2)}%\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Next TWAP\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {rebateStats.tombPriceUpdated.toFixed(4)} DAI\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Next APR\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\" || '0.00')}% GAME<br />{numberWithCommas((!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (apr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\" || '0.00')}% LGAME\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Next DPR\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*(100.0-rebateStats.nextRewardsLocked)/100.0).toFixed(2) : \"0.00\"}% GAME<br />{(!rebateStats.outOfBootstrap || rebateStats.tombPriceUpdated >= 1.01) ? (dpr*rebateStats.nextRewardsLocked/100.0).toFixed(2) : \"0.00\"}% LGAME\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Next LGAME %\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {(rebateStats.nextRewardsLocked).toFixed(2)}%\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          MASTER Price\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {numberWithCommas(price.toFixed(4)).toString()} (${numberWithCommas((price*theoryStats?.priceInDollars).toFixed(2)).toString()})\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Total Value Locked\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          ${numberWithCommas(totalTVL.toFixed(2) || '0.00')}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                    <TableRow>\r\n                                      <TableCell align=\"right\">\r\n                                        <Typography variant=\"body1\" component=\"p\" className=\"textGlow\">\r\n                                          Total Supply\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell>\r\n                                        <Typography>\r\n                                          {numberWithCommas(getDisplayBalance(totalStaked))}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n\r\n                                  </TableBody>\r\n                                </Table>\r\n                              </TableContainer>\r\n                            </Grid>\r\n                          </CardContent>\r\n                        </Card>\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3} justifyContent=\"center\">\r\n                  <Grid item xs={12} md={4}>\r\n                    <Harvest rewardsLocked={rebateStats.rewardsLocked} classname=\"boxed\" />\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Stake classname=\"boxed\" />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n              </div>\r\n            </>\r\n        ) : (\r\n            <UnlockWallet />\r\n        )}\r\n      </Page>\r\n  );\r\n};\r\n\r\nexport default Dungeon;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance?.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n"],"sourceRoot":""}