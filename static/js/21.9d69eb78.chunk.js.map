{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","accounts","account","provider","this","fortmatic","m","Fortmatic","e","deactivate"],"mappings":"oKAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ,kB,kHACA,IAAMG,EAAkD,CACtD,EADsD,UAEtD,EAFsD,UAGtD,EAHsD,UAItD,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,WAAQC,Y,OACVC,wBAAuCD,EAAjD,8BACA,cAAM,CAAER,kBAAmB,CAACQ,MAA5B,MAEA,SACA,Y,IAXJ,G,EAAA,G,6EAAA,mD,wCAuB0B,yCAGd,mBAAgCE,EAAhC,OAHc,eAAhBC,GAKN,MAAO,CAAEC,SAAU,YAAZ,cAA0CJ,QAAS,EAAnD,QAAiEG,e,EAbnEE,K,iBAAA,EAAKC,U,uBACgB,0CAAyB,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAA1B,eAAlBC,GACN,YAAiB,IAAIA,EACnB,EADe,OAEf,mBAAsB,eAAtB,EAAuDX,EAAiB,EAF1E,a,mDAjBN,MAAAY,GAAA,sBAAAA,KAAA,6BAgCI,uBAAOJ,KAAA,UAAP,eAhCJ,MAAAI,GAAA,sBAAAA,KAAA,4BAoCI,uBAAOJ,KAAP,SApCJ,MAAAI,GAAA,sBAAAA,KAAA,4BAwCI,uBAAOJ,KAAA,mDAGC,mBAAgCH,EAAhC,OA3CZ,MAAAO,GAAA,sBAAAA,KAAA,aA8CSC,aA9CT,uB,MAiDUL,K,uBAAA,4CACN,sBAlDJ,MAAAI,GAAA,sBAAAA,KAAA","file":"static/js/21.9d69eb78.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}