{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","TorusConnector","chainId","initOptions","constructorOptions","loginOptions","this","accounts","account","provider","torus","m","Torus","e","method"],"mappings":"oKAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ,kB,yLAOaG,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,uBAAcA,EAAA,K,IAAIC,8BAAqBA,EAAA,K,IAAIC,wBAAeA,EAAA,K,OAC/E,cAAM,CAAET,kBAAmB,CAACM,MAA5B,MAEA,UACA,gBACA,uBACA,iB,IAdJ,G,EAAA,G,sEAAA,mD,MAkBSI,K,oCAMiB,cAAiB,EAAjB,oBAAyC,mBAAgCC,EAAhC,OAAzC,eAAhBC,GAEN,MAAO,CAAEC,SAAU,QAAZ,SAAiCD,e,iBARnC,EAAKE,M,uBACY,4DAAsC,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAAvC,eAAdC,G,OACN,QAAa,IAAIA,EAAM,EAAvB,oB,gBACM,aAAgB,EAAhB,sC,mDArBZ,MAAAC,GAAA,sBAAAA,KAAA,6BA8BI,uBAAOP,KAAA,MAAP,UA9BJ,MAAAO,GAAA,sBAAAA,KAAA,4BAkCI,uBAAOP,KAAP,SAlCJ,MAAAO,GAAA,sBAAAA,KAAA,4BAsCI,uBAAOP,KAAA,uBAA4B,CAAEQ,OAAQ,iBAAtC,MAA6D,mBAAgCP,EAAhC,OAtCxE,MAAAM,GAAA,sBAAAA,KAAA,wB,0BAAA,uB,MA4CUP,K,uBAAA,oCACN,eACA,sBA9CJ,MAAAO,GAAA,sBAAAA,KAAA,G,QAAA","file":"static/js/21.b99055ce.chunk.js","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.torus = undefined\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}