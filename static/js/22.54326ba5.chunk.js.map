{"version":3,"sources":["components/TokenInput/TokenInput.tsx","components/PageHeader/PageHeader.tsx","hooks/useBondStats.ts","views/Pit/components/ExchangeModal.tsx","hooks/useCatchError.ts","views/Pit/components/ExchangeCard.tsx","hooks/useCashPriceInLastTWAP.ts","views/Pit/components/ExchangeStat.tsx","hooks/useBondsPurchasable.ts","tomb-finance/constants.ts","views/Pit/Pit.tsx"],"names":["StyledTokenInput","styled","div","StyledSpacer","props","theme","spacing","StyledTokenAdornmentWrapper","StyledMaxText","color","grey","TokenInput","max","symbol","onChange","onSelectMax","value","toLocaleString","Input","endAdornment","Button","size","variant","onClick","placeholder","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","PageHeader","icon","subtitle","title","useBondStats","useState","stat","setStat","slowRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getBondStat","console","error","fetchBondPrice","ExchangeModal","description","onConfirm","onDismiss","action","tokenName","val","setVal","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","Modal","ModalTitle","text","Label","ModalActions","DEFAULT_ERROR_MSG","useCatchError","addPopup","useAddPopup","promise","message","catch","err","includes","stack","StyledCardTitle","StyledCardIcon","StyledExchanger","StyledExchangeArrow","StyledToken","StyledCardActions","StyledDesc","span","StyledCardContentInner","ExchangeCard","fromToken","fromTokenName","toToken","toTokenName","priceDesc","onExchange","disabled","disabledDescription","undefined","catchError","Treasury","contracts","useApprove","address","approveStatus","approve","balance","useTokenBalance","useModal","gt","onPresent","Card","CardContent","style","background","TokenSymbol","faArrowRight","ApprovalState","APPROVED","PENDING","UNKNOWN","useCashPriceInLastTWAP","BigNumber","from","price","setPrice","fetchCashPrice","getTombPriceInLastTWAP","refreshInterval","setInterval","config","clearInterval","ExchangeStat","useBondsPurchasable","setBalance","getBondsPurchasable","fetchBondsPurchasable","DECIMALS_18","pow","BOND_REDEEM_PRICE_BN","mul","BackgroundImage","createGlobalStyle","StyledBond","StyledCardWrapper","StyledStatsWrapper","Pit","path","useRouteMatch","account","useWallet","addTransaction","useTransactionAdder","bondStat","cashPrice","bondsPurchasable","rebateStats","useTreasury","bondBalance","HODL","handleBuyBonds","amount","buyBonds","tx","summary","Number","toFixed","handleRedeemBonds","redeemBonds","isBondRedeemable","isBondPurchasable","tokenInFtm","Page","Typography","align","gutterBottom","exact","TOMB","getDisplayBalance","Spacer","tombAvailable","maxBondSell","bondBonus","eq","maxBondSellBN","UnlockWallet"],"mappings":"yMA4CMA,EAAmBC,IAAOC,IAAV,0BAEhBC,EAAeF,IAAOC,IAAV,6CACP,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAGpCC,EAA8BN,IAAOC,IAAV,sEAK3BM,EAAgBP,IAAOC,IAAV,6KAER,SAACE,GAAD,OAAWA,EAAMC,MAAMI,MAAMC,KAAK,QAQ9BC,EArD+B,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,IAAKC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACnF,OACE,eAAChB,EAAD,WACE,eAACQ,EAAD,WACGI,EAAIK,iBADP,IAC0BJ,EAD1B,gBAGA,cAACK,EAAA,EAAD,CACEC,aACE,eAACZ,EAAD,WAEE,cAACJ,EAAD,IACA,8BACE,cAACiB,EAAA,EAAD,CAAQC,KAAK,QAAQZ,MAAM,UAAUa,QAAQ,YAAYC,QAASR,EAAlE,sBAMND,SAAUA,EACVU,YAAY,IACZR,MAAOA,S,6GCbTS,EAAmBxB,IAAOC,IAAV,iOAIF,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAClC,SAACF,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAO1CoB,EAAczB,IAAO0B,GAAV,iHACN,SAACvB,GAAD,OAAWA,EAAMC,MAAMI,MAAMC,KAAK,QAOvCkB,EAAiB3B,IAAO4B,GAAV,wIACT,SAACzB,GAAD,OAAWA,EAAMC,MAAMI,MAAMC,KAAK,QAQ9BoB,EAvC+B,SAAC,GAA8B,EAA5BC,KAA6B,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC/D,OACE,eAACR,EAAD,WAEE,cAACC,EAAD,UAAcO,IACd,cAACL,EAAD,UAAiBI,S,+FCWRE,IApBM,WACnB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACQC,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIN,EAFJ,SAEkBG,EAAYI,cAF9B,kFAKIC,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,KACC,CAACV,EAASG,EAAaF,IAEnBF,I,qVCkCMY,EArCqC,SAAC,GAQ9C,IAPLpC,EAOI,EAPJA,IACAqB,EAMI,EANJA,MACAgB,EAKI,EALJA,YACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,EAAsBlB,mBAAS,IAA/B,mBAAOmB,EAAP,KAAYC,EAAZ,KACMC,EAAcC,mBAAQ,kBAAMC,YAAsB9C,KAAM,CAACA,IAEzD+C,EAAeC,uBAAY,SAACC,GAAD,OAA0CN,EAAOM,EAAEC,cAAc9C,SAAQ,CAACuC,IAErGQ,EAAkBH,uBAAY,WAClCL,EAAOC,KACN,CAACA,EAAaD,IAEjB,OACE,eAACS,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAMjC,IAClB,cAACtB,EAAA,EAAD,CACEK,MAAOsC,EACPvC,YAAagD,EACbjD,SAAU6C,EACV/C,IAAK4C,EACL3C,OAAQwC,IAEV,cAACc,EAAA,EAAD,CAAOD,KAAMjB,IACb,eAACmB,EAAA,EAAD,WACE,cAAC,IAAD,CAAQF,KAAK,SAAS5C,QAAQ,YAAYC,QAAS4B,IACnD,cAAC,IAAD,CAAQe,KAAMd,EAAQ7B,QAAS,kBAAM2B,EAAUI,a,6BC/CjDe,EAAoB,gCAoBXC,I,8BAAAA,EAlBf,WACE,IAAMC,EAAWC,cAEjB,OAAOZ,uBACL,SAACa,GAAwD,IAAjCC,EAAgC,uDAAtBL,EAChCI,EAAQE,OAAM,SAACC,GACTA,EAAIF,QAAQG,SAAS,iBAIzBhC,QAAQC,MAAR,8BAAqC8B,EAAIE,QACzCP,EAAS,CAAEzB,MAAO,CAAE4B,UAASI,MAAOF,EAAIE,eAG5C,CAACP,KC2FCQ,EAAkB9E,IAAOC,IAAV,kLAOL,SAACE,GAAD,OAAYA,EAAMC,MAAMC,QAAQ,MAG1C0E,EAAiB/E,IAAOC,IAAV,8MACE,SAACE,GAAD,OAAWA,EAAMC,MAAMI,MAAMC,KAAK,QAOrC,SAACN,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAG5C2E,GAAkBhF,IAAOC,IAAV,+FAGF,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAG5C4E,GAAsBjF,IAAOC,IAAV,2HAEP,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAC9B,SAACF,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAC9B,SAACF,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAG7C6E,GAAclF,IAAOC,IAAV,sHAOXkF,GAAoBnF,IAAOC,IAAV,gHAGP,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAIzC+E,GAAapF,IAAOqF,KAAV,0BAEVC,GAAyBtF,IAAOC,IAAV,gJAQbsF,GAtImC,SAAC,GAW5C,IAVLpC,EAUI,EAVJA,OACAqC,EASI,EATJA,UACAC,EAQI,EARJA,cACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,YACAC,EAKI,EALJA,UACAC,EAII,EAJJA,WAII,IAHJC,gBAGI,SAFJC,EAEI,EAFJA,oBAEI,IADJpF,WACI,WADEqF,EACF,EACEC,EAAa5B,IAEJ6B,EACX1D,cADF2D,UAAaD,SAEf,EAAiCE,YAAWZ,EAAWU,EAASG,SAAhE,mBAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAAUC,YAAgBjB,GAChC,EAA+BkB,YAC7B,cAAC,EAAD,CACE1E,MAAOmB,EACPH,YAAa4C,EACbjF,SAAYqF,GAAPrF,EAAmB6F,EAAWA,EAAQG,GAAGhG,GAAOA,EAAM6F,EAC3DvD,UAAW,SAAClC,GACV8E,EAAW9E,GACXmC,KAEFC,OAAQA,EACRC,UAAWqC,KAVf,mBAAOmB,EAAP,KAAkB1D,EAAlB,KAaA,OACE,cAAC2D,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACxB,GAAD,WACE,cAACR,EAAD,oBAAqB3B,EAArB,YAA+BwC,KAC/B,eAACX,GAAD,WACE,eAACE,GAAD,WACE,cAACH,EAAD,CAAgBgC,MAAO,CAAEC,WAAY,eAArC,SACE,cAACC,EAAA,EAAD,CAAarG,OAAQ4E,EAAU5E,OAAQQ,KAAM,OAE/C,cAAC8C,EAAA,EAAD,CAAOD,KAAMwB,EAAepE,QAAQ,cAEtC,cAAC4D,GAAD,UACE,cAAC,kBAAD,CAAiBnD,KAAMoF,mBAEzB,eAAChC,GAAD,WACE,cAACH,EAAD,CAAgBgC,MAAO,CAAEC,WAAY,eAArC,SACE,cAACC,EAAA,EAAD,CAAarG,OAAQ8E,EAAQ9E,OAAQQ,KAAM,OAE7C,cAAC8C,EAAA,EAAD,CAAOD,KAAM0B,EAAatE,QAAQ,iBAGtC,cAAC+D,GAAD,UAAaQ,IACb,cAACT,GAAD,UACGmB,IAAkBa,IAAcC,UAAatB,EAU5C,cAAC3E,EAAA,EAAD,CAAQX,MAAM,UAAUa,QAAQ,YAAYC,QAASsF,EAAWd,SAAUA,EAA1E,SACGC,GAAuB5C,IAV1B,cAAChC,EAAA,EAAD,CACEX,MAAM,UACNa,QAAQ,YACRyE,SAAUQ,IAAkBa,IAAcE,SAAWf,IAAkBa,IAAcG,QACrFhG,QAAS,kBAAM2E,EAAWM,IAAD,4BAAiCd,KAJ5D,2BAMcA,e,wCC1Eb8B,GAjBgB,WAC7B,MAA0BrF,mBAAoBsF,KAAUC,KAAK,IAA7D,mBAAOC,EAAP,KAAcC,EAAd,KACMpF,EAAcC,cAEdoF,EAAiBjE,sBAAW,sBAAC,sBAAAjB,EAAA,kEACjCiF,EADiC,SAClBpF,EAAYsF,yBADM,6EAEhC,CAACtF,IAQJ,OANAE,qBAAU,WACRmF,IAAiBlD,OAAM,SAACC,GAAD,OAAS/B,QAAQC,MAAR,sCAA6C8B,EAAIE,WACjF,IAAMiD,EAAkBC,YAAYH,EAAgBI,KAAOF,iBAC3D,OAAO,kBAAMG,cAAcH,MAC1B,CAACH,EAAUpF,EAAaqF,IAEpBF,G,WCGH5C,GAAkB9E,IAAOC,IAAV,8FAGF,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAG5C+E,GAAapF,IAAOqF,KAAV,oEACH,SAAClF,GAAD,OAAWA,EAAMC,MAAMI,MAAMC,KAAK,QAIzC6E,GAAyBtF,IAAOC,IAAV,iKAMf,SAACE,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAG7B6H,GA/BmC,SAAC,GAAuC,IAArC9E,EAAoC,EAApCA,UAAWJ,EAAyB,EAAzBA,YAAa0E,EAAY,EAAZA,MAC3E,OACE,cAACb,EAAA,EAAD,UACE,eAAC,GAAD,WACE,cAAC,GAAD,iCAAwBzD,EAAxB,cAAuCsE,EAAvC,UACA,cAAC,GAAD,UAAa1E,UCSNmF,GAnBa,WAC1B,MAA8BjG,mBAASsF,KAAUC,KAAK,IAAtD,mBAAOjB,EAAP,KAAgB4B,EAAhB,KACM7F,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEQ0F,EAFR,SAEyB7F,EAAY8F,sBAFrC,kFAKQzF,QAAQC,MAAR,MALR,0DADc,uBAAC,WAAD,wBASdyF,KACC,CAACF,EAAY7F,IAETiE,GCpBI+B,GAAcf,KAAUC,KAAK,IAAIe,IAAI,IAGrCC,GAAuBF,GAAYG,IAAI,KAAKzI,IAAI,K,+BCoBvD0I,GAAkBC,YAAH,2rBAgHfC,GAAa7I,IAAOC,IAAV,yLAUV6I,GAAoB9I,IAAOC,IAAV,sKAUjB8I,GAAqB/I,IAAOC,IAAV,kNAaT+I,GApIO,WACpB,IAAQC,EAASC,cAATD,KACAE,EAAYC,cAAZD,QACF5G,EAAcC,cACd6G,EAAiBC,eACjBC,EAAWtH,eACXuH,EAAYjC,KACZkC,EAAmBtB,KACnBuB,EAAcC,eACXtH,EAAgBC,eAAhBD,YAEHuH,EAAcnD,YAAe,OAAClE,QAAD,IAACA,OAAD,EAACA,EAAasH,MAE3CC,EAAiBnG,sBAAW,uCAChC,WAAOoG,GAAP,eAAArH,EAAA,sEACmBH,EAAYyH,SAASD,GADxC,OACQE,EADR,OAEEZ,EAAeY,EAAI,CACjBC,QAAQ,OAAD,OAASC,OAAOJ,GAAQK,QAAQ,GAAhC,sBAAgDL,EAAhD,WAHX,2CADgC,sDAOhC,CAACxH,EAAa8G,IAGVgB,EAAoB1G,sBAAW,uCACnC,WAAOoG,GAAP,eAAArH,EAAA,sEACmBH,EAAY+H,YAAYP,GAD3C,OACQE,EADR,OAEEZ,EAAeY,EAAI,CAAEC,QAAQ,UAAD,OAAYH,EAAZ,WAF9B,2CADmC,sDAKnC,CAACxH,EAAa8G,IAEVkB,EAAmB/G,mBAAQ,kBAAMgG,EAAU7C,GAAG8B,MAAuB,CAACe,EAAWnH,IACjFmI,EAAoBhH,mBAAQ,kBAAM2G,OAAM,OAACZ,QAAD,IAACA,OAAD,EAACA,EAAUkB,YAAc,OAAM,CAAClB,EAAUlH,IAExF,OACE,cAAC,IAAD,UACE,eAACqI,EAAA,EAAD,WACE,cAAC/B,GAAD,IACGQ,EACD,qCACE,cAACwB,GAAA,EAAD,CAAYnK,MAAM,cAAcoK,MAAM,SAASvJ,QAAQ,KAAKwJ,cAAY,EAAxE,mBAGA,cAAC,IAAD,CAAOC,OAAK,EAAC7B,KAAMA,EAAnB,SACE,cAACpH,EAAA,EAAD,CAAYC,KAAM,eAAMC,SAAS,oCAEnC,eAAC8G,GAAD,WACE,cAACC,GAAD,UACE,cAAC,GAAD,CACE3F,OAAO,WACPqC,UAAWjD,EAAYwI,KACvBtF,cAAc,OACdC,QAASnD,EAAYsH,KACrBlE,YAAY,OACZC,UACG4E,EAEGQ,YAAkBvB,EAAkB,GAAI,GAAK,gCAD7C,mBAGN5D,WAAYiE,EACZhE,UAAWyD,GAAYgB,MAG3B,eAACxB,GAAD,WACE,cAAC,GAAD,CACI3F,UAAU,OACVJ,YAAY,oBACZ0E,MAAOsD,YAAkBxB,EAAW,GAAI,KAE5C,cAACyB,GAAA,EAAD,CAAQ7J,KAAK,OACb,cAAC,GAAD,CACEgC,UAAU,OACVJ,YAAY,+CACZ0E,MAAOyC,OAAM,OAACZ,QAAD,IAACA,OAAD,EAACA,EAAUkB,YAAYL,QAAQ,IAAM,SAGtD,cAACtB,GAAD,UACE,cAAC,GAAD,CACE3F,OAAO,SACPqC,UAAWjD,EAAYsH,KACvBpE,cAAc,OACdC,QAASnD,EAAYwI,KACrBpF,YAAY,OACZC,UAAW,UAAGoF,YAAkBpB,GAArB,+BAAiEW,GAAoB,IAAD,OAAMb,EAAYwB,cAAcd,QAAQ,GAAxC,6CAA+EV,EAAYyB,YAAYf,QAAQ,GAA/G,0CAA2K,IAAxBV,EAAY0B,UAAkB,KAAKhB,QAAQ,GAA9L,MAAuM,IACtSvE,WAAYwE,EACZvE,UAAWyD,GAAYK,EAAYyB,GAAG,IAAM3B,EAAY4B,cAAcD,GAAG,KAAOd,EAChFxE,oBAAsBwE,EAAoE,KAArE,8BDvHN,KCuHM,QACrB5J,IAAK+I,EAAY4B,wBAMzB,cAACC,EAAA,EAAD","file":"static/js/22.54326ba5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@mui/material';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 610px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[100]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useBondStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchBondPrice() {\r\n      try {\r\n        setStat(await tombFinance.getBondStat());\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchBondPrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useBondStats;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\nimport Button from '../../../components/Button';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\nimport Label from '../../../components/Label';\r\n\r\ninterface ExchangeModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  title: string;\r\n  description: string;\r\n  action: string;\r\n  tokenName: string;\r\n}\r\n\r\nconst ExchangeModal: React.FC<ExchangeModalProps> = ({\r\n  max,\r\n  title,\r\n  description,\r\n  onConfirm,\r\n  onDismiss,\r\n  action,\r\n  tokenName,\r\n}) => {\r\n  const [val, setVal] = useState('');\r\n  const fullBalance = useMemo(() => getFullDisplayBalance(max), [max]);\r\n\r\n  const handleChange = useCallback((e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value), [setVal]);\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={title} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <Label text={description} />\r\n      <ModalActions>\r\n        <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text={action} onClick={() => onConfirm(val)} />\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ExchangeModal;\r\n","import { useCallback } from 'react';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nconst DEFAULT_ERROR_MSG = 'Unexpected error is occurred.';\r\n\r\nfunction useCatchError(): (promise: Promise<any>, message?: string) => void {\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<any>, message = DEFAULT_ERROR_MSG) => {\r\n      promise.catch((err) => {\r\n        if (err.message.includes('User denied')) {\r\n          // User denied transaction signature on MetaMask.\r\n          return;\r\n        }\r\n        console.error(`Uncaught exception: ${err.stack}`);\r\n        addPopup({ error: { message, stack: err.stack } });\r\n      });\r\n    },\r\n    [addPopup],\r\n  );\r\n}\r\n\r\nexport default useCatchError;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card } from '@mui/material';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\nimport CardContent from '../../../components/CardContent';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport Label from '../../../components/Label';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome/index';\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons/index';\r\nimport useModal from '../../../hooks/useModal';\r\nimport ExchangeModal from './ExchangeModal';\r\nimport ERC20 from '../../../tomb-finance/ERC20';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useCatchError from '../../../hooks/useCatchError';\r\nimport {BigNumber} from \"ethers\";\r\n\r\ninterface ExchangeCardProps {\r\n  action: string;\r\n  fromToken: ERC20;\r\n  fromTokenName: string;\r\n  toToken: ERC20;\r\n  toTokenName: string;\r\n  priceDesc: string;\r\n  onExchange: (amount: string) => void;\r\n  disabled?: boolean;\r\n  disabledDescription?: string;\r\n  max?: BigNumber;\r\n}\r\n\r\nconst ExchangeCard: React.FC<ExchangeCardProps> = ({\r\n  action,\r\n  fromToken,\r\n  fromTokenName,\r\n  toToken,\r\n  toTokenName,\r\n  priceDesc,\r\n  onExchange,\r\n  disabled = false,\r\n  disabledDescription,\r\n  max = undefined\r\n}) => {\r\n  const catchError = useCatchError();\r\n  const {\r\n    contracts: { Treasury },\r\n  } = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(fromToken, Treasury.address);\r\n  const balance = useTokenBalance(fromToken);\r\n  const [onPresent, onDismiss] = useModal(\r\n    <ExchangeModal\r\n      title={action}\r\n      description={priceDesc}\r\n      max={max == undefined ? balance : (balance.gt(max) ? max : balance)}\r\n      onConfirm={(value) => {\r\n        onExchange(value);\r\n        onDismiss();\r\n      }}\r\n      action={action}\r\n      tokenName={fromTokenName}\r\n    />,\r\n  );\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardTitle>{`${action} ${toTokenName}`}</StyledCardTitle>\r\n          <StyledExchanger>\r\n            <StyledToken>\r\n              <StyledCardIcon style={{ background: 'transparent' }}>\r\n                <TokenSymbol symbol={fromToken.symbol} size={54}/>\r\n              </StyledCardIcon>\r\n              <Label text={fromTokenName} variant=\"normal\" />\r\n            </StyledToken>\r\n            <StyledExchangeArrow>\r\n              <FontAwesomeIcon icon={faArrowRight} />\r\n            </StyledExchangeArrow>\r\n            <StyledToken>\r\n              <StyledCardIcon style={{ background: 'transparent' }}>\r\n                <TokenSymbol symbol={toToken.symbol} size={54} />\r\n              </StyledCardIcon>\r\n              <Label text={toTokenName} variant=\"normal\" />\r\n            </StyledToken>\r\n          </StyledExchanger>\r\n          <StyledDesc>{priceDesc}</StyledDesc>\r\n          <StyledCardActions>\r\n            {approveStatus !== ApprovalState.APPROVED && !disabled ? (\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN}\r\n                onClick={() => catchError(approve(), `Unable to approve ${fromTokenName}`)}\r\n              >\r\n                {`Approve ${fromTokenName}`}\r\n              </Button>\r\n            ) : (\r\n              <Button color=\"primary\" variant=\"contained\" onClick={onPresent} disabled={disabled}>\r\n                {disabledDescription || action}\r\n              </Button>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  height: 64px;\r\n  justify-content: center;\r\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: ${(props) => props.theme.color.grey[900]};\r\n  width: 72px;\r\n  height: 72px;\r\n  border-radius: 36px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\r\n`;\r\n\r\nconst StyledExchanger = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\r\n`;\r\n\r\nconst StyledExchangeArrow = styled.div`\r\n  font-size: 20px;\r\n  padding-left: ${(props) => props.theme.spacing[3]}px;\r\n  padding-right: ${(props) => props.theme.spacing[3]}px;\r\n  padding-bottom: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledToken = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[3]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledDesc = styled.span``;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default ExchangeCard;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport { BigNumber } from 'ethers';\r\n\r\nconst useCashPriceInLastTWAP = () => {\r\n  const [price, setPrice] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setPrice(await tombFinance.getTombPriceInLastTWAP());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setPrice, tombFinance, fetchCashPrice]);\r\n\r\n  return price;\r\n};\r\n\r\nexport default useCashPriceInLastTWAP;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Card } from '@mui/material';\r\n\r\ninterface ExchangeStatProps {\r\n  tokenName: string;\r\n  description: string;\r\n  price: string;\r\n}\r\n\r\nconst ExchangeStat: React.FC<ExchangeStatProps> = ({ tokenName, description, price }) => {\r\n  return (\r\n    <Card>\r\n      <StyledCardContentInner>\r\n        <StyledCardTitle>{`💰 ${tokenName} = ${price} DAI`}</StyledCardTitle>\r\n        <StyledDesc>{description}</StyledDesc>\r\n      </StyledCardContentInner>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\r\n`;\r\n\r\nconst StyledDesc = styled.span`\r\n  //color: ${(props) => props.theme.color.grey[300]};\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding: ${(props) => props.theme.spacing[2]}px;\r\n`;\r\n\r\nexport default ExchangeStat;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useBondsPurchasable = () => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchBondsPurchasable() {\r\n        try {\r\n            setBalance(await tombFinance.getBondsPurchasable());\r\n        }\r\n        catch(err) {\r\n            console.error(err);\r\n        }\r\n      }\r\n    fetchBondsPurchasable();\r\n  }, [setBalance, tombFinance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useBondsPurchasable;\r\n","import { BigNumber } from 'ethers';\r\n\r\nexport const DECIMALS_18 = BigNumber.from(10).pow(18);\r\n\r\nexport const BOND_REDEEM_PRICE = 1.01;\r\nexport const BOND_REDEEM_PRICE_BN = DECIMALS_18.mul(101).div(100);\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport Page from '../../components/Page';\r\nimport PitImage from '../../assets/img/pit.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport ExchangeCard from './components/ExchangeCard';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport useBondStats from '../../hooks/useBondStats';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\r\nimport { useTransactionAdder } from '../../state/transactions/hooks';\r\nimport ExchangeStat from './components/ExchangeStat';\r\nimport useTokenBalance from '../../hooks/useTokenBalance';\r\nimport useBondsPurchasable from '../../hooks/useBondsPurchasable';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport { BOND_REDEEM_PRICE, BOND_REDEEM_PRICE_BN } from '../../tomb-finance/constants';\r\nimport { Typography } from '@mui/material';\r\nimport useRefresh from \"../../hooks/useRefresh\";\r\nimport useTreasury from \"../../hooks/useTreasury\";\r\n\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background-color: var(--black);\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='32' viewBox='0 0 16 32'%3E%3Cg fill='%231D1E1F' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M0 24h4v2H0v-2zm0 4h6v2H0v-2zm0-8h2v2H0v-2zM0 0h4v2H0V0zm0 4h2v2H0V4zm16 20h-6v2h6v-2zm0 4H8v2h8v-2zm0-8h-4v2h4v-2zm0-20h-6v2h6V0zm0 4h-4v2h4V4zm-2 12h2v2h-2v-2zm0-8h2v2h-2V8zM2 8h10v2H2V8zm0 8h10v2H2v-2zm-2-4h14v2H0v-2zm4-8h6v2H4V4zm0 16h6v2H4v-2zM6 0h2v2H6V0zm0 24h2v2H6v-2z'/%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n\r\n* {\r\n    background: transparent;\r\n    border-radius: 0 !important;\r\n    box-shadow: none !important;\r\n}\r\n`;\r\n\r\nconst Pit: React.FC = () => {\r\n  const { path } = useRouteMatch();\r\n  const { account } = useWallet();\r\n  const tombFinance = useTombFinance();\r\n  const addTransaction = useTransactionAdder();\r\n  const bondStat = useBondStats();\r\n  const cashPrice = useCashPriceInLastTWAP();\r\n  const bondsPurchasable = useBondsPurchasable();\r\n  const rebateStats = useTreasury();\r\n  const  { slowRefresh } = useRefresh();\r\n\r\n  const bondBalance = useTokenBalance(tombFinance?.HODL);\r\n\r\n  const handleBuyBonds = useCallback(\r\n    async (amount: string) => {\r\n      const tx = await tombFinance.buyBonds(amount);\r\n      addTransaction(tx, {\r\n        summary: `Buy ${Number(amount).toFixed(2)} HODL with ${amount} TOMB`,\r\n      });\r\n    },\r\n    [tombFinance, addTransaction],\r\n  );\r\n\r\n  const handleRedeemBonds = useCallback(\r\n    async (amount: string) => {\r\n      const tx = await tombFinance.redeemBonds(amount);\r\n      addTransaction(tx, { summary: `Redeem ${amount} HODL` });\r\n    },\r\n    [tombFinance, addTransaction],\r\n  );\r\n  const isBondRedeemable = useMemo(() => cashPrice.gt(BOND_REDEEM_PRICE_BN), [cashPrice, slowRefresh]);\r\n  const isBondPurchasable = useMemo(() => Number(bondStat?.tokenInFtm) < 1.01, [bondStat, slowRefresh]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        <BackgroundImage />\r\n        {!!account ? (\r\n          <>\r\n            <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n              Bonds\r\n            </Typography>\r\n            <Route exact path={path}>\r\n              <PageHeader icon={'🏦'} subtitle=\"Earn premiums upon redemption\" />\r\n            </Route>\r\n            <StyledBond>\r\n              <StyledCardWrapper>\r\n                <ExchangeCard\r\n                  action=\"Purchase\"\r\n                  fromToken={tombFinance.TOMB}\r\n                  fromTokenName=\"GAME\"\r\n                  toToken={tombFinance.HODL}\r\n                  toTokenName=\"HODL\"\r\n                  priceDesc={\r\n                    !isBondPurchasable\r\n                      ? 'GAME is over peg'\r\n                      : getDisplayBalance(bondsPurchasable, 18, 4) + ' HODL available for purchase.'\r\n                  }\r\n                  onExchange={handleBuyBonds}\r\n                  disabled={!bondStat || isBondRedeemable}\r\n                />\r\n              </StyledCardWrapper>\r\n              <StyledStatsWrapper>\r\n                <ExchangeStat\r\n                    tokenName=\"GAME\"\r\n                    description=\"GAME Price (TWAP)\"\r\n                    price={getDisplayBalance(cashPrice, 18, 4)}\r\n                />\r\n                <Spacer size=\"md\" />\r\n                <ExchangeStat\r\n                  tokenName=\"HODL\"\r\n                  description=\"Current Price (Current GAME Price + Premium)\"\r\n                  price={Number(bondStat?.tokenInFtm).toFixed(2) || '-'}\r\n                />\r\n              </StyledStatsWrapper>\r\n              <StyledCardWrapper>\r\n                <ExchangeCard\r\n                  action=\"Redeem\"\r\n                  fromToken={tombFinance.HODL}\r\n                  fromTokenName=\"HODL\"\r\n                  toToken={tombFinance.TOMB}\r\n                  toTokenName=\"GAME\"\r\n                  priceDesc={`${getDisplayBalance(bondBalance)} HODL Available in wallet.` + (isBondRedeemable ? + ` ${rebateStats.tombAvailable.toFixed(4)} GAME available for purchase with ${rebateStats.maxBondSell.toFixed(4)} HODL. Current bonus rate is +${(rebateStats.bondBonus * 100 - 100).toFixed(2)}%.` : \"\")}\r\n                  onExchange={handleRedeemBonds}\r\n                  disabled={!bondStat || bondBalance.eq(0) || rebateStats.maxBondSellBN.eq(0) || !isBondRedeemable}\r\n                  disabledDescription={!isBondRedeemable ? `Enabled when GAME > ${BOND_REDEEM_PRICE} DAI` : null}\r\n                  max={rebateStats.maxBondSellBN}\r\n                />\r\n              </StyledCardWrapper>\r\n            </StyledBond>\r\n          </>\r\n        ) : (\r\n          <UnlockWallet />\r\n        )}\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst StyledBond = styled.div`\r\n  display: flex;\r\n  background: transparent;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  background: transparent;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst StyledStatsWrapper = styled.div`\r\n  display: flex;\r\n  flex: 0.8;\r\n  margin: 0 20px;\r\n  background: transparent;\r\n  flex-direction: column;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nexport default Pit;\r\n"],"sourceRoot":""}