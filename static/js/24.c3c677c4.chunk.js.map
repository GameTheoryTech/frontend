{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","chainIdToNetwork","PortisConnector","dAppId","networks","config","chainIds","n","Number","handleOnLogout","this","handleOnActiveWalletChanged","account","handleOnError","accounts","provider","portis","m","Portis","e","deactivate","newNetwork","chainId"],"mappings":"oKAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ,kB,uUACA,IAAMG,EAAkD,CACtD,EADsD,UAEtD,EAFsD,UAGtD,EAHsD,UAItD,EAJsD,SAKtD,GALsD,QAMtD,IANsD,OAOtD,GAPsD,SAQtD,GARsD,gBAStD,GATsD,OAUtD,GAVsD,QAWtD,GAXsD,UAYtD,EAZsD,OAatD,IAbsD,cActD,GAdsD,qBAetD,IAfsD,eAgBtD,IAhBsD,OAiBtD,KAjBsD,WAkBtD,MAlBsD,UAmBtD,IAnBsD,QAoBtD,MAAO,eAWIC,EAAb,Y,QAOE,c,MAAcC,WAAQC,a,IAAUC,kBAASA,EAAA,KACjCC,EAAWF,EAAA,KAAa,kBAA6B,kBAANG,EAAiBA,EAAIC,OAAOD,EAAnD,Y,OAE5BD,SAAe,oBAAkBL,EAAlB,OADjB,iBAIA,cAAM,CAAEL,kBAAmBU,KAA3B,MAEA,SACA,aACA,WAEA,iBAAsB,wBAAtB,IACA,8BAAmC,qCAAnC,IACA,gBAAqB,uBAArB,I,IArBJ,G,EAAA,G,sEAAA,0CAwBUG,WAINC,KAAA,kBA5BJ,8BA+BUC,YAIND,KAAA,WAAgB,CAAEE,aAnCtB,gBAsCUC,YAINH,KAAA,cA1CJ,0B,MA8CSA,K,oBASL,kBAAqB,EAArB,gBACA,+BAAkC,EAAlC,6BACA,iBAAoB,EAApB,e,gBAEsB,iCAAmC,mBAAgCI,EAAhC,OAAnC,eAAhBF,GAEN,MAAO,CAAEG,SAAU,SAAZ,SAAkCH,e,iBAfpC,EAAKI,O,uBACa,0CAA4B,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAA7B,eAAfC,GACN,SAAc,IAAIA,EAChB,EADY,OAEZ,kBAAO,WAAP,GAAuCjB,EAAiB,WAAxD,IAA6E,WAFjE,GAGZ,EAHF,W,mDAhDN,MAAAkB,GAAA,sBAAAA,KAAA,6BAiEI,uBAAOT,KAAA,OAAP,UAjEJ,MAAAS,GAAA,sBAAAA,KAAA,4BAqEI,uBAAOT,KAAA,qBAAP,gBArEJ,MAAAS,GAAA,sBAAAA,KAAA,4BAyEI,uBAAOT,KAAA,2CAA+C,mBAAgCI,EAAhC,OAzE1D,MAAAK,GAAA,sBAAAA,KAAA,aA4ESC,WACLV,KAAA,iBAAqB,eACrBA,KAAA,8BAAkC,eAClCA,KAAA,gBAAoB,gBA/ExB,kC,MAqFMA,K,MAFF,kBAAWW,GACGpB,EAAZ,oBACA,uBAA0BA,EAA1B,MACA,aAAgB,CAAEqB,QAASD,MAE3B,4BACA,aAAgB,CAAEC,QAASd,OAAOa,EAAD,Y,kBAzFvC,MAAAF,GAAA,sBAAAA,KAAA,uB,MA8FUT,K,uBAAA,oCACN,sBA/FJ,MAAAS,GAAA,sBAAAA,KAAA","file":"static/js/24.c3c677c4.chunk.js","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  1337: 'devChain',\n  31337: 'hardhat',\n  137: 'matic',\n  80001: 'maticMumbai'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}