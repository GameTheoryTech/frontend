{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","WalletLinkConnector","url","appName","appLogoUrl","darkMode","this","method","accounts","account","provider","window","walletLink","m","WalletLink","e","deactivate","handleChainChanged","chainId","handleAccountsChanged"],"mappings":"oKAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ,kB,mhBAAA,IAUaG,EAAb,Y,QASE,c,MAAcC,QAAKC,YAASC,eAAYC,aAAUT,sB,OAChD,cAAM,CAAEA,kBAAmBA,KAA3B,MAEA,MACA,YACA,eACA,WAAgBS,IAAhB,EAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,I,IAlBJ,G,EAAA,G,sEAAA,mD,MAyBMC,K,oCAWqB,mBAAsB,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,IAAMC,EAAUD,EAAhB,GAKA,OAHA,6BAAiC,EAAjC,oBACA,gCAAoC,EAApC,uBAEO,CAAEE,SAAU,EAAZ,SAA2BD,QAASA,O,gBArBvCE,kBAAwD,IAArCA,iCAErB,WAAgBA,OAAhB,a,sBACU,EAAKC,W,uBACU,gEAA0B,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAA3B,eAAnBC,GACN,aAAkB,IAAIA,EAAW,EAAf,CAChBX,QAAS,EADO,QAEhBE,SAAU,EAAKA,UACX,aAAkB,CAAED,WAAY,EAAKA,YAH3C,KAKA,WAAgB,8BAAiC,EAAjC,IA3CtB,M,kGAUA,MAAAW,GAAA,sBAAAA,KAAA,6BAgDI,uBAAOT,KAAP,UAhDJ,MAAAS,GAAA,sBAAAA,KAAA,4BAoDI,uBAAOT,KAAA,SAAP,SApDJ,MAAAS,GAAA,sBAAAA,KAAA,4B,uBAwD2BT,KAAA,iBAAsB,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,OAAOA,EAAP,MA3DJ,MAAAO,GAAA,sBAAAA,KAAA,aA8DSC,WACLV,KAAA,uCAA6CA,KAA7C,oBACAA,KAAA,0CAAgDA,KAAhD,wBAhEJ,uB,OAoEIA,KAAA,iBAAAA,KACA,iB,kBArEJ,MAAAS,GAAA,sBAAAA,KAAA,qBAwEUE,YAINX,KAAA,WAAgB,CAAEY,QAASA,KA5E/B,wBA+EUC,YAINb,KAAA,WAAgB,CAAEG,QAASD,EAAS,MAnFxC","file":"static/js/27.6a31993a.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],"sourceRoot":""}