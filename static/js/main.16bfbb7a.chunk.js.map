{"version":3,"sources":["utils/constants.ts","tomb-finance/config.ts","tomb-finance/ether-utils.ts","state/transactions/actions.ts","state/application/hooks.ts","utils/provider.ts","utils/formatBalance.ts","tomb-finance/ERC20.ts","tomb-finance/ERC20Lockable.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useTombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","config.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["TOMB_TICKER","TSHARE_TICKER","DAI_TICKER","SPOOKY_ROUTER_ADDR","ZAPPER_ROUTER_ADDR","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","addTransaction","createAction","clearAllTransactions","finalizeTransaction","checkedTransaction","useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","getDisplayBalance","balance","fractionDigits","isTruncated","number","getBalance","ret","toFixed","length","slice","getFullDisplayBalance","Number","div","BigNumber","from","pow","ERC20","address","symbol","decimal","abi","ABI","contract","this","Contract","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","formatUnits","supply","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","ERC20Lockable","LockableABI","lockOf","canUnlockAmount","totalBalanceOf","noUnlockBeforeTransfer","set","setNoUnlockBeforeTransfer","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBDAI_LP","TOMBDAI_LPToken","TSHAREDAI_LPToken","TOMB","TSHARE","HODL","FTM","deployments","entries","deployment","game","theory","hodl","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","GameGenesisRewardPool","tombRewardPoolSupply","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceInFTM","getDAIPriceFromPancakeswap","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","priceInDollars","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","gt","toNumber","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","TheoryRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","getGameUpdatedPrice","expectedPrice","getGamePrice","Altergene","creditsPurchased","mul","allHighScores","allHighScoreWinners","allHighScoreNicknames","highScore","highScoreList","Array","i","score","nickname","substr","toUpperCase","getBurnableGameLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","poolId","tokenPerSecond","tokenPerHour","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","depositFee","getWithdrawFeeOf","fee","getCurrentLockPercentage","locked","contractName","getGamePerSecondInPool","rewardPerSecond","getTheoryPerSecondInPool","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getTokenPriceFromSpiritswap","fetch","res","json","data","usd","getTokenPriceFromPancakeswapFTMToDAI","epoch","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","Master","masterToTheory","masonryMasterToTheoryTvl","dungeonTVL","isFake","tokenSupply","getTombStatFake","getShareStatFake","priceOfToken","tokenInLP","price","poolName","pendingGAME","pendingShare","userInfo","deposit","withdraw","Theoretics","tokenContract","ready","DAI","dai","Token","getBondStat","Fetcher","fetchPairData","daiToToken","priceInBUSD","Route","midPrice","WFTM","wftm","ftmToToken","daiToFtm","chainIdSpirit","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","axios","current_price","Masonry","latestSnapshotIndex","theoreticsHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","getMasonryDPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","latestRPS","storedRPS","getDungeonDPR","nextTimestamp","lockToTime","toDate","Date","getStakedSharesOnDungeon","fromDate","now","buyFromTheory","theoryToMaster","requestSellToTheory","sellToTheory","claimGame","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","theorists","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","getCurrentClaimEpochs","rewardLockupEpochs","targetEpochForClaimUnlock","delta","endDate","moment","add","PeriodInHours","getCurrentWithdrawEpochs","withdrawLockupEpochs","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","lpName","zapper","estimateZapInToken","estimate","zapInToken","lockAmount","lte","unlock","lockOfGame","unlockGame","totalCanUnlockAmountGame","isGen1","tokenId","TheoryUnlocker","TheoryUnlockerGen1","nftUnlock","mint","tokenId1","tokenId2","merge","maxLevel","tokenOfOwnerByIndex","tokenURI","tokenInfo","level","timeLeftToLevel","levelUp","slippage","timeToLevel","minted","maxMinted","levelUpTo","merged","lastLevelTime","gameCostPerLevel","base","extraGameCost","extra","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","ethereum","useState","setTombFinance","useEffect","unlockWallet","tomb","Provider","useTombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","earnToken","sort","b","configurations","production","ChainId","MAINNET","ChainIdSpirit","networkName","ftmscanUrl","require","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","development","FTMTESTNET","GameDAIRewardPool","page","sectionInUI","multiplier","site","buyLink","closedForStaking","GameUSDCRewardPool","GameMIMRewardPool","GameWFTMRewardPool","GameETHRewardPool","GamepFTMRewardPool","GamebFTMRewardPool","TheoryGameDaiSpookyLpRewardPool","TheoryTheoryDaiSpookyLpRewardPool","TheoryHODLRewardPool","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","window","connectToNetwork","request","method","params","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","networkVersion","getTime","createReducer","builder","addCase","transactions","payload","hash","approval","summary","txs","addedTime","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","grey","theme","borderRadius","color","black","purple","primary","light","main","secondary","white","teal","siteWidth","spacing","topBarSize","newTheme","createTheme","breakpoints","xs","sm","md","lg","xl","palette","text","neutral","background","default","paper","typography","fontFamily","join","fontWeight","fontSize","h1","h2","h3","h4","h5","h6","body1","body2","components","MuiContainer","styleOverrides","root","position","MuiToolbar","paddingLeft","paddingRight","MuiButton","textTransform","padding","boxShadow","textShadow","backgroundColor","outlined","border","transition","MuiCard","backdropFilter","height","overflow","MuiCardContent","textAlign","paddingBottom","margin","MuiAccordion","opacity","MuiAccordionSummary","transform","MuiAccordionDetails","MuiTableCell","borderBottom","MuiPaper","MuiGrid","flexBasis","maxWidth","MuiSelect","lineHeight","borderColor","borderWidth","MuiSlider","width","display","top","MuiMenuItem","MuiList","MuiListItemText","MuiSvgIcon","MuiInputLabel","marginBottom","MuiBackdrop","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","left","Typography","RowNoFlex","TransactionPopup","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popupContent","popKey","removeThisPopup","faderStyle","useSpring","duration","MobilePopupWrapper","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Index","lazy","Home","Farms","Boardroom","Bonds","About","Nft","Dungeon","Leaderboards","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","basename","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.16bfbb7a.chunk.js","sourcesContent":["export const TOMB_TICKER = 'GAME';\r\nexport const TSHARE_TICKER = 'THEORY';\r\nexport const HODL_TICKER = 'HODL';\r\nexport const FTM_TICKER = 'FTM';\r\nexport const WFTM_TICKER = 'WFTM';\r\nexport const DAI_TICKER = 'DAI';\r\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\r\nexport const ZAPPER_ROUTER_ADDR = '0x2656DaB561f7c4dd0cecb87D94eE2094282B60a9';\r\n","import { Deployments } from './deployments';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\nimport { ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  chainIdSpirit: ChainIdSpirit;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: { [contractName: string]: [string, number] };\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  masonryLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 1,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '1000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport { defaultEthereumConfig, EthereumConfig } from './config';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { useCallback, useMemo } from 'react';\r\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../index';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import { ethers } from 'ethers';\r\nimport config from '../config';\r\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\r\n\r\nlet provider: ethers.providers.Web3Provider = null;\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  if (!provider) {\r\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n  }\r\n\r\n  return provider;\r\n}","import { BigNumber } from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\nimport {ContractInterface} from \"@ethersproject/contracts/src.ts/index\";\r\n\r\nclass ERC20 {\r\n  protected contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18, abi : ContractInterface = ABI) {\r\n    this.contract = new Contract(address, abi, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport {TransactionReceipt, TransactionResponse} from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\nimport ERC20 from \"./ERC20\";\r\n\r\nclass ERC20Lockable extends ERC20 {\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    super(address, provider, symbol, decimal, LockableABI);\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, LockableABI, signerOrProvider);\r\n  }\r\n\r\n  lockOf(account: string): Promise<BigNumber> {\r\n    return this.contract.lockOf(account);\r\n  }\r\n\r\n  canUnlockAmount(account: string): Promise<BigNumber> {\r\n    return this.contract.canUnlockAmount(account);\r\n  }\r\n\r\n  totalBalanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.totalBalanceOf(account);\r\n  }\r\n\r\n  noUnlockBeforeTransfer(account: string): Promise<boolean> {\r\n    return this.contract.noUnlockBeforeTransfer(account);\r\n  }\r\n\r\n  setNoUnlockBeforeTransfer(set : boolean): Promise<TransactionResponse> {\r\n    return this.contract.setNoUnlockBeforeTransfer(set);\r\n  }\r\n}\r\n\r\nexport default ERC20Lockable;\r\n\r\nconst LockableABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_holder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"lockOf\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_holder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"canUnlockAmount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_holder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"totalBalanceOf\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"noUnlockBeforeTransfer\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"_noUnlockBeforeTransfer\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"name\": \"setNoUnlockBeforeTransfer\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n];\r\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\r\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit, ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\nimport { Fetcher } from '@spookyswap/sdk/dist';\r\nimport { Route, Token } from '@spookyswap/sdk/dist';\r\nimport { Configuration } from './config';\r\nimport {\r\n  ContractName,\r\n  TokenStat,\r\n  AllocationTime,\r\n  LPStat,\r\n  Bank,\r\n  PoolStats,\r\n  TShareSwapperStat,\r\n  AltergeneStat\r\n} from './types';\r\nimport {BigNumber, BigNumberish, Contract, ethers, EventFilter} from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { DAI_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\r\nimport axios from \"axios\";\r\nimport ERC20Lockable from \"./ERC20Lockable\";\r\n/**\r\n * An API module of 2omb Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class TombFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  masonryVersionOfUser?: string;\r\n\r\n  TOMBDAI_LP: Contract;\r\n  TOMBDAI_LPToken: ERC20;\r\n  TSHAREDAI_LPToken: ERC20;\r\n  TOMB: ERC20Lockable;\r\n  TSHARE: ERC20Lockable;\r\n  HODL: ERC20;\r\n  FTM: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.TOMB = new ERC20Lockable(deployments.game.address, provider, 'GAME');\r\n    this.TSHARE = new ERC20Lockable(deployments.theory.address, provider, 'THEORY');\r\n    this.HODL = new ERC20(deployments.hodl.address, provider, 'HODL');\r\n    this.FTM = this.externalTokens['DAI'];\r\n\r\n    // Uniswap V2 Pair\r\n    this.TOMBDAI_LP = new Contract(externalTokens['GAME-DAI-LP'][0], IUniswapV2PairABI, provider);\r\n    this.TOMBDAI_LPToken = new ERC20(externalTokens['GAME-DAI-LP'][0], provider, 'GAME-DAI LP');\r\n    this.TSHAREDAI_LPToken = new ERC20(externalTokens['THEORY-DAI-LP'][0], provider, 'THEORY-DAI LP');\r\n\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.TOMB, this.TSHARE, this.HODL, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.TOMBDAI_LP = this.TOMBDAI_LP.connect(this.signer);\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchMasonryVersionOfUser()\r\n      .then((version) => (this.masonryVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\r\n        this.masonryVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM SPOOKY TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getTombStat(): Promise<TokenStat> {\r\n    const { GameGenesisRewardPool } = this.contracts;\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply\r\n      .sub(tombRewardPoolSupply);\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TOMB);\r\n    console.log(\"price in dai:\", priceInFTM)\r\n    const priceOfOneFTM = await this.getDAIPriceFromPancakeswap();\r\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfTombInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('GAME') ? this.TOMB : this.TSHARE;\r\n    const isTomb = name.startsWith('GAME');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb, false);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to get price for Tomb\r\n   * @returns TokenStat for HODL\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const tombStat = await this.getTombStat();\r\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\r\n    const modifier = bondTombRatioBN.gt(BigNumber.from(10).pow(18)) ? bondTombRatioBN.div(BigNumber.from(10).pow(18)).toNumber() : 1;\r\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(4);\r\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\r\n    const supply = await this.HODL.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInFTM,\r\n      priceInDollars: priceOfTBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for TSHARE\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const { TheoryRewardPool } = this.contracts;\r\n\r\n    const supply = await this.TSHARE.totalSupply();\r\n\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TSHARE);\r\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TheoryRewardPool.address);\r\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    const priceOfOneFTM = await this.getDAIPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInNextTWAP(): Promise<TokenStat> {\r\n    const { Treasury, GameGenesisRewardPool } = this.contracts;\r\n    const expectedPrice = await Treasury.getGameUpdatedPrice(); // Updated price is UUUUSELESS.\r\n\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { Treasury, GameGenesisRewardPool } = this.contracts;\r\n    const expectedPrice = await Treasury.getGamePrice(); // Updated price is UUUUSELESS.\r\n\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getAltergeneStat(): Promise<AltergeneStat> {\r\n    const { Altergene } = this.contracts;\r\n    const creditsPurchased = (await this.TOMB.balanceOf(Altergene.address)).mul(5).div(BigNumber.from(10).pow(18)).toString();\r\n    const allHighScores = (await Altergene.allHighScores());\r\n    const allHighScoreWinners = (await Altergene.allHighScoreWinners());\r\n    const allHighScoreNicknames = (await Altergene.allHighScoreNicknames());\r\n    const highScore = allHighScores[0].toString();\r\n    const highScoreList = [...Array<string>(10)];\r\n    for(let i = 0; i < 10; ++i)\r\n    {\r\n      const score = allHighScores[i];\r\n      let nickname = allHighScoreNicknames[i] === \"\" || !allHighScoreNicknames[i] ? allHighScoreWinners[i].toString().substr(2,3).toUpperCase() : allHighScoreNicknames[i];\r\n      highScoreList[i] = `${score} ${nickname}`\r\n    }\r\n\r\n    return {\r\n      creditsPurchased: creditsPurchased,\r\n      highScore: highScore,\r\n      highScoreList: highScoreList\r\n    };\r\n  }\r\n\r\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getGamePrice(); // Updated price is UUUUSELESS.\r\n  }\r\n\r\n  async getBondsPurchasable(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBurnableGameLeft();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and DPR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    console.log(\"deposit token price:\", depositTokenPrice)\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const stat = bank.earnTokenName === 'GAME' ? await this.getTombStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n      bank.poolId\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    const fee = (bank.earnTokenName === \"GAME\" ? (await poolContract.depositFee()) :\r\n            (await poolContract.getWithdrawFeeOf(bank.poolId, this.myAccount))) / 100;\r\n    const locked = (bank.earnTokenName === \"GAME\" ? 0.00 :\r\n        (await poolContract.getCurrentLockPercentage(bank.poolId, this.myAccount)).toNumber());\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n      fee: fee.toFixed(2).toString(),\r\n      locked: locked.toFixed(2).toString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n    poolId: number\r\n  ) {\r\n    if (earnTokenName === 'GAME') {\r\n      const rewardPerSecond = await poolContract.getGamePerSecondInPool(poolId);\r\n      return rewardPerSecond;\r\n    }\r\n    const rewardPerSecond = await poolContract.getTheoryPerSecondInPool(poolId);\r\n    return rewardPerSecond\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneFtmInDollars = await this.getDAIPriceFromPancakeswap();\r\n    if (tokenName === 'dAI') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else if (tokenName === 'DAI') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else {\r\n      console.log(\"token name:\", tokenName)\r\n      if (tokenName === 'GAME-DAI LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true, false);\r\n      } else if (tokenName === 'THEORY-DAI LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false, false);\r\n      } else if (tokenName === \"2SHARES-DAI LP\") {\r\n        tokenPrice = await this.getLPTokenPrice(token, new ERC20(\"0xc54a1684fd1bef1f077a336e6be4bd9a3096a6ca\", this.provider, \"2SHARES\"), false, true);\r\n      } else if (tokenName === \"2OMB-DAI LP\") {\r\n        console.log(\"getting the LP token price here\")\r\n        tokenPrice = await this.getLPTokenPrice(token, new ERC20(\"0x7a6e4e3cc2ac9924605dca4ba31d1831c84b44ae\", this.provider, \"2OMB\"), true, true);\r\n        console.log(\"my token price:\", tokenPrice)\r\n      } else if (tokenName === 'BLOOM') {\r\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\r\n      } else if (tokenName === \"BELUGA\") {\r\n        const data = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=beluga-fi&vs_currencies=usd\").then(res => res.json())\r\n        tokenPrice = data[\"beluga-fi\"].usd\r\n      } else {\r\n        if(tokenName === \"bFTM\" || tokenName === \"pFTM\")\r\n        {\r\n          //Kind of cheating for bonds because we don't consider the premium.\r\n          tokenName = 'pFTM'\r\n          token = new ERC20('0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B', getDefaultProvider(), 'pFTM', 18);\r\n          tokenPrice = await this.getTokenPriceFromPancakeswapFTMToDAI(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n        else if(tokenName !== \"GAME\" && tokenName !== \"THEORY\" && tokenName !== \"TOMB\" && tokenName !== \"TSHARE\" && tokenName !== \"WFTM\") {\r\n          tokenPrice = await this.getTokenPriceFromPancakeswapFTMToDAI(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n        else {\r\n          tokenPrice = await this.getTokenPriceFromPancakeswap(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n      }\r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryTombPrice = await Treasury.getGamePrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForTomb = await Treasury.getGamePrice();\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      if(!token) continue;\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    const masonryMasterToTheoryTvl = await this.contracts.Master.masterToTheory(await this.contracts.Master.totalSupply());\r\n    const dungeonTVL = Number(getDisplayBalance(masonryMasterToTheoryTvl, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n\r\n    return totalValue + masonryTVL + dungeonTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\r\n   * @param isTomb sanity check for usage of tomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean, isFake: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isFake === true ? isTomb === true ? await this.getTombStatFake() : await this.getShareStatFake() : isTomb === true ? await this.getTombStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async getTombStatFake() {\r\n    const price = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=2omb-finance&vs_currencies=usd\").then(res => res.json())\r\n    return { priceInDollars: price[\"2omb-finance\"].usd }\r\n  }\r\n\r\n  async getShareStatFake() {\r\n    const price = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=2share&vs_currencies=usd\").then(res => res.json())\r\n    return { priceInDollars: price[\"2share\"].usd }\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'GAME') {\r\n        return await pool.pendingGAME(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchMasonryVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentMasonry(): Contract {\r\n    if (!this.masonryVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Theoretics;\r\n  }\r\n\r\n  isOldMasonryMember(): boolean {\r\n    return this.masonryVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { DAI, HODL } = this.config.externalTokens;\r\n\r\n    const dai = new Token(chainId, DAI[0], DAI[1], \"DUMMY\", \"DUMMY Token\");\r\n    const hodl = new Token(chainId, HODL[0], HODL[1], \"HODL\", \"HODL Token\");\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    if(dai.address === tokenContract.address) return (1).toFixed(4); //DAI is 1 to 1 with DAI.\r\n    if(hodl.address === tokenContract.address) return (await this.getBondStat()).tokenInFtm;\r\n    try {\r\n      const daiToToken = await Fetcher.fetchPairData(token, dai, this.provider);\r\n      const priceInBUSD = new Route([daiToToken], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapFTMToDAI(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { DAI, HODL, WFTM } = this.config.externalTokens;\r\n\r\n    const dai = new Token(chainId, DAI[0], DAI[1], \"DUMMY\", \"DUMMY Token\");\r\n    const hodl = new Token(chainId, HODL[0], HODL[1], \"HODL\", \"HODL Token\");\r\n    const wftm = new Token(chainId, WFTM[0], WFTM[1], \"DUMMY\", \"DUMMY Token\");\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    if(dai.address === tokenContract.address) return (1).toFixed(4); //DAI is 1 to 1 with DAI.\r\n    if(hodl.address === tokenContract.address) return (await this.getBondStat()).tokenInFtm;\r\n    try {\r\n      const ftmToToken = await Fetcher.fetchPairData(token, wftm, this.provider);\r\n      const daiToFtm = await Fetcher.fetchPairData(wftm, dai, this.provider);\r\n      const priceInBUSD = new Route([ftmToToken, daiToFtm], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainIdSpirit } = this.config;\r\n\r\n    const { DAI } = this.externalTokens;\r\n\r\n    const dai = new TokenSpirit(chainIdSpirit, DAI.address, DAI.decimal);\r\n    const token = new TokenSpirit(chainIdSpirit, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const daiToToken = await FetcherSpirit.fetchPairData(dai, token, this.provider);\r\n      const liquidityToken = daiToToken.liquidityToken;\r\n      let ftmBalanceInLP = await DAI.balanceOf(liquidityToken.address);\r\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, DAI.decimal));\r\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\r\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\r\n      const priceOfOneFtmInDollars = await this.getDAIPriceFromPancakeswap();\r\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\r\n      return priceOfShiba.toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getDAIPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    try {\r\n      const { data } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=dai');\r\n      return (data[0].current_price).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of DAI: ${err}`);\r\n    }\r\n  }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getMasonryDPR() {\r\n    const Masonry = this.currentMasonry();\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const lastHistory = await Masonry.theoreticsHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\r\n    const epochRewardsTotal = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsTotal * Number(TOMBPrice) * 4;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL);\r\n    return realAPR;\r\n  }\r\n\r\n  async getMasonryAPR() {\r\n    return (await this.getMasonryDPR()) * 365;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\r\n    // const Masonry = this.currentMasonry();\r\n    // const mason = await Masonry.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalTVLInMasonry(): Promise<number> {\r\n    //const Masonry = this.currentMasonry();\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    return masonryTVL;\r\n  }\r\n\r\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.totalSupply();\r\n  }\r\n\r\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldMasonryMember()) {\r\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\r\n    }\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getShareOf(this.myAccount);\r\n    }\r\n    return await Masonry.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getEarningsOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Masonry.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.claimDividends();\r\n    }\r\n    return await Masonry.claimReward();\r\n  }\r\n\r\n  async exitFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.exit();\r\n  }\r\n\r\n  async getDungeonDPR() {\r\n    const { Master } = this.contracts;\r\n    const Masonry = this.currentMasonry();\r\n\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const latestRPS = (await Masonry.theoreticsHistory(latestSnapshotIndex))[2];\r\n    const storedRPS = (await Masonry.theoreticsHistory(latestSnapshotIndex.sub(1)))[2];\r\n\r\n    const lastRewardsReceived = (await Masonry.balanceOf(Master.address)).mul(latestRPS.sub(storedRPS)).div(BigNumber.from(10).pow(18));\r\n    //await Master.expectedClaimableGameThisEpoch(); //Broken\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\r\n    const epochRewardsTotal = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsTotal * Number(TOMBPrice) * 4;\r\n    const masonryMasterToTheoryTvl = await this.contracts.Master.masterToTheory(await this.contracts.Master.totalSupply());\r\n    const dungeonTVL = Number(getDisplayBalance(masonryMasterToTheoryTvl, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / dungeonTVL);\r\n    return realAPR;\r\n  }\r\n\r\n  async getDungeonAPR() {\r\n    return (await this.getDungeonDPR()) * 365;\r\n  }\r\n\r\n  async canUserUnstakeFromDungeon(): Promise<boolean> {\r\n    const { Master } = this.contracts;\r\n    const nextTimestamp = (await Master.userInfo(this.myAccount)).lockToTime;\r\n    const toDate = new Date(nextTimestamp * 1000);\r\n    const stakedAmount = await this.getStakedSharesOnDungeon();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\r\n    const fromDate = new Date(Date.now());\r\n    const result = notStaked ? false : fromDate >= toDate;\r\n    return result;\r\n  }\r\n\r\n  async getTotalTVLInDungeon(): Promise<number> {\r\n    //const Masonry = this.currentMasonry();\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonryMasterToTheoryTvl = await this.contracts.Master.masterToTheory(await this.contracts.Master.totalSupply());\r\n    const dungeonTVL = Number(getDisplayBalance(masonryMasterToTheoryTvl, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    return dungeonTVL;\r\n  }\r\n\r\n  async getTotalStakedInDungeon(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.totalSupply();\r\n  }\r\n\r\n  async stakeShareToDungeon(amount: string): Promise<TransactionResponse> {\r\n    const { Master } = this.contracts;\r\n    return await Master.buyFromTheory(decimalToBalance(amount), 0);\r\n  }\r\n\r\n  async getStakedSharesOnDungeon(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getStakedSharesInTheoryOnDungeon(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.masterToTheory(await Master.balanceOf(this.myAccount));\r\n  }\r\n\r\n  async getPriceOfMasterInTheory(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.masterToTheory(BigNumber.from(10).pow(18));\r\n  }\r\n\r\n  async getPriceOfTheoryInMaster(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.theoryToMaster(BigNumber.from(10).pow(18));\r\n  }\r\n\r\n  async getEarningsOnDungeon(): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    return await Master.earned(this.myAccount);\r\n  }\r\n\r\n  async requestWithdrawShareFromDungeon(amount: string): Promise<TransactionResponse> {\r\n    const { Master } = this.contracts;\r\n    return await Master.requestSellToTheory(decimalToBalance(amount), false);\r\n  }\r\n\r\n  async withdrawShareFromDungeon(): Promise<TransactionResponse> {\r\n    const { Master } = this.contracts;\r\n    return await Master.sellToTheory();\r\n  }\r\n\r\n  async harvestCashFromDungeon(): Promise<TransactionResponse> {\r\n    const { Master } = this.contracts;\r\n    return await Master.claimGame();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Theoretics, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Theoretics.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Theoretics.epoch();\r\n    const mason = await Theoretics.theorists(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Theoretics.getCurrentClaimEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Theoretics, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Theoretics.nextEpochPoint();\r\n    const currentEpoch = await Theoretics.epoch();\r\n    const mason = await Theoretics.theorists(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Theoretics.getCurrentWithdrawEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async getUserUnstakeTimeDungeon(): Promise<AllocationTime> {\r\n    const { Master } = this.contracts;\r\n    const nextTimestamp = (await Master.userInfo(this.myAccount)).lockToTime;\r\n    const fromDate = new Date(Date.now());\r\n    const toDate = new Date(nextTimestamp * 1000);\r\n    if (fromDate <= toDate) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else {\r\n      return { from: fromDate, to: toDate };\r\n    }\r\n  }\r\n\r\n  // async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n  //   const { ethereum } = window as any;\r\n  //   if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n  //     let asset;\r\n  //     let assetUrl;\r\n  //     if (assetName === 'TOMB') {\r\n  //       asset = this.TOMB;\r\n  //       assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\r\n  //     } else if (assetName === 'TSHARE') {\r\n  //       asset = this.TSHARE;\r\n  //       assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\r\n  //     } else if (assetName === 'HODL') {\r\n  //       asset = this.HODL;\r\n  //       assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\r\n  //     }\r\n  //     await ethereum.request({\r\n  //       method: 'wallet_watchAsset',\r\n  //       params: {\r\n  //         type: 'ERC20',\r\n  //         options: {\r\n  //           address: asset.address,\r\n  //           symbol: asset.symbol,\r\n  //           decimals: 18,\r\n  //           image: assetUrl,\r\n  //         },\r\n  //       },\r\n  //     });\r\n  //   }\r\n  //   return true;\r\n  // }\r\n\r\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\r\n    const { SpookyRouter } = this.contracts;\r\n    const { _reserve0, _reserve1 } = await this.TOMBDAI_LP.getReserves();\r\n    let quote;\r\n    if (tokenName === 'TOMB') {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\r\n    } else {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\r\n    }\r\n    return (quote / 1e18).toString();\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\r\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\r\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\r\n\r\n    let epochBlocksRanges: any[] = [];\r\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\r\n    var events: any[] = [];\r\n    masonryFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\r\n      if (index === 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n      }\r\n      if (index > 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\r\n      }\r\n    });\r\n\r\n    epochBlocksRanges.forEach(async (value, index) => {\r\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\r\n        boughtBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\r\n        redeemBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Helper method\r\n   * @param filter applied on the query to the treasury events\r\n   * @param from block number\r\n   * @param to block number\r\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\r\n   */\r\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\r\n    const { Treasury } = this.contracts;\r\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\r\n    return bondsAmount.length;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === DAI_TICKER) {\r\n      const token = this.FTM;\r\n      estimate = await zapper.estimateZapInToken(\r\n          token.address,\r\n          lpToken.address,\r\n          SPOOKY_ROUTER_ADDR,\r\n          parseUnits(amount, 18),\r\n      );\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === DAI_TICKER) {\r\n      const token = this.FTM;\r\n      return await zapper.zapInToken(\r\n          token.address,\r\n          parseUnits(amount, 18),\r\n          50,\r\n          lpToken.address,\r\n          SPOOKY_ROUTER_ADDR,\r\n          this.myAccount,\r\n      );\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        50,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n  async unlockGame(): Promise<TransactionResponse> {\r\n    const { game, Master } = this.contracts;\r\n    const lockAmount = await game.lockOf(this.myAccount)\r\n    let result : TransactionResponse = null;\r\n    if(lockAmount.lte(await game.canUnlockAmount(this.myAccount)))\r\n    {\r\n      result = await game.unlock();\r\n    }\r\n    if(!result || (await Master.lockOfGame(this.myAccount)).gt(0)) result = await Master.unlockGame();\r\n    return result;\r\n  }\r\n\r\n  async lockOfGame(address: string): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    const result = await Master.lockOfGame(address);\r\n    return result;\r\n  }\r\n\r\n  async totalCanUnlockAmountGame(address: string): Promise<BigNumber> {\r\n    const { Master } = this.contracts;\r\n    const result = await Master.totalCanUnlockAmountGame(address);\r\n    return result;\r\n  }\r\n\r\n  async unlockTheory(isGen1 : boolean, tokenId : number | BigNumber): Promise<TransactionResponse> {\r\n    const { TheoryUnlocker, TheoryUnlockerGen1, theory } = this.contracts;\r\n    if(BigNumber.from(tokenId).gt(0))\r\n    {\r\n      const lockAmount = await theory.lockOf(this.myAccount)\r\n      if(lockAmount.lte(await theory.canUnlockAmount(this.myAccount)))\r\n      {\r\n        await theory.unlock();\r\n      }\r\n      //Should be called:\r\n      //When lockOf(player) == 0 - Instead of theory.unlock() [disabled on website]\r\n      //When lockOf(player) <= theory.canUnlockAmount(player) - After theory.unlock() [to avoid revert, knew I should have listened to my gut and put a check for the second _unlock]\r\n      //When lockOf(player) > theory.canUnlockAmount(player) - Instead of theory.unlock()\r\n      if(isGen1) return await TheoryUnlockerGen1.nftUnlock(tokenId);\r\n      return await TheoryUnlocker.nftUnlock(tokenId);\r\n    }\r\n    return await theory.unlock();\r\n  }\r\n  async mintTheoryUnlocker(amount: string): Promise<TransactionResponse> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    return await TheoryUnlocker.mint(BigNumber.from(amount));\r\n  }\r\n  async mergeTheoryUnlocker(tokenId1: string, tokenId2 :string): Promise<TransactionResponse> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    return await TheoryUnlocker.merge(BigNumber.from(tokenId1), BigNumber.from(tokenId2));\r\n  }\r\n  async getMaxTheoryUnlockerLevel(): Promise<BigNumber> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.maxLevel();\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerOwnerSupply(address: string): Promise<BigNumber> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.balanceOf(address);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerAtOwnerIndex(address: string, index : number | BigNumber): Promise<BigNumber> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.tokenOfOwnerByIndex(address, index);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerTokenUri(tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.tokenURI(tokenId);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerLevel(tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = (await TheoryUnlocker.tokenInfo(tokenId)).level;\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerUnlockAmount(address : string, tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.canUnlockAmount(address, tokenId);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerTimeLeftToLevel(tokenId : BigNumber | number): Promise<BigNumber> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.timeLeftToLevel(tokenId);\r\n    return result;\r\n  }\r\n  async unlockTheoryWithNFT(tokenId : BigNumber | number): Promise<TransactionResponse> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    return await TheoryUnlocker.nftUnlock(tokenId);\r\n  }\r\n  async getTheoryUnlockerTotalSupply(): Promise<BigNumber> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    const result = await TheoryUnlocker.totalSupply();\r\n    return result;\r\n  }\r\n  async levelUpTheoryUnlocker(tokenId : number | BigNumber): Promise<TransactionResponse> {\r\n    const { TheoryUnlocker } = this.contracts;\r\n    return await TheoryUnlocker.levelUp(tokenId);\r\n  }\r\n\r\n  async mintTheoryUnlockerGen1(amount: string, slippage : BigNumberish): Promise<TransactionResponse> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return await TheoryUnlockerGen1.mint(BigNumber.from(amount), BigNumber.from(slippage));\r\n  }\r\n  async mergeTheoryUnlockerGen1(tokenId1: string, tokenId2 :string): Promise<TransactionResponse> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return await TheoryUnlockerGen1.merge(BigNumber.from(tokenId1), BigNumber.from(tokenId2));\r\n  }\r\n  async getMaxTheoryUnlockerGen1Level(): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.maxLevel();\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1OwnerSupply(address: string): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.balanceOf(address);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1AtOwnerIndex(address: string, index : number | BigNumber): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.tokenOfOwnerByIndex(address, index);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1TokenUri(tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.tokenURI(tokenId);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1Level(tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = (await TheoryUnlockerGen1.tokenInfo(tokenId)).level;\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1UnlockAmount(address : string, tokenId : BigNumber | number): Promise<string> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.canUnlockAmount(address, tokenId);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1TimeLeftToLevel(tokenId : BigNumber | number): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.timeLeftToLevel(tokenId);\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1TimeToLevel(): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.timeToLevel();\r\n    return result;\r\n  }\r\n  async unlockTheoryWithNFTGen1(tokenId : BigNumber | number): Promise<TransactionResponse> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return await TheoryUnlockerGen1.nftUnlock(tokenId);\r\n  }\r\n  async getTheoryUnlockerGen1TotalMinted(level : BigNumberish): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.minted(BigNumber.from(level));\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1Supply(level : BigNumberish): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.supply(BigNumber.from(level));\r\n    return result;\r\n  }\r\n  async getTheoryUnlockerGen1MaxMinted(level : BigNumberish): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const result = await TheoryUnlockerGen1.maxMinted(BigNumber.from(level));\r\n    return result;\r\n  }\r\n  async levelUpTheoryUnlockerGen1(tokenId : number | BigNumber): Promise<TransactionResponse> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return await TheoryUnlockerGen1.levelUp(tokenId);\r\n  }\r\n  async levelUpToTheoryUnlockerGen1(tokenId : number | BigNumber, level : number | BigNumber): Promise<TransactionResponse> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return await TheoryUnlockerGen1.levelUpTo(tokenId, level);\r\n  }\r\n  async getTheoryUnlockerGen1Merged(tokenId : BigNumber | number): Promise<boolean> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return (await TheoryUnlockerGen1.tokenInfo(tokenId)).merged;\r\n  }\r\n  async getTheoryUnlockerGen1LastLevelTime(tokenId : BigNumber | number): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    return (await TheoryUnlockerGen1.tokenInfo(tokenId)).lastLevelTime;\r\n  }\r\n  async getTheoryUnlockerGen1LevelUpCost(level : BigNumberish): Promise<BigNumber> {\r\n    const { TheoryUnlockerGen1 } = this.contracts;\r\n    const base = (await TheoryUnlockerGen1.gameCostPerLevel()).mul(BigNumber.from(level));\r\n    const extra = await TheoryUnlockerGen1.extraGameCost(BigNumber.from(level));\r\n    const result = base.add(extra);\r\n    return result;\r\n  }\r\n\r\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { TShareSwapper } = this.contracts;\r\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\r\n  }\r\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\r\n    const { TShareSwapper } = this.contracts;\r\n    try {\r\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\r\n      return getDisplayBalance(estimateBN, 18, 6);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\r\n    const { TShareSwapper } = this.contracts;\r\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\r\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\r\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\r\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\r\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\r\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\r\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\r\n    return {\r\n      tshareBalance: tshareBalance.toString(),\r\n      tbondBalance: tbondBalance.toString(),\r\n      // tombPrice: tombPriceBN.toString(),\r\n      // tsharePrice: tsharePriceBN.toString(),\r\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\r\n    };\r\n  }\r\n}\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport TombFinance from '../../tomb-finance';\r\nimport config from '../../config';\r\n\r\nexport interface TombFinanceContext {\r\n  tombFinance?: TombFinance;\r\n}\r\n\r\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\r\n\r\nexport const TombFinanceProvider: React.FC = ({ children }) => {\r\n  const { ethereum, account } = useWallet();\r\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!tombFinance) {\r\n      const tomb = new TombFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        tomb.unlockWallet(ethereum, account);\r\n      }\r\n      setTombFinance(tomb);\r\n    } else if (account) {\r\n      tombFinance?.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, tombFinance]);\r\n\r\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\r\n};\r\n","import { useContext } from 'react';\r\nimport { Context } from '../contexts/TombFinanceProvider';\r\n\r\nconst useTombFinance = () => {\r\n  const { tombFinance } = useContext(Context);\r\n  return tombFinance;\r\n};\r\n\r\nexport default useTombFinance;\r\n","import { createContext } from 'react';\r\nimport { Bank } from '../../tomb-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Context from './context';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Bank } from '../../tomb-finance';\r\nimport config, { bankDefinitions } from '../../config';\r\n\r\nconst Banks: React.FC = ({ children }) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!tombFinance?.isUnlocked) continue;\r\n\r\n        // only show pools staked by user\r\n        const balance = await tombFinance?.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          tombFinance?.myAccount,\r\n        );\r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: tombFinance?.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'TOMB' ? tombFinance?.TOMB : tombFinance?.TSHARE,\r\n      });\r\n    }\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [tombFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, tombFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","// import { ChainId } from '@pancakeswap-libs/sdk';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\nimport { ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\nimport { Configuration } from './tomb-finance/config';\r\nimport { BankInfo } from './tomb-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  production: {\r\n    chainId: ChainId.MAINNET,\r\n    chainIdSpirit: ChainIdSpirit.MAINNET,\r\n    networkName: 'Fantom Opera Mainnet',\r\n    ftmscanUrl: 'https://ftmscan.com',\r\n    defaultProvider: 'https://rpc.ftm.tools',\r\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      'GAME': ['0x56EbFC2F3873853d799C155AF9bE9Cb8506b7817', 18],\r\n      'THEORY': ['0x60787C689ddc6edfc84FCC9E7d6BD21990793f06', 18],\r\n      'HODL': ['0xFfF54fcdFc0E4357be9577D8BC2B4579ce9D5C88', 18],\r\n      'DAI': ['0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E', 18],\r\n      'GAME-DAI LP': ['0x168e509FE5aae456cDcAC39bEb6Fd56B6cb8912e', 18],\r\n      'THEORY-DAI LP': ['0xF69FCB51A13D4Ca8A58d5a8D964e7ae5d9Ca8594', 18],\r\n      'GAME-DAI-LP': ['0x168e509FE5aae456cDcAC39bEb6Fd56B6cb8912e', 18],\r\n      'THEORY-DAI-LP': ['0xF69FCB51A13D4Ca8A58d5a8D964e7ae5d9Ca8594', 18],\r\n      'USDC': ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6],\r\n      'MIM': ['0x82f0B8B456c1A451378467398982d4834b6829c1', 18],\r\n      'WFTM': ['0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18],\r\n      'ETH': ['0x74b23882a30290451A17c44f4F05243b6b58C76d', 18],\r\n      'pFTM': ['0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B', 18],\r\n      'bFTM': ['0x43fF4d2d89dDB6A5B2932a048E18d125b3606565', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02T13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  development: {\r\n    chainId: ChainId.FTMTESTNET,\r\n    chainIdSpirit: ChainIdSpirit.FTMTESTNET,\r\n    networkName: 'Fantom Opera Testnet',\r\n    ftmscanUrl: 'https://testnet.ftmscan.com',\r\n    defaultProvider: 'https://xapi.testnet.fantom.network/lachesis',\r\n    deployments: require('./tomb-finance/deployments/deployments.testing.json'),\r\n    externalTokens: {\r\n      'GAME': ['0x9b343B2fF740E7d4935a4C26c8f94DaD73b5f2ad', 18],\r\n      'THEORY': ['0x330e5d339C84524B99a02Df30c086b01fcE41614', 18],\r\n      'DAI': ['0xCc8FF4E67B368797d0Bc16cae2D0E6a25d716F37', 18],\r\n      'GAME-DAI LP': ['0xC3B9aD492016feBacbF23EC67183Ec0114341d56', 18],\r\n      'THEORY-DAI LP': ['0x91CfC045020dbAC619b5245eF5d9e7427A9eC262', 18],\r\n      'GAME-DAI-LP': ['0xC3B9aD492016feBacbF23EC67183Ec0114341d56', 18],\r\n      'THEORY-DAI-LP': ['0x91CfC045020dbAC619b5245eF5d9e7427A9eC262', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02T13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\r\n        - 0 = Single asset stake pools\r\n        - 1 = LP asset staking rewarding TOMB\r\n        - 2 = LP asset staking rewarding TSHARE\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  GameDAIRewardPool: {\r\n    name: 'Earn GAME by staking DAI',\r\n    page: \"GameDAIRewardPool\",\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'DAI',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '7500',\r\n    site: \"https://makerdao.com\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 0,\r\n    closedForStaking: true,\r\n  },\r\n  GameUSDCRewardPool: {\r\n    name: 'Earn GAME by staking USDC',\r\n    page: \"GameUSDCRewardPool\",\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'USDC',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://www.centre.io\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n    sort: 1,\r\n    closedForStaking: true,\r\n  },\r\n  GameMIMRewardPool: {\r\n    name: 'Earn GAME by staking MIM',\r\n    page: \"GameMIMRewardPool\",\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'MIM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://abracadabra.money\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n    sort: 2,\r\n    closedForStaking: true,\r\n  },\r\n  GameWFTMRewardPool: {\r\n    name: 'Earn GAME by staking WFTM',\r\n    page: \"GameWFTMRewardPool\",\r\n    poolId: 6, // Hardhat sucks at deploying to mainnet Fantom, it failed the transaction and skipped WFTM and I had to add it manually so the pools are now out of order.\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'WFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://fantom.foundation/defi\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n    sort: 3,\r\n    closedForStaking: true,\r\n  },\r\n  GameETHRewardPool: {\r\n    name: 'Earn GAME by staking ETH (wETH on SpookySwap)',\r\n    page: \"GameETHRewardPool\",\r\n    poolId: 3,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'ETH',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://weth.io\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n    sort: 4,\r\n    closedForStaking: true,\r\n  },\r\n  GamepFTMRewardPool: {\r\n    name: 'Earn GAME by staking pFTM',\r\n    page: \"GamepFTMRewardPool\",\r\n    poolId: 4,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'pFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '4000',\r\n    site: \"https://ripae.finance\",\r\n    buyLink: 'https://spooky.fi/#/swap?outputCurrency=0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B',\r\n    sort: 5,\r\n    closedForStaking: true,\r\n  },\r\n  GamebFTMRewardPool: {\r\n    name: 'Earn GAME by staking bFTM',\r\n    page: \"GamebFTMRewardPool\",\r\n    poolId: 5,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'bFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '5000',\r\n    site: \"https://ripae.finance\",\r\n    buyLink: 'https://ripae.finance/bonds',\r\n    sort: 6,\r\n    closedForStaking: true,\r\n  },\r\n  TheoryGameDaiSpookyLpRewardPool: {\r\n    name: 'Earn THEORY by staking GAME-DAI LP',\r\n    page: \"TheoryGameDaiSpookyLpRewardPool\",\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'TheoryRewardPool',\r\n    depositTokenName: 'GAME-DAI LP',\r\n    earnTokenName: 'THEORY',\r\n    finished: false,\r\n    multiplier: '35500',\r\n    site: \"https://gametheory.tech\",\r\n    buyLink: 'https://spooky.fi/#/add/0x56EbFC2F3873853d799C155AF9bE9Cb8506b7817/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 0,\r\n    closedForStaking: false,\r\n  },\r\n  TheoryTheoryDaiSpookyLpRewardPool: {\r\n    name: 'Earn THEORY by staking THEORY-DAI LP',\r\n    page: \"TheoryTheoryDaiSpookyLpRewardPool\",\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'TheoryRewardPool',\r\n    depositTokenName: 'THEORY-DAI LP',\r\n    earnTokenName: 'THEORY',\r\n    finished: false,\r\n    multiplier: '24000',\r\n    site: \"https://gametheory.tech\",\r\n    buyLink: 'https://spooky.fi/#/add/0x60787C689ddc6edfc84FCC9E7d6BD21990793f06/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  },\r\n  TheoryHODLRewardPool: {\r\n    name: 'Earn THEORY by staking HODL',\r\n    page: \"TheoryHODLRewardPool\",\r\n    poolId: 2,\r\n    sectionInUI: 2,\r\n    contract: 'TheoryRewardPool',\r\n    depositTokenName: 'HODL',\r\n    earnTokenName: 'THEORY',\r\n    finished: false,\r\n    multiplier: '24000',\r\n    site: \"https://gametheory.tech\",\r\n    buyLink: 'https://gametheory.tech/#/bonds',\r\n    sort: 2,\r\n    closedForStaking: false,\r\n  }\r\n};\r\n\r\nexport default configurations['production'];\r\n","import React, { createContext, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: rgba(10,16,28,0.8);\r\n  backdrop-filter: blur(5px);\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nexport const RefreshContextProvider: React.FC = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => { \r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\r\n","import { useEffect, useState } from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const { ethereum } = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'FTM',\r\n            symbol: 'ftm',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  toggleWalletModal,\r\n  toggleSettingsMenu,\r\n  updateBlockNumber,\r\n} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: { [chainId: number]: number };\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#9090FF',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n","import { black, purple, teal, grey, red, white } from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 12,\r\n  color: {\r\n    black,\r\n    grey,\r\n    purple,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: grey[400],\r\n    },\r\n    white,\r\n    teal,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { relative } from 'path';\r\n\r\nconst newTheme = createTheme({\r\n  breakpoints: {\r\n    values : {\r\n      xs: 0,\r\n      sm: 767,\r\n      md: 900,\r\n      lg: 1200,\r\n      xl: 1536,\r\n    }\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    text: {\r\n      primary: '#fff',\r\n    },\r\n    primary: {\r\n      main: '#FF20DF',\r\n    },\r\n    secondary: {\r\n      main: '#2FF0DD',\r\n    },\r\n    neutral: {\r\n      main: '#EEEB78',\r\n    },\r\n    background: {\r\n      default: 'transparent',\r\n      paper: 'transparent',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#fff',\r\n    fontFamily: ['\"forma-djr-micro\"', 'sans-serif'].join(','),\r\n    fontWeight: '500',\r\n    fontSize: 16,\r\n    h1 : {\r\n      fontFamily: ['\"kallisto\"', 'sans-serif'].join(','),\r\n      fontSize: '50px',\r\n      fontWeight: '500',\r\n      '@media (max-width: 900px)': {\r\n        fontSize: '40px',\r\n      }\r\n    },\r\n    h2 : {\r\n      fontFamily: ['\"kallisto\"', 'sans-serif'].join(','),\r\n      fontSize: '40px',\r\n      fontWeight: '500',\r\n      '@media (max-width: 900px)': {\r\n        fontSize: '30px',\r\n      }\r\n    },\r\n    h3 : {\r\n      fontSize: '30px',\r\n      fontWeight: '700',\r\n      '@media (max-width: 900px)': {\r\n        fontSize: '24px',\r\n      }\r\n    },\r\n    h4 : {\r\n      fontSize: '24px',\r\n      fontWeight: '700',\r\n      '@media (max-width: 900px)': {\r\n        fontSize: '20px',\r\n      }\r\n    },\r\n    h5 : {\r\n      fontSize: '20px',\r\n      fontWeight: '700',\r\n      '@media (max-width: 900px)': {\r\n        fontSize: '18px',\r\n      }\r\n    },\r\n    h6  : {\r\n      fontSize: '16px',\r\n      fontWeight: '700',\r\n    },\r\n    body1 : {\r\n      fontSize: '14px',\r\n      fontWeight: '500',\r\n    },\r\n    body2 : {\r\n      fontSize: '16px',\r\n      fontWeight: '500',\r\n    }\r\n  },\r\n  components: {\r\n    MuiContainer: {\r\n      styleOverrides: {\r\n        root: {\r\n          position: 'relative',\r\n        }\r\n      }\r\n    },\r\n    MuiToolbar: {\r\n      styleOverrides: {\r\n        root: {\r\n          paddingLeft: '0px',\r\n          paddingRight: '0px',\r\n          '@media (min-width: 767px)': {\r\n            paddingLeft: '0px',\r\n            paddingRight: '0px',\r\n          }\r\n        }\r\n      }\r\n    },\r\n      MuiButton: {\r\n          styleOverrides: {\r\n            root: {\r\n              textTransform: 'none',\r\n                borderRadius: \"20px\",\r\n                fontWeight: \"700\",\r\n                padding: \"10px 30px\",\r\n                boxShadow: \"0px 0px 20px 0px var(--accent)\",\r\n                textShadow: \"0px 0px 20px #FFFFFF\",\r\n                '&.Mui-disabled': {\r\n                  backgroundColor: \"rgba(255, 255, 255, 0.1)\",\r\n                  color: \"rgba(255, 255, 255, 0.25)\",\r\n                  textShadow: \"none\"\r\n                }\r\n            },\r\n            outlined: {\r\n              boxShadow: 'none',\r\n              textShadow: \"none\",\r\n              border: \"2px solid var(--accent)\",\r\n              color: \"#fff\",\r\n              transition: \"all 250ms cubic-bezier(0.4, 0, 0.2, 1)\",\r\n              '&:hover': {\r\n                border: \"2px solid var(--accent)\",\r\n                boxShadow: \"0px 0px 20px 0px var(--accent)\",\r\n                textShadow: \"0px 0px 20px #FFFFFF\",\r\n              }\r\n            }\r\n          }\r\n      },\r\n    MuiCard: {\r\n      styleOverrides: {\r\n        root: {\r\n          borderRadius: \"20px\",\r\n          boxShadow: \"0px 0px 5px var(--extra-color-1)\",\r\n          border: \"2px solid var(--extra-color-1)\",\r\n          backdropFilter: \"blur(15px)\",\r\n          height: \"100%\",\r\n          overflow: \"initial\"\r\n        },\r\n      }\r\n    },\r\n    MuiCardContent: {\r\n      styleOverrides: {\r\n        root: {\r\n          textAlign: \"center\",\r\n          padding: '30px 20px',\r\n          '&:last-child': {\r\n            paddingBottom: '30px',\r\n          },\r\n          '& img': {\r\n            margin: '0 auto',\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiAccordion: {\r\n      styleOverrides: {\r\n        root: {\r\n          '&:before': {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n          },\r\n          '&.Mui-expanded': {\r\n            '&:before': {\r\n              opacity: '1',\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiAccordionSummary: {\r\n      styleOverrides: {\r\n        root: {\r\n          '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\r\n            transform: 'rotate(45deg)',\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiAccordionDetails: {\r\n      styleOverrides: {\r\n        root: {\r\n          padding: '10px 40px 16px 16px',\r\n        }\r\n      }\r\n    },\r\n    MuiTableCell: {\r\n      styleOverrides: {\r\n        root: {\r\n          padding: '10px',\r\n          borderBottom: 'none',\r\n        }\r\n      }\r\n    },\r\n    MuiPaper: {\r\n      styleOverrides: {\r\n        root: {\r\n          boxShadow: \"none\",\r\n          position: 'relative'\r\n        }\r\n      }\r\n    },\r\n    MuiGrid: {\r\n      styleOverrides: {\r\n        root: {\r\n          '@media (min-width: 767px)': {\r\n            '& .MuiGrid-grid-md-4': {\r\n              flexBasis: '375px',\r\n              maxWidth: '375px',\r\n            },\r\n            '& .MuiGrid-grid-md-6': {\r\n              flexBasis: '500px',\r\n              maxWidth: '500px',\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiSelect: {\r\n      styleOverrides: {\r\n        root: {\r\n          backgroundColor: '#0A142A',\r\n          fontSize: '20px',\r\n          borderRadius: '20px',\r\n          '& .MuiSelect-select': {\r\n            padding: '0 20px',\r\n            height: '56px',\r\n            lineHeight: '56px',\r\n          },\r\n          '& .MuiSelect-icon': {\r\n            color: 'var(--accent)',\r\n          },\r\n          '&:hover': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n              borderColor: 'var(--accent)',\r\n              borderWidth: '2px'\r\n            }\r\n          },\r\n          '&.Mui-focused': {\r\n            '& .MuiOutlinedInput-notchedOutline': {\r\n              boxShadow: '0px 0px 20px 0px var(--accent)',\r\n            }\r\n          },\r\n        }\r\n      }\r\n    },\r\n    MuiSlider: {\r\n      styleOverrides: {\r\n        root: {\r\n          height: '15px',\r\n          '& .MuiSlider-track': {\r\n            boxShadow: '0 0 20px',\r\n          },\r\n          '& .MuiSlider-rail': {\r\n            backgroundColor: '#0A142A',\r\n          },\r\n          '& .MuiSlider-thumb': {\r\n            height: '50px',\r\n            width: '50px',\r\n            boxShadow: '0 0 20px',\r\n          },\r\n          '& .MuiSlider-valueLabel': {\r\n            backgroundColor: 'var(--accent)',\r\n            display: 'block',\r\n            transform: 'none!important',\r\n            lineHeight: '1',\r\n            position: 'relative',\r\n            padding: 0,\r\n            top: 0,\r\n            fontSize: '20px',\r\n            fontWeight: '700'\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiMenuItem: {\r\n      styleOverrides: {\r\n        root: {\r\n          fontSize: '16px',\r\n          backgroundColor: 'transparent',\r\n          color: '#fff',\r\n          '&:hover': {\r\n            backgroundColor: 'transparent',\r\n            color: 'var(--accent)',\r\n            textShadow: '0px 0px 20px var(--accent)'\r\n          },\r\n          '&.Mui-selected': {\r\n            backgroundColor: 'transparent',\r\n            color: 'var(--accent)',\r\n            textShadow: '0px 0px 20px var(--accent)',\r\n            '&:hover': {\r\n              backgroundColor: 'transparent',\r\n              color: 'var(--accent)',\r\n              textShadow: '0px 0px 20px var(--accent)'\r\n            }\r\n          },\r\n        }\r\n      }\r\n    },\r\n    MuiList: {\r\n      styleOverrides: {\r\n        root: {\r\n          borderRadius: '20px',\r\n          backgroundColor: '#0A142A',\r\n        }\r\n      }\r\n    },\r\n    MuiListItemText: {\r\n      styleOverrides: {\r\n        primary: {\r\n          fontSize: '18px',\r\n          fontFamily: '\"kallisto\", sans-serif'\r\n        }\r\n      }\r\n    },\r\n    MuiSvgIcon: {\r\n      styleOverrides: {\r\n        root: {\r\n          '&[data-testid=\"QuestionMarkIcon\"]': {\r\n            fontSize: '20px',\r\n          }\r\n        }\r\n      }\r\n    },\r\n    MuiInputLabel: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: 'var(--extra-color-1)',\r\n          fontSize: '16px',\r\n          marginBottom: '10px',\r\n          overflow: 'initial',\r\n        }\r\n      }\r\n    },\r\n    MuiBackdrop: {\r\n      styleOverrides: {\r\n        root: {\r\n          backgroundColor: 'rgba(10,16,28,0.8)',\r\n          backdropFilter: 'blur(5px)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport default newTheme;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport { updateBlockNumber } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const { ethereum, chainId } = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\r\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({ chainId, blockNumber: null });\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { checkedTransaction, finalizeTransaction } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, ethereum } = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { AlertCircle, CheckCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const { chainId } = useWallet();\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        {success ? <CheckCircle color=\"var(--extra-color-1)\" size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on Ftmscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { AlertCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback, useContext, useEffect } from 'react';\r\nimport { X } from 'react-feather';\r\nimport { useSpring } from 'react-spring/web';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { animated } from 'react-spring';\r\nimport { PopupContent } from '../../state/application/actions';\r\nimport { useRemovePopup } from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({ theme }) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({ theme }) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: { hash, success, summary },\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: { message, stack },\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: { width: '100%' },\r\n    to: { width: '0%' },\r\n    config: { duration: removeAfterMs ?? undefined },\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color=\"var(--accent)\" onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useActivePopups } from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({ height }) => height};\r\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider as TP } from '@mui/material/styles';\r\nimport { ThemeProvider as TP1 } from 'styled-components';\r\nimport { UseWalletProvider } from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\nimport { RefreshContextProvider } from './contexts/RefreshContext';\r\n\r\nconst Index = lazy(() => import('./views/Index'));\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst Farms = lazy(() => import('./views/Cemetery'));\r\nconst Boardroom = lazy(() => import('./views/Masonry'));\r\n//const Rebates = lazy(() => import('./views/Rebates'));\r\nconst Bonds = lazy(() => import('./views/Pit'));\r\nconst Treasury = lazy(() => import('./views/Treasury'));\r\nconst About = lazy(() => import('./views/About'));\r\nconst Nft = lazy(() => import('./views/Nft'));\r\nconst Dungeon = lazy(() => import('./views/Dungeon'));\r\nconst Altergene = lazy(() => import('./views/Altergene'));\r\nconst Leaderboards = lazy(() => import('./views/Leaderboards'));\r\n// const SBS = lazy(() => import('./views/Sbs'));\r\n// const Liquidity = lazy(() => import('./views/Liquidity'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.1');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <Router basename='/'>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Index />\r\n            </Route>\r\n            <Route exact path=\"/home\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/theoretics\">\r\n              <Boardroom />\r\n            </Route>\r\n            <Route path=\"/bonds\">\r\n              <Bonds />\r\n            </Route>\r\n            <Route path=\"/treasury\">\r\n              <Treasury />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/nfts\">\r\n              <Nft />\r\n            </Route>\r\n            <Route path=\"/dungeon\">\r\n              <Dungeon />\r\n            </Route>\r\n            <Route path=\"/altergene\">\r\n              <Altergene />\r\n            </Route>\r\n            <Route path=\"/leaderboards\">\r\n              <Leaderboards />\r\n            </Route>\r\n            {/* <Route path=\"/sbs\">\r\n              <SBS />\r\n            </Route>\r\n            <Route path=\"/regulations\">\r\n              <Regulations />\r\n            </Route>\r\n            <Route path=\"/liquidity\">\r\n              <Liquidity />\r\n            </Route> */}\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n          chainId={config.chainId}\r\n          connectors={{\r\n            walletconnect: { rpcUrl: config.defaultProvider },\r\n            walletlink: {\r\n              url: config.defaultProvider,\r\n              appName: 'Game Theory',\r\n              appLogoUrl: './GAME-01.png',\r\n            },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <RefreshContextProvider>\r\n              <TombFinanceProvider>\r\n                <ModalsProvider>\r\n                  <BanksProvider>\r\n                    <>\r\n                      <Popups />\r\n                      {children}\r\n                    </>\r\n                  </BanksProvider>\r\n                </ModalsProvider>\r\n              </TombFinanceProvider>\r\n            </RefreshContextProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}