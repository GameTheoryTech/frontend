{"version":3,"sources":["utils/constants.ts","state/transactions/actions.ts","state/application/hooks.ts","tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","tomb-finance/ERC20.ts","tomb-finance/ERC20Lockable.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useTombFinance.ts","utils/formatBalance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","config.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["TOMB_TICKER","TSHARE_TICKER","FTM_TICKER","SPOOKY_ROUTER_ADDR","ZAPPER_ROUTER_ADDR","addTransaction","createAction","clearAllTransactions","finalizeTransaction","checkedTransaction","useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","ERC20","address","symbol","decimal","abi","ABI","contract","this","Contract","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","ERC20Lockable","LockableABI","lockOf","canUnlockAmount","totalBalanceOf","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBDAI_LP","TOMB","TSHARE","HODL","FTM","deployments","entries","deployment","game","theory","hodl","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","GameGenesisRewardPool","tombRewardPoolSupply","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceInFTM","getDAIPriceFromPancakeswap","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","BigNumber","from","pow","div","toNumber","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","TheoryRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","getGameUpdatedPrice","expectedPrice","getGamePrice","getBurnableGameLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","poolId","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","depositFee","getWithdrawFeeOf","fee","getCurrentLockPercentage","locked","contractName","getGamePerSecondInPool","rewardPerSecond","getTheoryPerSecondInPool","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getTokenPriceFromSpiritswap","fetch","res","json","data","usd","getTokenPriceFromPancakeswapFTMToDAI","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","isFake","getFullDisplayBalance","tokenSupply","getTombStatFake","getShareStatFake","priceOfToken","tokenInLP","price","poolName","pendingGAME","pendingShare","userInfo","deposit","withdraw","Theoretics","tokenContract","ready","DAI","dai","Token","Fetcher","fetchPairData","daiToToken","priceInBUSD","Route","midPrice","WFTM","wftm","ftmToToken","daiToFtm","chainIdSpirit","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","axios","current_price","Masonry","latestSnapshotIndex","theoreticsHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","getMasonryDPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","Date","prevAllocation","now","to","currentEpoch","theorists","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","getCurrentClaimEpochs","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","getCurrentWithdrawEpochs","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","length","lpName","zapper","estimateZapIn","estimate","estimateZapInToken","overrides","zapIn","zapInToken","unlock","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","useState","setTombFinance","useEffect","unlockWallet","tomb","Provider","useTombFinance","useContext","fractionDigits","isTruncated","number","getBalance","ret","slice","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","configurations","production","ChainId","MAINNET","ChainIdSpirit","networkName","ftmscanUrl","require","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","development","FTMTESTNET","GameDAIRewardPool","page","sectionInUI","multiplier","site","buyLink","closedForStaking","GameUSDCRewardPool","GameMIMRewardPool","GameWFTMRewardPool","GameETHRewardPool","GamepFTMRewardPool","GamebFTMRewardPool","TheoryGameDaiSpookyLpRewardPool","TheoryTheoryDaiSpookyLpRewardPool","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","getTime","createReducer","builder","addCase","transactions","payload","hash","approval","summary","txs","addedTime","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","grey","theme","borderRadius","color","black","purple","primary","light","main","secondary","white","teal","siteWidth","spacing","topBarSize","newTheme","createTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","components","MuiButton","variants","props","variant","style","border","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Home","lazy","Farms","Boardroom","Bonds","Faq","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","basename","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.4105de24.chunk.js","sourcesContent":["export const TOMB_TICKER = 'TOMB';\r\nexport const TSHARE_TICKER = 'TSHARE';\r\nexport const HODL_TICKER = 'HODL';\r\nexport const FTM_TICKER = 'FTM';\r\nexport const WFTM_TICKER = 'WFTM';\r\nexport const DAI_TICKER = 'DAI';\r\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\r\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\r\n","import { createAction } from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { useCallback, useMemo } from 'react';\r\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../index';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import { Deployments } from './deployments';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\nimport { ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  chainIdSpirit: ChainIdSpirit;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: { [contractName: string]: [string, number] };\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  masonryLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 1,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '1000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport { defaultEthereumConfig, EthereumConfig } from './config';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import { ethers } from 'ethers';\r\nimport config from '../config';\r\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\r\n\r\nlet provider: ethers.providers.Web3Provider = null;\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  if (!provider) {\r\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n  }\r\n\r\n  return provider;\r\n}","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\nimport {ContractInterface} from \"@ethersproject/contracts/src.ts/index\";\r\n\r\nclass ERC20 {\r\n  protected contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18, abi : ContractInterface = ABI) {\r\n    this.contract = new Contract(address, abi, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\nimport ERC20 from \"./ERC20\";\r\n\r\nclass ERC20Lockable extends ERC20 {\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    super(address, provider, symbol, decimal, LockableABI);\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, LockableABI, signerOrProvider);\r\n  }\r\n\r\n  lockOf(account: string): Promise<BigNumber> {\r\n    return this.contract.lockOf(account);\r\n  }\r\n\r\n  canUnlockAmount(account: string): Promise<BigNumber> {\r\n    return this.contract.canUnlockAmount(account);\r\n  }\r\n\r\n  totalBalanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.totalBalanceOf(account);\r\n  }\r\n}\r\n\r\nexport default ERC20Lockable;\r\n\r\nconst LockableABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_holder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"lockOf\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_holder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"totalBalanceOf\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n];\r\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\r\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit, ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\nimport { Fetcher } from '@spookyswap/sdk/dist';\r\nimport { Route, Token } from '@spookyswap/sdk/dist';\r\nimport { Configuration } from './config';\r\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\r\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\r\nimport axios from \"axios\";\r\nimport ERC20Lockable from \"./ERC20Lockable\";\r\n/**\r\n * An API module of 2omb Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class TombFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  masonryVersionOfUser?: string;\r\n\r\n  TOMBDAI_LP: Contract;\r\n  TOMB: ERC20Lockable;\r\n  TSHARE: ERC20Lockable;\r\n  HODL: ERC20;\r\n  FTM: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.TOMB = new ERC20Lockable(deployments.game.address, provider, 'GAME');\r\n    this.TSHARE = new ERC20Lockable(deployments.theory.address, provider, 'THEORY');\r\n    this.HODL = new ERC20(deployments.hodl.address, provider, 'HODL');\r\n    this.FTM = this.externalTokens['DAI'];\r\n\r\n    // Uniswap V2 Pair\r\n    this.TOMBDAI_LP = new Contract(externalTokens['GAME-DAI-LP'][0], IUniswapV2PairABI, provider);\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.TOMB, this.TSHARE, this.HODL, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.TOMBDAI_LP = this.TOMBDAI_LP.connect(this.signer);\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchMasonryVersionOfUser()\r\n      .then((version) => (this.masonryVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\r\n        this.masonryVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM SPOOKY TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getTombStat(): Promise<TokenStat> {\r\n    const { GameGenesisRewardPool } = this.contracts;\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply\r\n      .sub(tombRewardPoolSupply);\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TOMB);\r\n    console.log(\"price in dai:\", priceInFTM)\r\n    const priceOfOneFTM = await this.getDAIPriceFromPancakeswap();\r\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfTombInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('GAME') ? this.TOMB : this.TSHARE;\r\n    const isTomb = name.startsWith('GAME');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb, false);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to get price for Tomb\r\n   * @returns TokenStat for HODL\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const tombStat = await this.getTombStat();\r\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\r\n    const modifier = bondTombRatioBN > BigNumber.from(10).pow(18) ? bondTombRatioBN.div(BigNumber.from(10).pow(18)).toNumber() : 1;\r\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(4);\r\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\r\n    const supply = await this.HODL.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInFTM,\r\n      priceInDollars: priceOfTBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for TSHARE\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const { TheoryRewardPool } = this.contracts;\r\n\r\n    const supply = await this.TSHARE.totalSupply();\r\n\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TSHARE);\r\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TheoryRewardPool.address);\r\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    const priceOfOneFTM = await this.getDAIPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInNextTWAP(): Promise<TokenStat> {\r\n    const { Treasury, GameGenesisRewardPool } = this.contracts;\r\n    const expectedPrice = await Treasury.getGameUpdatedPrice(); // Updated price is UUUUSELESS.\r\n\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { Treasury, GameGenesisRewardPool } = this.contracts;\r\n    const expectedPrice = await Treasury.getGamePrice(); // Updated price is UUUUSELESS.\r\n\r\n    const supply = await this.TOMB.totalSupply();\r\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(GameGenesisRewardPool.address);\r\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getGamePrice(); // Updated price is UUUUSELESS.\r\n  }\r\n\r\n  async getBondsPurchasable(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBurnableGameLeft();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and DPR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    console.log(\"deposit token price:\", depositTokenPrice)\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const stat = bank.earnTokenName === 'GAME' ? await this.getTombStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n      bank.poolId\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    const fee = (bank.earnTokenName === \"GAME\" ? (await poolContract.depositFee()) :\r\n            (await poolContract.getWithdrawFeeOf(bank.poolId, this.myAccount))) / 100;\r\n    const locked = (bank.earnTokenName === \"GAME\" ? 0.00 :\r\n        (await poolContract.getCurrentLockPercentage(bank.poolId, this.myAccount)).toNumber());\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n      fee: fee.toFixed(2).toString(),\r\n      locked: locked.toFixed(2).toString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n    poolId: number\r\n  ) {\r\n    if (earnTokenName === 'GAME') {\r\n      const rewardPerSecond = await poolContract.getGamePerSecondInPool(poolId);\r\n      return rewardPerSecond;\r\n    }\r\n    const rewardPerSecond = await poolContract.getTheoryPerSecondInPool(poolId);\r\n    return rewardPerSecond\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneFtmInDollars = await this.getDAIPriceFromPancakeswap();\r\n    if (tokenName === 'dAI') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else if (tokenName === 'DAI') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else {\r\n      console.log(\"token name:\", tokenName)\r\n      if (tokenName === 'GAME-DAI LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true, false);\r\n      } else if (tokenName === 'THEORY-DAI LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false, false);\r\n      } else if (tokenName === \"2SHARES-DAI LP\") {\r\n        tokenPrice = await this.getLPTokenPrice(token, new ERC20(\"0xc54a1684fd1bef1f077a336e6be4bd9a3096a6ca\", this.provider, \"2SHARES\"), false, true);\r\n      } else if (tokenName === \"2OMB-DAI LP\") {\r\n        console.log(\"getting the LP token price here\")\r\n        tokenPrice = await this.getLPTokenPrice(token, new ERC20(\"0x7a6e4e3cc2ac9924605dca4ba31d1831c84b44ae\", this.provider, \"2OMB\"), true, true);\r\n        console.log(\"my token price:\", tokenPrice)\r\n      } else if (tokenName === 'BLOOM') {\r\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\r\n      } else if (tokenName === \"BELUGA\") {\r\n        const data = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=beluga-fi&vs_currencies=usd\").then(res => res.json())\r\n        tokenPrice = data[\"beluga-fi\"].usd\r\n      } else {\r\n        if(tokenName === \"bFTM\" || tokenName === \"pFTM\")\r\n        {\r\n          //Kind of cheating for bonds because we don't consider the premium.\r\n          tokenName = 'pFTM'\r\n          token = new ERC20('0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B', getDefaultProvider(), 'pFTM', 18);\r\n          tokenPrice = await this.getTokenPriceFromPancakeswapFTMToDAI(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n        else if(tokenName !== \"GAME\" && tokenName !== \"THEORY\" && tokenName !== \"TOMB\" && tokenName !== \"TSHARE\" && tokenName !== \"WFTM\") {\r\n          tokenPrice = await this.getTokenPriceFromPancakeswapFTMToDAI(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n        else {\r\n          tokenPrice = await this.getTokenPriceFromPancakeswap(token);\r\n          tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        }\r\n      }\r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryTombPrice = await Treasury.getTombPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForTomb = await Treasury.getGamePrice();\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      if(!token) continue;\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n\r\n    return totalValue + masonryTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\r\n   * @param isTomb sanity check for usage of tomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean, isFake: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isFake === true ? isTomb === true ? await this.getTombStatFake() : await this.getShareStatFake() : isTomb === true ? await this.getTombStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async getTombStatFake() {\r\n    const price = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=2omb-finance&vs_currencies=usd\").then(res => res.json())\r\n    return { priceInDollars: price[\"2omb-finance\"].usd }\r\n  }\r\n\r\n  async getShareStatFake() {\r\n    const price = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=2share&vs_currencies=usd\").then(res => res.json())\r\n    return { priceInDollars: price[\"2share\"].usd }\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'GAME') {\r\n        return await pool.pendingGAME(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchMasonryVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentMasonry(): Contract {\r\n    if (!this.masonryVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Theoretics;\r\n  }\r\n\r\n  isOldMasonryMember(): boolean {\r\n    return this.masonryVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { DAI } = this.config.externalTokens;\r\n\r\n    const dai = new Token(chainId, DAI[0], DAI[1], \"DUMMY\", \"DUMMY Token\");\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    if(dai.address === tokenContract.address) return (1).toFixed(4); //DAI is 1 to 1 with DAI.\r\n    try {\r\n      const daiToToken = await Fetcher.fetchPairData(token, dai, this.provider);\r\n      const priceInBUSD = new Route([daiToToken], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapFTMToDAI(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { DAI, WFTM } = this.config.externalTokens;\r\n\r\n    const dai = new Token(chainId, DAI[0], DAI[1], \"DUMMY\", \"DUMMY Token\");\r\n    const wftm = new Token(chainId, WFTM[0], WFTM[1], \"DUMMY\", \"DUMMY Token\");\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    if(dai.address === tokenContract.address) return (1).toFixed(4); //DAI is 1 to 1 with DAI.\r\n    try {\r\n      const ftmToToken = await Fetcher.fetchPairData(token, wftm, this.provider);\r\n      const daiToFtm = await Fetcher.fetchPairData(wftm, dai, this.provider);\r\n      const priceInBUSD = new Route([ftmToToken, daiToFtm], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainIdSpirit } = this.config;\r\n\r\n    const { DAI } = this.externalTokens;\r\n\r\n    const dai = new TokenSpirit(chainIdSpirit, DAI.address, DAI.decimal);\r\n    const token = new TokenSpirit(chainIdSpirit, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const daiToToken = await FetcherSpirit.fetchPairData(dai, token, this.provider);\r\n      const liquidityToken = daiToToken.liquidityToken;\r\n      let ftmBalanceInLP = await DAI.balanceOf(liquidityToken.address);\r\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, DAI.decimal));\r\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\r\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\r\n      const priceOfOneFtmInDollars = await this.getDAIPriceFromPancakeswap();\r\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\r\n      return priceOfShiba.toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getDAIPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    try {\r\n      const { data } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=dai');\r\n      return (data[0].current_price).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of DAI: ${err}`);\r\n    }\r\n  }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getMasonryDPR() {\r\n    const Masonry = this.currentMasonry();\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const lastHistory = await Masonry.theoreticsHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL);\r\n    return realAPR;\r\n  }\r\n\r\n  async getMasonryAPR() {\r\n    return (await this.getMasonryDPR()) * 365;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\r\n    // const Masonry = this.currentMasonry();\r\n    // const mason = await Masonry.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.totalSupply();\r\n  }\r\n\r\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldMasonryMember()) {\r\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\r\n    }\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getShareOf(this.myAccount);\r\n    }\r\n    return await Masonry.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getEarningsOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Masonry.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.claimDividends();\r\n    }\r\n    return await Masonry.claimReward();\r\n  }\r\n\r\n  async exitFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Theoretics, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Theoretics.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Theoretics.epoch();\r\n    const mason = await Theoretics.theorists(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Theoretics.getCurrentClaimEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Theoretics, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Theoretics.nextEpochPoint();\r\n    const currentEpoch = await Theoretics.epoch();\r\n    const mason = await Theoretics.theorists(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Theoretics.getCurrentWithdrawEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const { ethereum } = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'TOMB') {\r\n        asset = this.TOMB;\r\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\r\n      } else if (assetName === 'TSHARE') {\r\n        asset = this.TSHARE;\r\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\r\n      } else if (assetName === 'HODL') {\r\n        asset = this.HODL;\r\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\r\n      }\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: assetUrl,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\r\n    const { SpookyRouter } = this.contracts;\r\n    const { _reserve0, _reserve1 } = await this.TOMBDAI_LP.getReserves();\r\n    let quote;\r\n    if (tokenName === 'TOMB') {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\r\n    } else {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\r\n    }\r\n    return (quote / 1e18).toString();\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\r\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\r\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\r\n\r\n    let epochBlocksRanges: any[] = [];\r\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\r\n    var events: any[] = [];\r\n    masonryFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\r\n      if (index === 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n      }\r\n      if (index > 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\r\n      }\r\n    });\r\n\r\n    epochBlocksRanges.forEach(async (value, index) => {\r\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\r\n        boughtBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\r\n        redeemBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Helper method\r\n   * @param filter applied on the query to the treasury events\r\n   * @param from block number\r\n   * @param to block number\r\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\r\n   */\r\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\r\n    const { Treasury } = this.contracts;\r\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\r\n    return bondsAmount.length;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === FTM_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === FTM_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n  async unlockGame(): Promise<TransactionResponse> {\r\n    const { game } = this.contracts;\r\n    return await game.unlock();\r\n  }\r\n  async unlockTheory(): Promise<TransactionResponse> {\r\n    const { theory } = this.contracts;\r\n    return await theory.unlock(); //TODO: NFTs\r\n  }\r\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { TShareSwapper } = this.contracts;\r\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\r\n  }\r\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\r\n    const { TShareSwapper } = this.contracts;\r\n    try {\r\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\r\n      return getDisplayBalance(estimateBN, 18, 6);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\r\n    const { TShareSwapper } = this.contracts;\r\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\r\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\r\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\r\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\r\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\r\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\r\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\r\n    return {\r\n      tshareBalance: tshareBalance.toString(),\r\n      tbondBalance: tbondBalance.toString(),\r\n      // tombPrice: tombPriceBN.toString(),\r\n      // tsharePrice: tsharePriceBN.toString(),\r\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\r\n    };\r\n  }\r\n}\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport TombFinance from '../../tomb-finance';\r\nimport config from '../../config';\r\n\r\nexport interface TombFinanceContext {\r\n  tombFinance?: TombFinance;\r\n}\r\n\r\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\r\n\r\nexport const TombFinanceProvider: React.FC = ({ children }) => {\r\n  const { ethereum, account } = useWallet();\r\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!tombFinance) {\r\n      const tomb = new TombFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        tomb.unlockWallet(ethereum, account);\r\n      }\r\n      setTombFinance(tomb);\r\n    } else if (account) {\r\n      tombFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, tombFinance]);\r\n\r\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\r\n};\r\n","import { useContext } from 'react';\r\nimport { Context } from '../contexts/TombFinanceProvider';\r\n\r\nconst useTombFinance = () => {\r\n  const { tombFinance } = useContext(Context);\r\n  return tombFinance;\r\n};\r\n\r\nexport default useTombFinance;\r\n","import { BigNumber } from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","import { createContext } from 'react';\r\nimport { Bank } from '../../tomb-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Context from './context';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Bank } from '../../tomb-finance';\r\nimport config, { bankDefinitions } from '../../config';\r\n\r\nconst Banks: React.FC = ({ children }) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!tombFinance.isUnlocked) continue;\r\n\r\n        // only show pools staked by user\r\n        const balance = await tombFinance.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          tombFinance.myAccount,\r\n        );\r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'TOMB' ? tombFinance.TOMB : tombFinance.TSHARE,\r\n      });\r\n    }\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [tombFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, tombFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","// import { ChainId } from '@pancakeswap-libs/sdk';\r\nimport { ChainId } from '@spookyswap/sdk/dist';\r\nimport { ChainId as ChainIdSpirit } from '@spiritswap/sdk';\r\nimport { Configuration } from './tomb-finance/config';\r\nimport { BankInfo } from './tomb-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  production: {\r\n    chainId: ChainId.MAINNET,\r\n    chainIdSpirit: ChainIdSpirit.MAINNET,\r\n    networkName: 'Fantom Opera Mainnet',\r\n    ftmscanUrl: 'https://ftmscan.com',\r\n    defaultProvider: 'https://rpc.ftm.tools',\r\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      'GAME': ['0x56EbFC2F3873853d799C155AF9bE9Cb8506b7817', 18],\r\n      'THEORY': ['0x60787C689ddc6edfc84FCC9E7d6BD21990793f06', 18],\r\n      'HODL': ['0xFfF54fcdFc0E4357be9577D8BC2B4579ce9D5C88', 18],\r\n      'DAI': ['0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E', 18],\r\n      'GAME-DAI LP': ['0x168e509FE5aae456cDcAC39bEb6Fd56B6cb8912e', 18],\r\n      'THEORY-DAI LP': ['0xF69FCB51A13D4Ca8A58d5a8D964e7ae5d9Ca8594', 18],\r\n      'GAME-DAI-LP': ['0x168e509FE5aae456cDcAC39bEb6Fd56B6cb8912e', 18],\r\n      'THEORY-DAI-LP': ['0xF69FCB51A13D4Ca8A58d5a8D964e7ae5d9Ca8594', 18],\r\n      'USDC': ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6],\r\n      'MIM': ['0x82f0B8B456c1A451378467398982d4834b6829c1', 18],\r\n      'WFTM': ['0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18],\r\n      'ETH': ['0x74b23882a30290451A17c44f4F05243b6b58C76d', 18],\r\n      'pFTM': ['0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B', 18],\r\n      'bFTM': ['0x43fF4d2d89dDB6A5B2932a048E18d125b3606565', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02T13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  development: {\r\n    chainId: ChainId.FTMTESTNET,\r\n    chainIdSpirit: ChainIdSpirit.FTMTESTNET,\r\n    networkName: 'Fantom Opera Testnet',\r\n    ftmscanUrl: 'https://testnet.ftmscan.com',\r\n    defaultProvider: 'https://xapi.testnet.fantom.network/lachesis',\r\n    deployments: require('./tomb-finance/deployments/deployments.testing.json'),\r\n    externalTokens: {\r\n      'GAME': ['0x00B8ba86C1b207f32710e7a4BCaDAB6F04C7dbd2', 18],\r\n      'THEORY': ['0x597Acf9e77D94ED297434851f4c4588c4407E339', 18],\r\n      'DAI': ['0x37d9251480ad504061EfACBa5DD0d8CB0E5c8e79', 18],\r\n      'GAME-DAI LP': ['0x8B999A636AA693E24505676c3BBFfaE0c8143e7f', 18],\r\n      'THEORY-DAI LP': ['0xa7AD577848Db04547038910d45A17Aad7B962Ce9', 18],\r\n      'GAME-DAI-LP': ['0x8B999A636AA693E24505676c3BBFfaE0c8143e7f', 18],\r\n      'THEORY-DAI-LP': ['0xa7AD577848Db04547038910d45A17Aad7B962Ce9', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02T13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\r\n        - 0 = Single asset stake pools\r\n        - 1 = LP asset staking rewarding TOMB\r\n        - 2 = LP asset staking rewarding TSHARE\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  GameDAIRewardPool: {\r\n    name: 'Earn GAME by staking DAI',\r\n    page: \"GameDAIRewardPool\",\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'DAI',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '7500',\r\n    site: \"https://makerdao.com\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 0,\r\n    closedForStaking: true,\r\n  },\r\n  GameUSDCRewardPool: {\r\n    name: 'Earn GAME by staking USDC',\r\n    page: \"GameUSDCRewardPool\",\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'USDC',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://www.centre.io\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n    sort: 1,\r\n    closedForStaking: true,\r\n  },\r\n  GameMIMRewardPool: {\r\n    name: 'Earn GAME by staking MIM',\r\n    page: \"GameMIMRewardPool\",\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'MIM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://abracadabra.money\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n    sort: 2,\r\n    closedForStaking: true,\r\n  },\r\n  GameWFTMRewardPool: {\r\n    name: 'Earn GAME by staking WFTM',\r\n    page: \"GameWFTMRewardPool\",\r\n    poolId: 6, // Hardhat sucks at deploying to mainnet Fantom, it failed the transaction and skipped WFTM and I had to add it manually so the pools are now out of order.\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'WFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://fantom.foundation/defi\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n    sort: 3,\r\n    closedForStaking: true,\r\n  },\r\n  GameETHRewardPool: {\r\n    name: 'Earn GAME by staking ETH (wETH on SpookySwap)',\r\n    page: \"GameETHRewardPool\",\r\n    poolId: 3,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'ETH',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '2500',\r\n    site: \"https://weth.io\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n    sort: 4,\r\n    closedForStaking: true,\r\n  },\r\n  GamepFTMRewardPool: {\r\n    name: 'Earn GAME by staking pFTM',\r\n    page: \"GamepFTMRewardPool\",\r\n    poolId: 4,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'pFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '4000',\r\n    site: \"https://ripae.finance\",\r\n    buyLink: 'https://spookyswap.finance/swap?outputCurrency=0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B',\r\n    sort: 5,\r\n    closedForStaking: true,\r\n  },\r\n  GamebFTMRewardPool: {\r\n    name: 'Earn GAME by staking bFTM',\r\n    page: \"GamebFTMRewardPool\",\r\n    poolId: 5,\r\n    sectionInUI: 0,\r\n    contract: 'GameGenesisRewardPool',\r\n    depositTokenName: 'bFTM',\r\n    earnTokenName: 'GAME',\r\n    finished: false,\r\n    multiplier: '5000',\r\n    site: \"https://ripae.finance\",\r\n    buyLink: 'https://ripae.finance/bonds',\r\n    sort: 6,\r\n    closedForStaking: true,\r\n  },\r\n  TheoryGameDaiSpookyLpRewardPool: {\r\n    name: 'Earn THEORY by staking GAME-DAI LP',\r\n    page: \"TheoryGameDaiSpookyLpRewardPool\",\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'TheoryRewardPool',\r\n    depositTokenName: 'GAME-DAI LP',\r\n    earnTokenName: 'THEORY',\r\n    finished: false,\r\n    multiplier: '35500',\r\n    site: \"https://gametheory.tech\",\r\n    buyLink: 'https://spookyswap.finance/add/0x56EbFC2F3873853d799C155AF9bE9Cb8506b7817/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 0,\r\n    closedForStaking: false,\r\n  },\r\n  TheoryTheoryDaiSpookyLpRewardPool: {\r\n    name: 'Earn THEORY by staking THEORY-DAI LP',\r\n    page: \"TheoryTheoryDaiSpookyLpRewardPool\",\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'TheoryRewardPool',\r\n    depositTokenName: 'THEORY-DAI LP',\r\n    earnTokenName: 'THEORY',\r\n    finished: false,\r\n    multiplier: '24000',\r\n    site: \"https://gametheory.tech\",\r\n    buyLink: 'https://spookyswap.finance/add/0x60787C689ddc6edfc84FCC9E7d6BD21990793f06/0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  }\r\n};\r\n\r\nexport default configurations['production'];\r\n","import React, { createContext, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nexport const RefreshContextProvider: React.FC = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => { \r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\r\n","import { useEffect, useState } from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const { ethereum } = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'FTM',\r\n            symbol: 'ftm',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  toggleWalletModal,\r\n  toggleSettingsMenu,\r\n  updateBlockNumber,\r\n} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: { [chainId: number]: number };\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#9090FF',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n","import { black, purple, teal, grey, red, white } from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 12,\r\n  color: {\r\n    black,\r\n    grey,\r\n    purple,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: grey[400],\r\n    },\r\n    white,\r\n    teal,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createTheme } from '@mui/material/styles';\r\n\r\nconst newTheme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    text: {\r\n      primary: '#E6E9EE',\r\n    },\r\n    background: {\r\n      default: 'transparent',\r\n      paper: 'transparent',\r\n    },\r\n    primary: {\r\n      light: '#757CE8',\r\n      main: '#571EB1',\r\n      dark: '#571EB1',\r\n      contrastText: '#16191E',\r\n    },\r\n    secondary: {\r\n      light: '#757CE8',\r\n      main: '#757CE8',\r\n      dark: '#757CE8',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#9f9d9d !important',\r\n      active: '#000',\r\n      hover: '#000',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#E6E9EE',\r\n    fontFamily: ['\"Gilroy\"', 'sans-serif'].join(','),\r\n  },\r\n  components: {\r\n      MuiButton: {\r\n          variants: [\r\n              {\r\n                  props: { variant: \"standard\" },\r\n                  style: {\r\n                      border: \"1px solid var(--white)\"\r\n                  }\r\n              }\r\n          ]\r\n      }\r\n  }\r\n});\r\n\r\nexport default newTheme;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport { updateBlockNumber } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const { ethereum, chainId } = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\r\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({ chainId, blockNumber: null });\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { checkedTransaction, finalizeTransaction } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, ethereum } = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useContext } from 'react';\r\nimport { AlertCircle, CheckCircle } from 'react-feather';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { useWallet } from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const { chainId } = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on Ftmscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { AlertCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback, useContext, useEffect } from 'react';\r\nimport { X } from 'react-feather';\r\nimport { useSpring } from 'react-spring/web';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { animated } from 'react-spring';\r\nimport { PopupContent } from '../../state/application/actions';\r\nimport { useRemovePopup } from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({ theme }) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({ theme }) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: { hash, success, summary },\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: { message, stack },\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: { width: '100%' },\r\n    to: { width: '0%' },\r\n    config: { duration: removeAfterMs ?? undefined },\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useActivePopups } from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({ height }) => height};\r\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider as TP } from '@mui/material/styles';\r\nimport { ThemeProvider as TP1 } from 'styled-components';\r\nimport { UseWalletProvider } from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\nimport Regulations from './views/Regulations/Regulations';\r\nimport { RefreshContextProvider } from './contexts/RefreshContext';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst Farms = lazy(() => import('./views/Cemetery'));\r\nconst Boardroom = lazy(() => import('./views/Masonry'));\r\n//const Rebates = lazy(() => import('./views/Rebates'));\r\nconst Bonds = lazy(() => import('./views/Pit'));\r\nconst Treasury = lazy(() => import('./views/Treasury'));\r\nconst Faq = lazy(() => import('./views/Faq'));\r\n// const SBS = lazy(() => import('./views/Sbs'));\r\n// const Liquidity = lazy(() => import('./views/Liquidity'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.1');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <Router basename='/'>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/theoretics\">\r\n              <Boardroom />\r\n            </Route>\r\n            <Route path=\"/bonds\">\r\n              <Bonds />\r\n            </Route>\r\n            <Route path=\"/treasury\">\r\n              <Treasury />\r\n            </Route>\r\n            <Route path=\"/faq\">\r\n              <Faq />\r\n            </Route>\r\n            {/* <Route path=\"/sbs\">\r\n              <SBS />\r\n            </Route>\r\n            <Route path=\"/regulations\">\r\n              <Regulations />\r\n            </Route>\r\n            <Route path=\"/liquidity\">\r\n              <Liquidity />\r\n            </Route> */}\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n          chainId={config.chainId}\r\n          connectors={{\r\n            walletconnect: { rpcUrl: config.defaultProvider },\r\n            walletlink: {\r\n              url: config.defaultProvider,\r\n              appName: 'Game Theory',\r\n              appLogoUrl: './GAME-01.png',\r\n            },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <RefreshContextProvider>\r\n              <TombFinanceProvider>\r\n                <ModalsProvider>\r\n                  <BanksProvider>\r\n                    <>\r\n                      <Popups />\r\n                      {children}\r\n                    </>\r\n                  </BanksProvider>\r\n                </ModalsProvider>\r\n              </TombFinanceProvider>\r\n            </RefreshContextProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}